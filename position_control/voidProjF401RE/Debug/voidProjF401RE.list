
voidProjF401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08007748  08007748  00008748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b28  08007b28  0000921c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b28  08007b28  00008b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b30  08007b30  0000921c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b30  08007b30  00008b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b34  08007b34  00008b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08007b38  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000220  08007d54  00009220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08007d54  00009518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000921c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf63  00000000  00000000  0000924c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c99  00000000  00000000  000161af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00017e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e2  00000000  00000000  00018ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017738  00000000  00000000  000194ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e083  00000000  00000000  00030c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000904dc  00000000  00000000  0003ec85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf161  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a0  00000000  00000000  000cf1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  000d3844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800772c 	.word	0x0800772c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	0800772c 	.word	0x0800772c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <cb_init>:
	void *head;       // pointer to head
	void *tail;       // pointer to tail
	bool writing;  // signals if the buffer is being written
} circular_buffer;

void cb_init(circular_buffer *cb, size_t capacity, size_t sz) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	cb->buffer = calloc(capacity, sz);
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	68b8      	ldr	r0, [r7, #8]
 8000ef8:	f003 fdac 	bl	8004a54 <calloc>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	601a      	str	r2, [r3, #0]
	if (cb->buffer == NULL)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <cb_init+0x2a>
		printf("ALLOCATED NULL\n\r");
 8000f0c:	4811      	ldr	r0, [pc, #68]	@ (8000f54 <cb_init+0x6c>)
 8000f0e:	f004 fb8d 	bl	800562c <iprintf>
	// handle error
	cb->buffer_end = (char*) cb->buffer + capacity * sz;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	fb01 f303 	mul.w	r3, r1, r3
 8000f1e:	441a      	add	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	605a      	str	r2, [r3, #4]
	cb->capacity = capacity;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	609a      	str	r2, [r3, #8]
	cb->count = 0;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
	cb->sz = sz;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	611a      	str	r2, [r3, #16]
	cb->head = cb->buffer;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	615a      	str	r2, [r3, #20]
	cb->tail = cb->buffer;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	619a      	str	r2, [r3, #24]
	cb->writing = false;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	771a      	strb	r2, [r3, #28]

}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	08007748 	.word	0x08007748

08000f58 <cb_push_back>:
void cb_free(circular_buffer *cb) {
	free(cb->buffer);
	// clear out other fields too, just to be safe
}

void cb_push_back(circular_buffer *cb, const void *item) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	if (cb->count == cb->capacity) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d102      	bne.n	8000f74 <cb_push_back+0x1c>
		printf("ERROR PUSH BACK \n\r");
 8000f6e:	4815      	ldr	r0, [pc, #84]	@ (8000fc4 <cb_push_back+0x6c>)
 8000f70:	f004 fb5c 	bl	800562c <iprintf>
		// handle error
	}
	cb->writing = true;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	771a      	strb	r2, [r3, #28]
	memmove(cb->head, item, cb->sz);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6958      	ldr	r0, [r3, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	461a      	mov	r2, r3
 8000f84:	6839      	ldr	r1, [r7, #0]
 8000f86:	f004 fba6 	bl	80056d6 <memmove>
	cb->head = (char*) cb->head + cb->sz;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	441a      	add	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	615a      	str	r2, [r3, #20]
	if (cb->head == cb->buffer_end)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695a      	ldr	r2, [r3, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d103      	bne.n	8000fac <cb_push_back+0x54>
		cb->head = cb->buffer;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	615a      	str	r2, [r3, #20]
	cb->count++;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60da      	str	r2, [r3, #12]
	cb->writing = false;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	771a      	strb	r2, [r3, #28]
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	0800775c 	.word	0x0800775c

08000fc8 <cb_pop_front>:

void cb_pop_front(circular_buffer *cb, void *item) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	if (cb->count == 0) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <cb_pop_front+0x18>
		printf("ERROR PUSH BACK \n\r");
 8000fda:	4815      	ldr	r0, [pc, #84]	@ (8001030 <cb_pop_front+0x68>)
 8000fdc:	f004 fb26 	bl	800562c <iprintf>
		// handle error
	}
	memmove(item, cb->tail, cb->sz);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6999      	ldr	r1, [r3, #24]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f004 fb73 	bl	80056d6 <memmove>
	cb->tail = (char*) cb->tail + cb->sz;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	441a      	add	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
	if (cb->tail == cb->buffer_end)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699a      	ldr	r2, [r3, #24]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	d103      	bne.n	8001012 <cb_pop_front+0x4a>
		cb->tail = cb->buffer;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
	while ((cb->writing))
 8001012:	bf00      	nop
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7f1b      	ldrb	r3, [r3, #28]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1fb      	bne.n	8001014 <cb_pop_front+0x4c>
		;
	cb->count--;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60da      	str	r2, [r3, #12]
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	0800775c 	.word	0x0800775c

08001034 <_write>:
	uint32_t cycleBeginDelay; // difference between the actual and the expected absolute start time of the cycle
	uint32_t currentTimestamp; // current timestamp in millis
} record;

/* BEGIN USART WRITE FUNCTION (used by printf)*/
int _write(int file, char *data, int len) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d00a      	beq.n	800105c <_write+0x28>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d007      	beq.n	800105c <_write+0x28>
		errno = EBADF;
 800104c:	f004 fbc0 	bl	80057d0 <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	2209      	movs	r2, #9
 8001054:	601a      	str	r2, [r3, #0]
		return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e00f      	b.n	800107c <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <_write+0x50>)
 8001068:	f003 f97f 	bl	800436a <HAL_UART_Transmit>
 800106c:	4603      	mov	r3, r0
 800106e:	75fb      	strb	r3, [r7, #23]
			1000);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <_write+0x46>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	e000      	b.n	800107c <_write+0x48>
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000314 	.word	0x20000314

08001088 <setPulseFromDutyValue>:

void setPulseFromDutyValue(double dutyVal) {
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	ed87 0b00 	vstr	d0, [r7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // enable the motor driver
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001098:	4877      	ldr	r0, [pc, #476]	@ (8001278 <setPulseFromDutyValue+0x1f0>)
 800109a:	f001 fbe3 	bl	8002864 <HAL_GPIO_WritePin>

	uint16_t channelToModulate;
	uint16_t channelToStop;

	if (dutyVal > 0) {
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd3d 	bl	8000b28 <__aeabi_dcmpgt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <setPulseFromDutyValue+0x36>
		channelToModulate = TIM_CHANNEL_1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_2;
 80010b8:	2304      	movs	r3, #4
 80010ba:	81bb      	strh	r3, [r7, #12]
 80010bc:	e003      	b.n	80010c6 <setPulseFromDutyValue+0x3e>
	} else {
		channelToModulate = TIM_CHANNEL_2;
 80010be:	2304      	movs	r3, #4
 80010c0:	81fb      	strh	r3, [r7, #14]
		channelToStop = TIM_CHANNEL_1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim3, channelToStop, 0);
 80010c6:	89bb      	ldrh	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d104      	bne.n	80010d6 <setPulseFromDutyValue+0x4e>
 80010cc:	4b6b      	ldr	r3, [pc, #428]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010d4:	e013      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010d6:	89bb      	ldrh	r3, [r7, #12]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d104      	bne.n	80010e6 <setPulseFromDutyValue+0x5e>
 80010dc:	4b67      	ldr	r3, [pc, #412]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80010e4:	e00b      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010e6:	89bb      	ldrh	r3, [r7, #12]
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d104      	bne.n	80010f6 <setPulseFromDutyValue+0x6e>
 80010ec:	4b63      	ldr	r3, [pc, #396]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80010f4:	e003      	b.n	80010fe <setPulseFromDutyValue+0x76>
 80010f6:	4b61      	ldr	r3, [pc, #388]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	2300      	movs	r3, #0
 80010fc:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d12b      	bne.n	800115c <setPulseFromDutyValue+0xd4>
 8001104:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001108:	f7ff fd2e 	bl	8000b68 <__aeabi_d2iz>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	bfb8      	it	lt
 8001112:	425b      	neglt	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa0d 	bl	8000534 <__aeabi_i2d>
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
 800111e:	4b57      	ldr	r3, [pc, #348]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9f6 	bl	8000514 <__aeabi_ui2d>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff fa6a 	bl	8000608 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 8001142:	f7ff fb8b 	bl	800085c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	494c      	ldr	r1, [pc, #304]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 800114c:	680c      	ldr	r4, [r1, #0]
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fd31 	bl	8000bb8 <__aeabi_d2uiz>
 8001156:	4603      	mov	r3, r0
 8001158:	6363      	str	r3, [r4, #52]	@ 0x34
			(abs(dutyVal) * ((double )htim3.Init.Period)) / 100); //cast integer value to double to correctly perform division between decimal numbers
}
 800115a:	e088      	b.n	800126e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	2b04      	cmp	r3, #4
 8001160:	d12b      	bne.n	80011ba <setPulseFromDutyValue+0x132>
 8001162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001166:	f7ff fcff 	bl	8000b68 <__aeabi_d2iz>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	bfb8      	it	lt
 8001170:	425b      	neglt	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9de 	bl	8000534 <__aeabi_i2d>
 8001178:	4604      	mov	r4, r0
 800117a:	460d      	mov	r5, r1
 800117c:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9c7 	bl	8000514 <__aeabi_ui2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff fa3b 	bl	8000608 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 80011a0:	f7ff fb5c 	bl	800085c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4934      	ldr	r1, [pc, #208]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80011aa:	680c      	ldr	r4, [r1, #0]
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fd02 	bl	8000bb8 <__aeabi_d2uiz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80011b8:	e059      	b.n	800126e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d12b      	bne.n	8001218 <setPulseFromDutyValue+0x190>
 80011c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011c4:	f7ff fcd0 	bl	8000b68 <__aeabi_d2iz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfb8      	it	lt
 80011ce:	425b      	neglt	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9af 	bl	8000534 <__aeabi_i2d>
 80011d6:	4604      	mov	r4, r0
 80011d8:	460d      	mov	r5, r1
 80011da:	4b28      	ldr	r3, [pc, #160]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f998 	bl	8000514 <__aeabi_ui2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff fa0c 	bl	8000608 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 80011fe:	f7ff fb2d 	bl	800085c <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	491d      	ldr	r1, [pc, #116]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001208:	680c      	ldr	r4, [r1, #0]
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fcd3 	bl	8000bb8 <__aeabi_d2uiz>
 8001212:	4603      	mov	r3, r0
 8001214:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001216:	e02a      	b.n	800126e <setPulseFromDutyValue+0x1e6>
	__HAL_TIM_SET_COMPARE(&htim3, channelToModulate,
 8001218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800121c:	f7ff fca4 	bl	8000b68 <__aeabi_d2iz>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bfb8      	it	lt
 8001226:	425b      	neglt	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f983 	bl	8000534 <__aeabi_i2d>
 800122e:	4604      	mov	r4, r0
 8001230:	460d      	mov	r5, r1
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f96c 	bl	8000514 <__aeabi_ui2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f9e0 	bl	8000608 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <setPulseFromDutyValue+0x1f8>)
 8001256:	f7ff fb01 	bl	800085c <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4907      	ldr	r1, [pc, #28]	@ (800127c <setPulseFromDutyValue+0x1f4>)
 8001260:	680c      	ldr	r4, [r1, #0]
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fca7 	bl	8000bb8 <__aeabi_d2uiz>
 800126a:	4603      	mov	r3, r0
 800126c:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bdb0      	pop	{r4, r5, r7, pc}
 8001276:	bf00      	nop
 8001278:	40020000 	.word	0x40020000
 800127c:	20000284 	.word	0x20000284
 8001280:	40590000 	.word	0x40590000
 8001284:	00000000 	.word	0x00000000

08001288 <getSpeedByDelta>:

double getSpeedByDelta(double ticksDelta, double Ts) {
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001292:	ed87 1b00 	vstr	d1, [r7]
	return ticksDelta * (2*M_PI) / (8400 * Ts);
 8001296:	a312      	add	r3, pc, #72	@ (adr r3, 80012e0 <getSpeedByDelta+0x58>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012a0:	f7ff f9b2 	bl	8000608 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4614      	mov	r4, r2
 80012aa:	461d      	mov	r5, r3
 80012ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80012e8 <getSpeedByDelta+0x60>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012b6:	f7ff f9a7 	bl	8000608 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4620      	mov	r0, r4
 80012c0:	4629      	mov	r1, r5
 80012c2:	f7ff facb 	bl	800085c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80012ce:	eeb0 0a47 	vmov.f32	s0, s14
 80012d2:	eef0 0a67 	vmov.f32	s1, s15
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bdb0      	pop	{r4, r5, r7, pc}
 80012dc:	f3af 8000 	nop.w
 80012e0:	54442d18 	.word	0x54442d18
 80012e4:	401921fb 	.word	0x401921fb
 80012e8:	00000000 	.word	0x00000000
 80012ec:	40c06800 	.word	0x40c06800

080012f0 <getTicksDelta>:

double getTicksDelta(double currentTicks, double lastTicks, double Ts) {
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	ed87 0b04 	vstr	d0, [r7, #16]
 80012fa:	ed87 1b02 	vstr	d1, [r7, #8]
 80012fe:	ed87 2b00 	vstr	d2, [r7]
	double delta;

	if (abs(currentTicks - lastTicks) <= ceil(12600 * Ts))
 8001302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001306:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800130a:	f7fe ffc5 	bl	8000298 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc27 	bl	8000b68 <__aeabi_d2iz>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	bfb8      	it	lt
 8001320:	425b      	neglt	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f906 	bl	8000534 <__aeabi_i2d>
 8001328:	4604      	mov	r4, r0
 800132a:	460d      	mov	r5, r1
 800132c:	a33a      	add	r3, pc, #232	@ (adr r3, 8001418 <getTicksDelta+0x128>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001336:	f7ff f967 	bl	8000608 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	ec43 2b17 	vmov	d7, r2, r3
 8001342:	eeb0 0a47 	vmov.f32	s0, s14
 8001346:	eef0 0a67 	vmov.f32	s1, s15
 800134a:	f006 f869 	bl	8007420 <ceil>
 800134e:	ec53 2b10 	vmov	r2, r3, d0
 8001352:	4620      	mov	r0, r4
 8001354:	4629      	mov	r1, r5
 8001356:	f7ff fbd3 	bl	8000b00 <__aeabi_dcmple>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00a      	beq.n	8001376 <getTicksDelta+0x86>
		delta = currentTicks - lastTicks;
 8001360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001364:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001368:	f7fe ff96 	bl	8000298 <__aeabi_dsub>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001374:	e041      	b.n	80013fa <getTicksDelta+0x10a>
	else {
		if (lastTicks > currentTicks)
 8001376:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800137a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800137e:	f7ff fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01c      	beq.n	80013c2 <getTicksDelta+0xd2>
			delta = currentTicks + pow(2, 16) - 1 - lastTicks;
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <getTicksDelta+0x120>)
 800138e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001392:	f7fe ff83 	bl	800029c <__adddf3>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <getTicksDelta+0x124>)
 80013a4:	f7fe ff78 	bl	8000298 <__aeabi_dsub>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013b4:	f7fe ff70 	bl	8000298 <__aeabi_dsub>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013c0:	e01b      	b.n	80013fa <getTicksDelta+0x10a>
		else
			delta = currentTicks - pow(2, 16) + 1 - lastTicks;
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <getTicksDelta+0x120>)
 80013c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013cc:	f7fe ff64 	bl	8000298 <__aeabi_dsub>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <getTicksDelta+0x124>)
 80013de:	f7fe ff5d 	bl	800029c <__adddf3>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013ee:	f7fe ff53 	bl	8000298 <__aeabi_dsub>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}
	return delta;
 80013fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013fe:	ec43 2b17 	vmov	d7, r2, r3
}
 8001402:	eeb0 0a47 	vmov.f32	s0, s14
 8001406:	eef0 0a67 	vmov.f32	s1, s15
 800140a:	3720      	adds	r7, #32
 800140c:	46bd      	mov	sp, r7
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	40f00000 	.word	0x40f00000
 8001414:	3ff00000 	.word	0x3ff00000
 8001418:	00000000 	.word	0x00000000
 800141c:	40c89c00 	.word	0x40c89c00

08001420 <getPosition>:

double getPosition(double ticksDelta, double *ticksStar) {
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	ed87 0b04 	vstr	d0, [r7, #16]
 800142a:	60f8      	str	r0, [r7, #12]
	(*ticksStar) = (*ticksStar) + ticksDelta;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001432:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001436:	f7fe ff31 	bl	800029c <__adddf3>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	68f9      	ldr	r1, [r7, #12]
 8001440:	e9c1 2300 	strd	r2, r3, [r1]
	double completeTheta = 2*M_PI*(*ticksStar)/(8400);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144a:	a32b      	add	r3, pc, #172	@ (adr r3, 80014f8 <getPosition+0xd8>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f8da 	bl	8000608 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	a328      	add	r3, pc, #160	@ (adr r3, 8001500 <getPosition+0xe0>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff f9fb 	bl	800085c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int sign = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if(completeTheta>0)
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800147e:	f7ff fb53 	bl	8000b28 <__aeabi_dcmpgt>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <getPosition+0x6e>
		sign = 1;
 8001488:	2301      	movs	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800148c:	e00d      	b.n	80014aa <getPosition+0x8a>
	else if(completeTheta<0)
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800149a:	f7ff fb27 	bl	8000aec <__aeabi_dcmplt>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <getPosition+0x8a>
		sign = -1;
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	double position = sign*fmod(fabs(completeTheta),2*M_PI);
 80014aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80014ac:	f7ff f842 	bl	8000534 <__aeabi_i2d>
 80014b0:	4604      	mov	r4, r0
 80014b2:	460d      	mov	r5, r1
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 80014f8 <getPosition+0xd8>
 80014c4:	ed97 0b00 	vldr	d0, [r7]
 80014c8:	f005 ff7a 	bl	80073c0 <fmod>
 80014cc:	ec53 2b10 	vmov	r2, r3, d0
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7ff f898 	bl	8000608 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return position;
 80014e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80014e8:	eeb0 0a47 	vmov.f32	s0, s14
 80014ec:	eef0 0a67 	vmov.f32	s1, s15
 80014f0:	3730      	adds	r7, #48	@ 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bdb0      	pop	{r4, r5, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	54442d18 	.word	0x54442d18
 80014fc:	401921fb 	.word	0x401921fb
 8001500:	00000000 	.word	0x00000000
 8001504:	40c06800 	.word	0x40c06800

08001508 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	b097      	sub	sp, #92	@ 0x5c
 800150c:	af06      	add	r7, sp, #24
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800150e:	f000 fe7d 	bl	800220c <HAL_Init>

	/* USER CODE BEGIN Init */
	size_t bufferSize = (size_t)ceil(2 * WAITING / (Ts * samplingPrescaler));
 8001512:	4b46      	ldr	r3, [pc, #280]	@ (800162c <main+0x124>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f80c 	bl	8000534 <__aeabi_i2d>
 800151c:	4b44      	ldr	r3, [pc, #272]	@ (8001630 <main+0x128>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f871 	bl	8000608 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	f04f 0000 	mov.w	r0, #0
 800152e:	4941      	ldr	r1, [pc, #260]	@ (8001634 <main+0x12c>)
 8001530:	f7ff f994 	bl	800085c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	ec43 2b17 	vmov	d7, r2, r3
 800153c:	eeb0 0a47 	vmov.f32	s0, s14
 8001540:	eef0 0a67 	vmov.f32	s1, s15
 8001544:	f005 ff6c 	bl	8007420 <ceil>
 8001548:	ec53 2b10 	vmov	r2, r3, d0
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fb32 	bl	8000bb8 <__aeabi_d2uiz>
 8001554:	4603      	mov	r3, r0
 8001556:	637b      	str	r3, [r7, #52]	@ 0x34
	cb_init(&myBuff, bufferSize, sizeof(record));
 8001558:	2228      	movs	r2, #40	@ 0x28
 800155a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800155c:	4836      	ldr	r0, [pc, #216]	@ (8001638 <main+0x130>)
 800155e:	f7ff fcc3 	bl	8000ee8 <cb_init>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001562:	f000 f879 	bl	8001658 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001566:	f000 fa35 	bl	80019d4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800156a:	f000 fa09 	bl	8001980 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 800156e:	f000 f937 	bl	80017e0 <MX_TIM3_Init>
	MX_TIM1_Init();
 8001572:	f000 f8dd 	bl	8001730 <MX_TIM1_Init>
	MX_TIM4_Init();
 8001576:	f000 f9b5 	bl	80018e4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800157a:	2100      	movs	r1, #0
 800157c:	482f      	ldr	r0, [pc, #188]	@ (800163c <main+0x134>)
 800157e:	f001 ff49 	bl	8003414 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001582:	2104      	movs	r1, #4
 8001584:	482d      	ldr	r0, [pc, #180]	@ (800163c <main+0x134>)
 8001586:	f001 ff45 	bl	8003414 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim1);
 800158a:	482d      	ldr	r0, [pc, #180]	@ (8001640 <main+0x138>)
 800158c:	f001 fe2c 	bl	80031e8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8001590:	482c      	ldr	r0, [pc, #176]	@ (8001644 <main+0x13c>)
 8001592:	f001 fe83 	bl	800329c <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int referenceIndex = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	63fb      	str	r3, [r7, #60]	@ 0x3c

	referenceVal = referenceVals[referenceIndex];
 800159a:	4a2b      	ldr	r2, [pc, #172]	@ (8001648 <main+0x140>)
 800159c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	4929      	ldr	r1, [pc, #164]	@ (800164c <main+0x144>)
 80015a8:	e9c1 2300 	strd	r2, r3, [r1]
	printf("INIT\n\r"); // initialize the Matlab tool for COM data acquiring
 80015ac:	4828      	ldr	r0, [pc, #160]	@ (8001650 <main+0x148>)
 80015ae:	f004 f83d 	bl	800562c <iprintf>

	while (1) {
		size_t nEntriesToSend = myBuff.count; //number of samples not read yet
 80015b2:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <main+0x130>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	633b      	str	r3, [r7, #48]	@ 0x30
		record retrieved; //buffer entry

		for (size_t count = 0; count < nEntriesToSend; count++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015bc:	e01c      	b.n	80015f8 <main+0xf0>
			cb_pop_front(&myBuff, &retrieved); //take entry from the buffer
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4619      	mov	r1, r3
 80015c4:	481c      	ldr	r0, [pc, #112]	@ (8001638 <main+0x130>)
 80015c6:	f7ff fcff 	bl	8000fc8 <cb_pop_front>
			printf("%lu, %f, %f, %f, %lu\n\r", retrieved.currentTimestamp,
 80015ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015da:	6a3e      	ldr	r6, [r7, #32]
 80015dc:	9604      	str	r6, [sp, #16]
 80015de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015e2:	e9cd 2300 	strd	r2, r3, [sp]
 80015e6:	4622      	mov	r2, r4
 80015e8:	462b      	mov	r3, r5
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4819      	ldr	r0, [pc, #100]	@ (8001654 <main+0x14c>)
 80015ee:	f004 f81d 	bl	800562c <iprintf>
		for (size_t count = 0; count < nEntriesToSend; count++) {
 80015f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015f4:	3301      	adds	r3, #1
 80015f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d3de      	bcc.n	80015be <main+0xb6>
					retrieved.current_u, retrieved.current_x2, retrieved.current_x1,
					retrieved.cycleCoreDuration); // send values via USART using format: value1, value2, value3, ... valuen \n \r
		}
		referenceVal = referenceVals[referenceIndex];
 8001600:	4a11      	ldr	r2, [pc, #68]	@ (8001648 <main+0x140>)
 8001602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	490f      	ldr	r1, [pc, #60]	@ (800164c <main+0x144>)
 800160e:	e9c1 2300 	strd	r2, r3, [r1]
		referenceIndex = referenceIndex + 1;
 8001612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001614:	3301      	adds	r3, #1
 8001616:	63fb      	str	r3, [r7, #60]	@ 0x3c
		HAL_Delay(WAITING*1000); // takes a time value in ms
 8001618:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800161c:	f000 fe68 	bl	80022f0 <HAL_Delay>
		if (referenceIndex > 3)
 8001620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001622:	2b03      	cmp	r3, #3
 8001624:	ddc5      	ble.n	80015b2 <main+0xaa>
			referenceIndex = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (1) {
 800162a:	e7c2      	b.n	80015b2 <main+0xaa>
 800162c:	20000044 	.word	0x20000044
 8001630:	20000018 	.word	0x20000018
 8001634:	40100000 	.word	0x40100000
 8001638:	20000358 	.word	0x20000358
 800163c:	20000284 	.word	0x20000284
 8001640:	2000023c 	.word	0x2000023c
 8001644:	200002cc 	.word	0x200002cc
 8001648:	20000020 	.word	0x20000020
 800164c:	200003b8 	.word	0x200003b8
 8001650:	08007770 	.word	0x08007770
 8001654:	08007778 	.word	0x08007778

08001658 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b094      	sub	sp, #80	@ 0x50
 800165c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800165e:	f107 0320 	add.w	r3, r7, #32
 8001662:	2230      	movs	r2, #48	@ 0x30
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f004 f84f 	bl	800570a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <SystemClock_Config+0xd0>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	4a28      	ldr	r2, [pc, #160]	@ (8001728 <SystemClock_Config+0xd0>)
 8001686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800168a:	6413      	str	r3, [r2, #64]	@ 0x40
 800168c:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <SystemClock_Config+0xd0>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	4b23      	ldr	r3, [pc, #140]	@ (800172c <SystemClock_Config+0xd4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016a4:	4a21      	ldr	r2, [pc, #132]	@ (800172c <SystemClock_Config+0xd4>)
 80016a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <SystemClock_Config+0xd4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b8:	2302      	movs	r3, #2
 80016ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016bc:	2301      	movs	r3, #1
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c0:	2310      	movs	r3, #16
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c4:	2302      	movs	r3, #2
 80016c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80016cc:	2310      	movs	r3, #16
 80016ce:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80016d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016d4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016d6:	2304      	movs	r3, #4
 80016d8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80016da:	2304      	movs	r3, #4
 80016dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016de:	f107 0320 	add.w	r3, r7, #32
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 f8d8 	bl	8002898 <HAL_RCC_OscConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x9a>
		Error_Handler();
 80016ee:	f000 fb37 	bl	8001d60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016f2:	230f      	movs	r3, #15
 80016f4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f6:	2302      	movs	r3, #2
 80016f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001702:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2102      	movs	r1, #2
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fb3a 	bl	8002d88 <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0xc6>
		Error_Handler();
 800171a:	f000 fb21 	bl	8001d60 <Error_Handler>
	}
}
 800171e:	bf00      	nop
 8001720:	3750      	adds	r7, #80	@ 0x50
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000

08001730 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	@ 0x30
 8001734:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	2224      	movs	r2, #36	@ 0x24
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f003 ffe3 	bl	800570a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800174c:	4b22      	ldr	r3, [pc, #136]	@ (80017d8 <MX_TIM1_Init+0xa8>)
 800174e:	4a23      	ldr	r2, [pc, #140]	@ (80017dc <MX_TIM1_Init+0xac>)
 8001750:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001752:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <MX_TIM1_Init+0xa8>)
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <MX_TIM1_Init+0xa8>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800175e:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <MX_TIM1_Init+0xa8>)
 8001760:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001764:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001766:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <MX_TIM1_Init+0xa8>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800176c:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_TIM1_Init+0xa8>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <MX_TIM1_Init+0xa8>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001778:	2303      	movs	r3, #3
 800177a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001780:	2301      	movs	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001790:	2301      	movs	r3, #1
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4619      	mov	r1, r3
 80017a2:	480d      	ldr	r0, [pc, #52]	@ (80017d8 <MX_TIM1_Init+0xa8>)
 80017a4:	f001 fee6 	bl	8003574 <HAL_TIM_Encoder_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM1_Init+0x82>
		Error_Handler();
 80017ae:	f000 fad7 	bl	8001d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <MX_TIM1_Init+0xa8>)
 80017c0:	f002 fd04 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80017ca:	f000 fac9 	bl	8001d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	3730      	adds	r7, #48	@ 0x30
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000023c 	.word	0x2000023c
 80017dc:	40010000 	.word	0x40010000

080017e0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	@ 0x38
 80017e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80017e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001810:	4b32      	ldr	r3, [pc, #200]	@ (80018dc <MX_TIM3_Init+0xfc>)
 8001812:	4a33      	ldr	r2, [pc, #204]	@ (80018e0 <MX_TIM3_Init+0x100>)
 8001814:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84 - 1;
 8001816:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <MX_TIM3_Init+0xfc>)
 8001818:	2253      	movs	r2, #83	@ 0x53
 800181a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181c:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <MX_TIM3_Init+0xfc>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 500 - 1;
 8001822:	4b2e      	ldr	r3, [pc, #184]	@ (80018dc <MX_TIM3_Init+0xfc>)
 8001824:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001828:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182a:	4b2c      	ldr	r3, [pc, #176]	@ (80018dc <MX_TIM3_Init+0xfc>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001830:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <MX_TIM3_Init+0xfc>)
 8001832:	2280      	movs	r2, #128	@ 0x80
 8001834:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001836:	4829      	ldr	r0, [pc, #164]	@ (80018dc <MX_TIM3_Init+0xfc>)
 8001838:	f001 fc86 	bl	8003148 <HAL_TIM_Base_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM3_Init+0x66>
		Error_Handler();
 8001842:	f000 fa8d 	bl	8001d60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800184c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001850:	4619      	mov	r1, r3
 8001852:	4822      	ldr	r0, [pc, #136]	@ (80018dc <MX_TIM3_Init+0xfc>)
 8001854:	f002 f8fe 	bl	8003a54 <HAL_TIM_ConfigClockSource>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM3_Init+0x82>
		Error_Handler();
 800185e:	f000 fa7f 	bl	8001d60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001862:	481e      	ldr	r0, [pc, #120]	@ (80018dc <MX_TIM3_Init+0xfc>)
 8001864:	f001 fd7c 	bl	8003360 <HAL_TIM_PWM_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM3_Init+0x92>
		Error_Handler();
 800186e:	f000 fa77 	bl	8001d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800187a:	f107 0320 	add.w	r3, r7, #32
 800187e:	4619      	mov	r1, r3
 8001880:	4816      	ldr	r0, [pc, #88]	@ (80018dc <MX_TIM3_Init+0xfc>)
 8001882:	f002 fca3 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 800188c:	f000 fa68 	bl	8001d60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001890:	2360      	movs	r3, #96	@ 0x60
 8001892:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	480d      	ldr	r0, [pc, #52]	@ (80018dc <MX_TIM3_Init+0xfc>)
 80018a8:	f002 f812 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80018b2:	f000 fa55 	bl	8001d60 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2204      	movs	r2, #4
 80018ba:	4619      	mov	r1, r3
 80018bc:	4807      	ldr	r0, [pc, #28]	@ (80018dc <MX_TIM3_Init+0xfc>)
 80018be:	f002 f807 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 80018c8:	f000 fa4a 	bl	8001d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80018cc:	4803      	ldr	r0, [pc, #12]	@ (80018dc <MX_TIM3_Init+0xfc>)
 80018ce:	f000 fafb 	bl	8001ec8 <HAL_TIM_MspPostInit>

}
 80018d2:	bf00      	nop
 80018d4:	3738      	adds	r7, #56	@ 0x38
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000284 	.word	0x20000284
 80018e0:	40000400 	.word	0x40000400

080018e4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018f8:	463b      	mov	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001900:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001902:	4a1e      	ldr	r2, [pc, #120]	@ (800197c <MX_TIM4_Init+0x98>)
 8001904:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84 - 1;
 8001906:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001908:	2253      	movs	r2, #83	@ 0x53
 800190a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <MX_TIM4_Init+0x94>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 5000 - 1;
 8001912:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001914:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001918:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <MX_TIM4_Init+0x94>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001926:	4814      	ldr	r0, [pc, #80]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001928:	f001 fc0e 	bl	8003148 <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM4_Init+0x52>
		Error_Handler();
 8001932:	f000 fa15 	bl	8001d60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	4619      	mov	r1, r3
 8001942:	480d      	ldr	r0, [pc, #52]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001944:	f002 f886 	bl	8003a54 <HAL_TIM_ConfigClockSource>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM4_Init+0x6e>
		Error_Handler();
 800194e:	f000 fa07 	bl	8001d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800195a:	463b      	mov	r3, r7
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001960:	f002 fc34 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800196a:	f000 f9f9 	bl	8001d60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200002cc 	.word	0x200002cc
 800197c:	40000800 	.word	0x40000800

08001980 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <MX_USART2_UART_Init+0x4c>)
 8001986:	4a12      	ldr	r2, [pc, #72]	@ (80019d0 <MX_USART2_UART_Init+0x50>)
 8001988:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <MX_USART2_UART_Init+0x4c>)
 800198c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001990:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <MX_USART2_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <MX_USART2_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <MX_USART2_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <MX_USART2_UART_Init+0x4c>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <MX_USART2_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <MX_USART2_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80019b6:	4805      	ldr	r0, [pc, #20]	@ (80019cc <MX_USART2_UART_Init+0x4c>)
 80019b8:	f002 fc8a 	bl	80042d0 <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80019c2:	f000 f9cd 	bl	8001d60 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000314 	.word	0x20000314
 80019d0:	40004400 	.word	0x40004400

080019d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <MX_GPIO_Init+0x80>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a18      	ldr	r2, [pc, #96]	@ (8001a54 <MX_GPIO_Init+0x80>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <MX_GPIO_Init+0x80>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <MX_GPIO_Init+0x80>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <MX_GPIO_Init+0x80>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <MX_GPIO_Init+0x80>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a28:	480b      	ldr	r0, [pc, #44]	@ (8001a58 <MX_GPIO_Init+0x84>)
 8001a2a:	f000 ff1b 	bl	8002864 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a32:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4619      	mov	r1, r3
 8001a46:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <MX_GPIO_Init+0x84>)
 8001a48:	f000 fd88 	bl	800255c <HAL_GPIO_Init>

}
 8001a4c:	bf00      	nop
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000

08001a5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b096      	sub	sp, #88	@ 0x58
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4aa8      	ldr	r2, [pc, #672]	@ (8001d08 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	f040 8148 	bne.w	8001cfe <HAL_TIM_PeriodElapsedCallback+0x2a2>
		k_controller = k_controller + 1;
 8001a6e:	4ba7      	ldr	r3, [pc, #668]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4aa5      	ldr	r2, [pc, #660]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a76:	6013      	str	r3, [r2, #0]
		if (k_controller == 0) {
 8001a78:	4ba4      	ldr	r3, [pc, #656]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d104      	bne.n	8001a8a <HAL_TIM_PeriodElapsedCallback+0x2e>
			ticControlStep = HAL_GetTick();
 8001a80:	f000 fc2a 	bl	80022d8 <HAL_GetTick>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4aa2      	ldr	r2, [pc, #648]	@ (8001d10 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001a88:	6013      	str	r3, [r2, #0]
		}
		tocControlStep = HAL_GetTick();
 8001a8a:	f000 fc25 	bl	80022d8 <HAL_GetTick>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4aa0      	ldr	r2, [pc, #640]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001a92:	6013      	str	r3, [r2, #0]

		currentTicks = (double) __HAL_TIM_GET_COUNTER(&htim1); //take current value of ticks counting the encoder edges
 8001a94:	4ba0      	ldr	r3, [pc, #640]	@ (8001d18 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd3a 	bl	8000514 <__aeabi_ui2d>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	499d      	ldr	r1, [pc, #628]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001aa6:	e9c1 2300 	strd	r2, r3, [r1]
		//x1: speed
		//x2: position
		double deltaTicks = getTicksDelta(currentTicks, lastTicks, Ts);
 8001aaa:	4b9c      	ldr	r3, [pc, #624]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001aac:	ed93 7b00 	vldr	d7, [r3]
 8001ab0:	4b9b      	ldr	r3, [pc, #620]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ab2:	ed93 6b00 	vldr	d6, [r3]
 8001ab6:	4b9b      	ldr	r3, [pc, #620]	@ (8001d24 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ab8:	ed93 5b00 	vldr	d5, [r3]
 8001abc:	eeb0 2a45 	vmov.f32	s4, s10
 8001ac0:	eef0 2a65 	vmov.f32	s5, s11
 8001ac4:	eeb0 1a46 	vmov.f32	s2, s12
 8001ac8:	eef0 1a66 	vmov.f32	s3, s13
 8001acc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad0:	eef0 0a67 	vmov.f32	s1, s15
 8001ad4:	f7ff fc0c 	bl	80012f0 <getTicksDelta>
 8001ad8:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
		double x1 = getSpeedByDelta(deltaTicks, Ts);
 8001adc:	4b91      	ldr	r3, [pc, #580]	@ (8001d24 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ade:	ed93 7b00 	vldr	d7, [r3]
 8001ae2:	eeb0 1a47 	vmov.f32	s2, s14
 8001ae6:	eef0 1a67 	vmov.f32	s3, s15
 8001aea:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001aee:	f7ff fbcb 	bl	8001288 <getSpeedByDelta>
 8001af2:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
		double x2 = getPosition(deltaTicks, &ticks_last);
 8001af6:	488c      	ldr	r0, [pc, #560]	@ (8001d28 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001af8:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001afc:	f7ff fc90 	bl	8001420 <getPosition>
 8001b00:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
		double delta_u = (x1_last-x1)*K[0]+(x2_last-x2)*K[1]+(referenceVal-x2)*K[2];
 8001b04:	4b89      	ldr	r3, [pc, #548]	@ (8001d2c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b0e:	f7fe fbc3 	bl	8000298 <__aeabi_dsub>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4b85      	ldr	r3, [pc, #532]	@ (8001d30 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fd72 	bl	8000608 <__aeabi_dmul>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4614      	mov	r4, r2
 8001b2a:	461d      	mov	r5, r3
 8001b2c:	4b81      	ldr	r3, [pc, #516]	@ (8001d34 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b32:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b36:	f7fe fbaf 	bl	8000298 <__aeabi_dsub>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	4b7b      	ldr	r3, [pc, #492]	@ (8001d30 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b48:	f7fe fd5e 	bl	8000608 <__aeabi_dmul>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4620      	mov	r0, r4
 8001b52:	4629      	mov	r1, r5
 8001b54:	f7fe fba2 	bl	800029c <__adddf3>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	461d      	mov	r5, r3
 8001b60:	4b75      	ldr	r3, [pc, #468]	@ (8001d38 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b66:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b6a:	f7fe fb95 	bl	8000298 <__aeabi_dsub>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	4b6e      	ldr	r3, [pc, #440]	@ (8001d30 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b7c:	f7fe fd44 	bl	8000608 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4620      	mov	r0, r4
 8001b86:	4629      	mov	r1, r5
 8001b88:	f7fe fb88 	bl	800029c <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		double u = u_last + delta_u;
 8001b94:	4b69      	ldr	r3, [pc, #420]	@ (8001d3c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b9e:	f7fe fb7d 	bl	800029c <__adddf3>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		if(u > 12.0)
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	4b64      	ldr	r3, [pc, #400]	@ (8001d40 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001bb0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001bb4:	f7fe ffb8 	bl	8000b28 <__aeabi_dcmpgt>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x16e>
			u = 12.0;
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d40 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001bc4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001bc8:	e00e      	b.n	8001be8 <HAL_TIM_PeriodElapsedCallback+0x18c>
		else if(u < -12.0)
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	4b5d      	ldr	r3, [pc, #372]	@ (8001d44 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001bd0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001bd4:	f7fe ff8a 	bl	8000aec <__aeabi_dcmplt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <HAL_TIM_PeriodElapsedCallback+0x18c>
			u = -12.0;
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b58      	ldr	r3, [pc, #352]	@ (8001d44 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001be4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		setPulseFromDutyValue(u * 100 / 12);
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b56      	ldr	r3, [pc, #344]	@ (8001d48 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001bee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001bf2:	f7fe fd09 	bl	8000608 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b4f      	ldr	r3, [pc, #316]	@ (8001d40 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001c04:	f7fe fe2a 	bl	800085c <__aeabi_ddiv>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	ec43 2b17 	vmov	d7, r2, r3
 8001c10:	eeb0 0a47 	vmov.f32	s0, s14
 8001c14:	eef0 0a67 	vmov.f32	s1, s15
 8001c18:	f7ff fa36 	bl	8001088 <setPulseFromDutyValue>

		u_last = u;
 8001c1c:	4947      	ldr	r1, [pc, #284]	@ (8001d3c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001c1e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c22:	e9c1 2300 	strd	r2, r3, [r1]
		x1_last = x1;
 8001c26:	4941      	ldr	r1, [pc, #260]	@ (8001d2c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001c28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c2c:	e9c1 2300 	strd	r2, r3, [r1]
		x2_last = x2;
 8001c30:	4940      	ldr	r1, [pc, #256]	@ (8001d34 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001c32:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c36:	e9c1 2300 	strd	r2, r3, [r1]
		controlComputationDuration = HAL_GetTick() - tocControlStep;
 8001c3a:	f000 fb4d 	bl	80022d8 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4b34      	ldr	r3, [pc, #208]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	4a41      	ldr	r2, [pc, #260]	@ (8001d4c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001c48:	6013      	str	r3, [r2, #0]
		lastTicks = currentTicks;
 8001c4a:	4b34      	ldr	r3, [pc, #208]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	4933      	ldr	r1, [pc, #204]	@ (8001d20 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001c52:	e9c1 2300 	strd	r2, r3, [r1]
		// recording data in the buffer
		record r;
		r.current_u = u;
 8001c56:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c5a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		r.current_x1 = x1;
 8001c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c62:	e9c7 2304 	strd	r2, r3, [r7, #16]
		r.current_x2 = x2;
 8001c66:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		r.cycleCoreDuration = controlComputationDuration;
 8001c6e:	4b37      	ldr	r3, [pc, #220]	@ (8001d4c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	623b      	str	r3, [r7, #32]
		r.cycleBeginDelay = tocControlStep - ticControlStep
 8001c74:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	1ad3      	subs	r3, r2, r3
				- (k_controller * Ts * 1000);
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc48 	bl	8000514 <__aeabi_ui2d>
 8001c84:	4604      	mov	r4, r0
 8001c86:	460d      	mov	r5, r1
 8001c88:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc41 	bl	8000514 <__aeabi_ui2d>
 8001c92:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fcb6 	bl	8000608 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001caa:	f7fe fcad 	bl	8000608 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe faef 	bl	8000298 <__aeabi_dsub>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
		r.cycleBeginDelay = tocControlStep - ticControlStep
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe ff79 	bl	8000bb8 <__aeabi_d2uiz>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
		r.currentTimestamp = HAL_GetTick();
 8001cca:	f000 fb05 	bl	80022d8 <HAL_GetTick>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (samplingPrescalerCounter == (samplingPrescaler - 1)) {
 8001cd2:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	1e5a      	subs	r2, r3, #1
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d58 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d109      	bne.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x298>
			cb_push_back(&myBuff, &r);
 8001ce0:	f107 0308 	add.w	r3, r7, #8
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481d      	ldr	r0, [pc, #116]	@ (8001d5c <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001ce8:	f7ff f936 	bl	8000f58 <cb_push_back>
			samplingPrescalerCounter = -1;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001cee:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf2:	601a      	str	r2, [r3, #0]
		}
		samplingPrescalerCounter++;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	@ (8001d58 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	4a17      	ldr	r2, [pc, #92]	@ (8001d58 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001cfc:	6013      	str	r3, [r2, #0]
	}
}
 8001cfe:	bf00      	nop
 8001d00:	3758      	adds	r7, #88	@ 0x58
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bdb0      	pop	{r4, r5, r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200002cc 	.word	0x200002cc
 8001d0c:	20000040 	.word	0x20000040
 8001d10:	20000388 	.word	0x20000388
 8001d14:	2000038c 	.word	0x2000038c
 8001d18:	2000023c 	.word	0x2000023c
 8001d1c:	20000380 	.word	0x20000380
 8001d20:	20000378 	.word	0x20000378
 8001d24:	20000018 	.word	0x20000018
 8001d28:	200003b0 	.word	0x200003b0
 8001d2c:	200003a0 	.word	0x200003a0
 8001d30:	20000000 	.word	0x20000000
 8001d34:	200003a8 	.word	0x200003a8
 8001d38:	200003b8 	.word	0x200003b8
 8001d3c:	20000398 	.word	0x20000398
 8001d40:	40280000 	.word	0x40280000
 8001d44:	c0280000 	.word	0xc0280000
 8001d48:	40590000 	.word	0x40590000
 8001d4c:	20000390 	.word	0x20000390
 8001d50:	408f4000 	.word	0x408f4000
 8001d54:	20000044 	.word	0x20000044
 8001d58:	200003c0 	.word	0x200003c0
 8001d5c:	20000358 	.word	0x20000358

08001d60 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d64:	b672      	cpsid	i
}
 8001d66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <Error_Handler+0x8>

08001d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	@ (8001e40 <HAL_TIM_Encoder_MspInit+0x84>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d12c      	bne.n	8001e38 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <HAL_TIM_Encoder_MspInit+0x88>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <HAL_TIM_Encoder_MspInit+0x88>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_TIM_Encoder_MspInit+0x88>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a10      	ldr	r2, [pc, #64]	@ (8001e44 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e34:	f000 fb92 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	@ 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020000 	.word	0x40020000

08001e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a18      	ldr	r2, [pc, #96]	@ (8001ebc <HAL_TIM_Base_MspInit+0x70>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x74>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	4a16      	ldr	r2, [pc, #88]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x74>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x74>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e7a:	e01a      	b.n	8001eb2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a10      	ldr	r2, [pc, #64]	@ (8001ec4 <HAL_TIM_Base_MspInit+0x78>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d115      	bne.n	8001eb2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x74>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x74>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <HAL_TIM_Base_MspInit+0x74>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	201e      	movs	r0, #30
 8001ea8:	f000 fb21 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eac:	201e      	movs	r0, #30
 8001eae:	f000 fb3a 	bl	8002526 <HAL_NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40000800 	.word	0x40000800

08001ec8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <HAL_TIM_MspPostInit+0x68>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d11d      	bne.n	8001f26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <HAL_TIM_MspPostInit+0x6c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a10      	ldr	r2, [pc, #64]	@ (8001f34 <HAL_TIM_MspPostInit+0x6c>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <HAL_TIM_MspPostInit+0x6c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f06:	2330      	movs	r3, #48	@ 0x30
 8001f08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <HAL_TIM_MspPostInit+0x70>)
 8001f22:	f000 fb1b 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f26:	bf00      	nop
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40000400 	.word	0x40000400
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020400 	.word	0x40020400

08001f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	@ 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a19      	ldr	r2, [pc, #100]	@ (8001fc0 <HAL_UART_MspInit+0x84>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d12b      	bne.n	8001fb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	4a17      	ldr	r2, [pc, #92]	@ (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a10      	ldr	r2, [pc, #64]	@ (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <HAL_UART_MspInit+0x88>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f96:	230c      	movs	r3, #12
 8001f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4805      	ldr	r0, [pc, #20]	@ (8001fc8 <HAL_UART_MspInit+0x8c>)
 8001fb2:	f000 fad3 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	@ 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40004400 	.word	0x40004400
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020000 	.word	0x40020000

08001fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <NMI_Handler+0x4>

08001fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <HardFault_Handler+0x4>

08001fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <MemManage_Handler+0x4>

08001fe4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <BusFault_Handler+0x4>

08001fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <UsageFault_Handler+0x4>

08001ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002022:	f000 f945 	bl	80022b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002030:	4802      	ldr	r0, [pc, #8]	@ (800203c <TIM4_IRQHandler+0x10>)
 8002032:	f001 fb45 	bl	80036c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200002cc 	.word	0x200002cc

08002040 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
	return 1;
 8002044:	2301      	movs	r3, #1
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_kill>:

int _kill(int pid, int sig)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800205a:	f003 fbb9 	bl	80057d0 <__errno>
 800205e:	4603      	mov	r3, r0
 8002060:	2216      	movs	r2, #22
 8002062:	601a      	str	r2, [r3, #0]
	return -1;
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_exit>:

void _exit (int status)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ffe7 	bl	8002050 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002082:	bf00      	nop
 8002084:	e7fd      	b.n	8002082 <_exit+0x12>

08002086 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e00a      	b.n	80020ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002098:	f3af 8000 	nop.w
 800209c:	4601      	mov	r1, r0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	60ba      	str	r2, [r7, #8]
 80020a4:	b2ca      	uxtb	r2, r1
 80020a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	3301      	adds	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	dbf0      	blt.n	8002098 <_read+0x12>
	}

return len;
 80020b6:	687b      	ldr	r3, [r7, #4]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	return -1;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e8:	605a      	str	r2, [r3, #4]
	return 0;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <_isatty>:

int _isatty(int file)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	return 1;
 8002100:	2301      	movs	r3, #1
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
	return 0;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002130:	4a14      	ldr	r2, [pc, #80]	@ (8002184 <_sbrk+0x5c>)
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <_sbrk+0x60>)
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800213c:	4b13      	ldr	r3, [pc, #76]	@ (800218c <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002144:	4b11      	ldr	r3, [pc, #68]	@ (800218c <_sbrk+0x64>)
 8002146:	4a12      	ldr	r2, [pc, #72]	@ (8002190 <_sbrk+0x68>)
 8002148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214a:	4b10      	ldr	r3, [pc, #64]	@ (800218c <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	429a      	cmp	r2, r3
 8002156:	d207      	bcs.n	8002168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002158:	f003 fb3a 	bl	80057d0 <__errno>
 800215c:	4603      	mov	r3, r0
 800215e:	220c      	movs	r2, #12
 8002160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	e009      	b.n	800217c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216e:	4b07      	ldr	r3, [pc, #28]	@ (800218c <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	4a05      	ldr	r2, [pc, #20]	@ (800218c <_sbrk+0x64>)
 8002178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800217a:	68fb      	ldr	r3, [r7, #12]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20018000 	.word	0x20018000
 8002188:	00000400 	.word	0x00000400
 800218c:	200003c4 	.word	0x200003c4
 8002190:	20000518 	.word	0x20000518

08002194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <SystemInit+0x20>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219e:	4a05      	ldr	r2, [pc, #20]	@ (80021b4 <SystemInit+0x20>)
 80021a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021bc:	480d      	ldr	r0, [pc, #52]	@ (80021f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021be:	490e      	ldr	r1, [pc, #56]	@ (80021f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021c0:	4a0e      	ldr	r2, [pc, #56]	@ (80021fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c4:	e002      	b.n	80021cc <LoopCopyDataInit>

080021c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ca:	3304      	adds	r3, #4

080021cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d0:	d3f9      	bcc.n	80021c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002200 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021d4:	4c0b      	ldr	r4, [pc, #44]	@ (8002204 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d8:	e001      	b.n	80021de <LoopFillZerobss>

080021da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021dc:	3204      	adds	r2, #4

080021de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e0:	d3fb      	bcc.n	80021da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021e2:	f7ff ffd7 	bl	8002194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021e6:	f003 faf9 	bl	80057dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ea:	f7ff f98d 	bl	8001508 <main>
  bx  lr    
 80021ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f8:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80021fc:	08007b38 	.word	0x08007b38
  ldr r2, =_sbss
 8002200:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002204:	20000518 	.word	0x20000518

08002208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002208:	e7fe      	b.n	8002208 <ADC_IRQHandler>
	...

0800220c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002210:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <HAL_Init+0x40>)
 8002216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800221a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800221c:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <HAL_Init+0x40>)
 8002222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a07      	ldr	r2, [pc, #28]	@ (800224c <HAL_Init+0x40>)
 800222e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f000 f94f 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223a:	200f      	movs	r0, #15
 800223c:	f000 f808 	bl	8002250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002240:	f7ff fd94 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023c00 	.word	0x40023c00

08002250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <HAL_InitTick+0x54>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <HAL_InitTick+0x58>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f967 	bl	8002542 <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e00e      	b.n	800229c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d80a      	bhi.n	800229a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f000 f92f 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4a06      	ldr	r2, [pc, #24]	@ (80022ac <HAL_InitTick+0x5c>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000048 	.word	0x20000048
 80022a8:	20000050 	.word	0x20000050
 80022ac:	2000004c 	.word	0x2000004c

080022b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_IncTick+0x20>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_IncTick+0x24>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <HAL_IncTick+0x24>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000050 	.word	0x20000050
 80022d4:	200003c8 	.word	0x200003c8

080022d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return uwTick;
 80022dc:	4b03      	ldr	r3, [pc, #12]	@ (80022ec <HAL_GetTick+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	200003c8 	.word	0x200003c8

080022f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff ffee 	bl	80022d8 <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d005      	beq.n	8002316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <HAL_Delay+0x44>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002316:	bf00      	nop
 8002318:	f7ff ffde 	bl	80022d8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f7      	bhi.n	8002318 <HAL_Delay+0x28>
  {
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000050 	.word	0x20000050

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	@ (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	@ (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	@ (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	@ 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff29 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff3e 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff8e 	bl	800242c <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff31 	bl	800239c <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa2 	bl	8002494 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	@ 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	e159      	b.n	800282c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	f040 8148 	bne.w	8002826 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d005      	beq.n	80025ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d130      	bne.n	8002610 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	2203      	movs	r2, #3
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e4:	2201      	movs	r2, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 0201 	and.w	r2, r3, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b03      	cmp	r3, #3
 800261a:	d017      	beq.n	800264c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d123      	bne.n	80026a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	08da      	lsrs	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3208      	adds	r2, #8
 8002660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	220f      	movs	r2, #15
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	08da      	lsrs	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3208      	adds	r2, #8
 800269a:	69b9      	ldr	r1, [r7, #24]
 800269c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0203 	and.w	r2, r3, #3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80a2 	beq.w	8002826 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b57      	ldr	r3, [pc, #348]	@ (8002844 <HAL_GPIO_Init+0x2e8>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	4a56      	ldr	r2, [pc, #344]	@ (8002844 <HAL_GPIO_Init+0x2e8>)
 80026ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f2:	4b54      	ldr	r3, [pc, #336]	@ (8002844 <HAL_GPIO_Init+0x2e8>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fe:	4a52      	ldr	r2, [pc, #328]	@ (8002848 <HAL_GPIO_Init+0x2ec>)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	220f      	movs	r2, #15
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a49      	ldr	r2, [pc, #292]	@ (800284c <HAL_GPIO_Init+0x2f0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x202>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a48      	ldr	r2, [pc, #288]	@ (8002850 <HAL_GPIO_Init+0x2f4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x1fe>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a47      	ldr	r2, [pc, #284]	@ (8002854 <HAL_GPIO_Init+0x2f8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x1fa>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a46      	ldr	r2, [pc, #280]	@ (8002858 <HAL_GPIO_Init+0x2fc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x1f6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a45      	ldr	r2, [pc, #276]	@ (800285c <HAL_GPIO_Init+0x300>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x1f2>
 800274a:	2304      	movs	r3, #4
 800274c:	e008      	b.n	8002760 <HAL_GPIO_Init+0x204>
 800274e:	2307      	movs	r3, #7
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x204>
 8002752:	2303      	movs	r3, #3
 8002754:	e004      	b.n	8002760 <HAL_GPIO_Init+0x204>
 8002756:	2302      	movs	r3, #2
 8002758:	e002      	b.n	8002760 <HAL_GPIO_Init+0x204>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_GPIO_Init+0x204>
 800275e:	2300      	movs	r3, #0
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	f002 0203 	and.w	r2, r2, #3
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	4093      	lsls	r3, r2
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002770:	4935      	ldr	r1, [pc, #212]	@ (8002848 <HAL_GPIO_Init+0x2ec>)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277e:	4b38      	ldr	r3, [pc, #224]	@ (8002860 <HAL_GPIO_Init+0x304>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027cc:	4a24      	ldr	r2, [pc, #144]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027d2:	4b23      	ldr	r3, [pc, #140]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027fc:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002820:	4a0f      	ldr	r2, [pc, #60]	@ (8002860 <HAL_GPIO_Init+0x304>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3301      	adds	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b0f      	cmp	r3, #15
 8002830:	f67f aea2 	bls.w	8002578 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3724      	adds	r7, #36	@ 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40013800 	.word	0x40013800
 800284c:	40020000 	.word	0x40020000
 8002850:	40020400 	.word	0x40020400
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00
 800285c:	40021000 	.word	0x40021000
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e267      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d075      	beq.n	80029a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b6:	4b88      	ldr	r3, [pc, #544]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d00c      	beq.n	80028dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b85      	ldr	r3, [pc, #532]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d112      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ce:	4b82      	ldr	r3, [pc, #520]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028da:	d10b      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4b7e      	ldr	r3, [pc, #504]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05b      	beq.n	80029a0 <HAL_RCC_OscConfig+0x108>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d157      	bne.n	80029a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e242      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x74>
 80028fe:	4b76      	ldr	r3, [pc, #472]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a75      	ldr	r2, [pc, #468]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b70      	ldr	r3, [pc, #448]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6f      	ldr	r2, [pc, #444]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b6d      	ldr	r3, [pc, #436]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6c      	ldr	r2, [pc, #432]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 8002930:	4b69      	ldr	r3, [pc, #420]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a68      	ldr	r2, [pc, #416]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b66      	ldr	r3, [pc, #408]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a65      	ldr	r2, [pc, #404]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7ff fcc2 	bl	80022d8 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002958:	f7ff fcbe 	bl	80022d8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	@ 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e207      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xc0>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7ff fcae 	bl	80022d8 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff fcaa 	bl	80022d8 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	@ 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1f3      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b51      	ldr	r3, [pc, #324]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0xe8>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d063      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ae:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b47      	ldr	r3, [pc, #284]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c6:	4b44      	ldr	r3, [pc, #272]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1c7      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4937      	ldr	r1, [pc, #220]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e03a      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b34      	ldr	r3, [pc, #208]	@ (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7ff fc63 	bl	80022d8 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a16:	f7ff fc5f 	bl	80022d8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1a8      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4925      	ldr	r1, [pc, #148]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b24      	ldr	r3, [pc, #144]	@ (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7ff fc42 	bl	80022d8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7ff fc3e 	bl	80022d8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e187      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d036      	beq.n	8002af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7ff fc22 	bl	80022d8 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a98:	f7ff fc1e 	bl	80022d8 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e167      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x200>
 8002ab6:	e01b      	b.n	8002af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab8:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7ff fc0b 	bl	80022d8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	e00e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7ff fc07 	bl	80022d8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d907      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e150      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	42470000 	.word	0x42470000
 8002ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	4b88      	ldr	r3, [pc, #544]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ea      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8097 	beq.w	8002c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b81      	ldr	r3, [pc, #516]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b7d      	ldr	r3, [pc, #500]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	4a7c      	ldr	r2, [pc, #496]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b77      	ldr	r3, [pc, #476]	@ (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4b74      	ldr	r3, [pc, #464]	@ (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a73      	ldr	r2, [pc, #460]	@ (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7ff fbc7 	bl	80022d8 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4e:	f7ff fbc3 	bl	80022d8 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e10c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	4b6a      	ldr	r3, [pc, #424]	@ (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2ea>
 8002b74:	4b64      	ldr	r3, [pc, #400]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b78:	4a63      	ldr	r2, [pc, #396]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b80:	e01c      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x30c>
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b96:	4b5c      	ldr	r3, [pc, #368]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002ba4:	4b58      	ldr	r3, [pc, #352]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba8:	4a57      	ldr	r2, [pc, #348]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb0:	4b55      	ldr	r3, [pc, #340]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb4:	4a54      	ldr	r2, [pc, #336]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f023 0304 	bic.w	r3, r3, #4
 8002bba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7ff fb88 	bl	80022d8 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7ff fb84 	bl	80022d8 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0cb      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	4b49      	ldr	r3, [pc, #292]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ee      	beq.n	8002bcc <HAL_RCC_OscConfig+0x334>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7ff fb72 	bl	80022d8 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7ff fb6e 	bl	80022d8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0b5      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ee      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b39      	ldr	r3, [pc, #228]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	4a38      	ldr	r2, [pc, #224]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a1 	beq.w	8002d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c36:	4b34      	ldr	r3, [pc, #208]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d05c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d141      	bne.n	8002cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b31      	ldr	r3, [pc, #196]	@ (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff fb42 	bl	80022d8 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7ff fb3e 	bl	80022d8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e087      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	491b      	ldr	r1, [pc, #108]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7ff fb17 	bl	80022d8 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7ff fb13 	bl	80022d8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e05c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x416>
 8002ccc:	e054      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7ff fb00 	bl	80022d8 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7ff fafc 	bl	80022d8 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e045      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x444>
 8002cfa:	e03d      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e038      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_RCC_OscConfig+0x4ec>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d028      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d121      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d11a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d111      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0cc      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b68      	ldr	r3, [pc, #416]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d90c      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b65      	ldr	r3, [pc, #404]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a58      	ldr	r2, [pc, #352]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a52      	ldr	r2, [pc, #328]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d044      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b3f      	ldr	r3, [pc, #252]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3b      	ldr	r3, [pc, #236]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e067      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b37      	ldr	r3, [pc, #220]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4934      	ldr	r1, [pc, #208]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7ff fa2e 	bl	80022d8 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7ff fa2a 	bl	80022d8 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e04f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2b      	ldr	r3, [pc, #172]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b25      	ldr	r3, [pc, #148]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d20c      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	@ (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efa:	4b12      	ldr	r3, [pc, #72]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f821 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	490a      	ldr	r1, [pc, #40]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	5ccb      	ldrb	r3, [r1, r3]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	@ (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f98e 	bl	8002250 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	08007790 	.word	0x08007790
 8002f4c:	20000048 	.word	0x20000048
 8002f50:	2000004c 	.word	0x2000004c

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b090      	sub	sp, #64	@ 0x40
 8002f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f60:	2300      	movs	r3, #0
 8002f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f64:	2300      	movs	r3, #0
 8002f66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f6c:	4b59      	ldr	r3, [pc, #356]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d00d      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x40>
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	f200 80a1 	bhi.w	80030c0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x34>
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f86:	e09b      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b53      	ldr	r3, [pc, #332]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002f8c:	e09b      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8e:	4b53      	ldr	r3, [pc, #332]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002f90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f92:	e098      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f94:	4b4f      	ldr	r3, [pc, #316]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9e:	4b4d      	ldr	r3, [pc, #308]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d028      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002faa:	4b4a      	ldr	r3, [pc, #296]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	623b      	str	r3, [r7, #32]
 8002fb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4b47      	ldr	r3, [pc, #284]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fc0:	fb03 f201 	mul.w	r2, r3, r1
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	fb00 f303 	mul.w	r3, r0, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	4a43      	ldr	r2, [pc, #268]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002fce:	fba0 1202 	umull	r1, r2, r0, r2
 8002fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fd4:	460a      	mov	r2, r1
 8002fd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fda:	4413      	add	r3, r2
 8002fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	61fa      	str	r2, [r7, #28]
 8002fe6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002fee:	f7fd fe03 	bl	8000bf8 <__aeabi_uldivmod>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ffa:	e053      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffc:	4b35      	ldr	r3, [pc, #212]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	2200      	movs	r2, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	617a      	str	r2, [r7, #20]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800300e:	f04f 0b00 	mov.w	fp, #0
 8003012:	4652      	mov	r2, sl
 8003014:	465b      	mov	r3, fp
 8003016:	f04f 0000 	mov.w	r0, #0
 800301a:	f04f 0100 	mov.w	r1, #0
 800301e:	0159      	lsls	r1, r3, #5
 8003020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003024:	0150      	lsls	r0, r2, #5
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	ebb2 080a 	subs.w	r8, r2, sl
 800302e:	eb63 090b 	sbc.w	r9, r3, fp
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800303e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003042:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003046:	ebb2 0408 	subs.w	r4, r2, r8
 800304a:	eb63 0509 	sbc.w	r5, r3, r9
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	00eb      	lsls	r3, r5, #3
 8003058:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800305c:	00e2      	lsls	r2, r4, #3
 800305e:	4614      	mov	r4, r2
 8003060:	461d      	mov	r5, r3
 8003062:	eb14 030a 	adds.w	r3, r4, sl
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	eb45 030b 	adc.w	r3, r5, fp
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800307a:	4629      	mov	r1, r5
 800307c:	028b      	lsls	r3, r1, #10
 800307e:	4621      	mov	r1, r4
 8003080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003084:	4621      	mov	r1, r4
 8003086:	028a      	lsls	r2, r1, #10
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800308e:	2200      	movs	r2, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	60fa      	str	r2, [r7, #12]
 8003094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003098:	f7fd fdae 	bl	8000bf8 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4613      	mov	r3, r2
 80030a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030a4:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	3301      	adds	r3, #1
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80030b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030be:	e002      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80030c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3740      	adds	r7, #64	@ 0x40
 80030cc:	46bd      	mov	sp, r7
 80030ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	00f42400 	.word	0x00f42400
 80030dc:	017d7840 	.word	0x017d7840

080030e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e4:	4b03      	ldr	r3, [pc, #12]	@ (80030f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000048 	.word	0x20000048

080030f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030fc:	f7ff fff0 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	0a9b      	lsrs	r3, r3, #10
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4903      	ldr	r1, [pc, #12]	@ (800311c <HAL_RCC_GetPCLK1Freq+0x24>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40023800 	.word	0x40023800
 800311c:	080077a0 	.word	0x080077a0

08003120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003124:	f7ff ffdc 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8003128:	4602      	mov	r2, r0
 800312a:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	0b5b      	lsrs	r3, r3, #13
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	4903      	ldr	r1, [pc, #12]	@ (8003144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003136:	5ccb      	ldrb	r3, [r1, r3]
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800313c:	4618      	mov	r0, r3
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40023800 	.word	0x40023800
 8003144:	080077a0 	.word	0x080077a0

08003148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e041      	b.n	80031de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fe fe6c 	bl	8001e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f000 fd54 	bl	8003c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e03c      	b.n	800327a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1e      	ldr	r2, [pc, #120]	@ (8003288 <HAL_TIM_Base_Start+0xa0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d018      	beq.n	8003244 <HAL_TIM_Base_Start+0x5c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800321a:	d013      	beq.n	8003244 <HAL_TIM_Base_Start+0x5c>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1a      	ldr	r2, [pc, #104]	@ (800328c <HAL_TIM_Base_Start+0xa4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00e      	beq.n	8003244 <HAL_TIM_Base_Start+0x5c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a19      	ldr	r2, [pc, #100]	@ (8003290 <HAL_TIM_Base_Start+0xa8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d009      	beq.n	8003244 <HAL_TIM_Base_Start+0x5c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a17      	ldr	r2, [pc, #92]	@ (8003294 <HAL_TIM_Base_Start+0xac>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_TIM_Base_Start+0x5c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a16      	ldr	r2, [pc, #88]	@ (8003298 <HAL_TIM_Base_Start+0xb0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d111      	bne.n	8003268 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b06      	cmp	r3, #6
 8003254:	d010      	beq.n	8003278 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003266:	e007      	b.n	8003278 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40010000 	.word	0x40010000
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800
 8003294:	40000c00 	.word	0x40000c00
 8003298:	40014000 	.word	0x40014000

0800329c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d001      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e044      	b.n	800333e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <HAL_TIM_Base_Start_IT+0xb0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d018      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x6c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032de:	d013      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x6c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003350 <HAL_TIM_Base_Start_IT+0xb4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00e      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x6c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a19      	ldr	r2, [pc, #100]	@ (8003354 <HAL_TIM_Base_Start_IT+0xb8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d009      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x6c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a17      	ldr	r2, [pc, #92]	@ (8003358 <HAL_TIM_Base_Start_IT+0xbc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x6c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a16      	ldr	r2, [pc, #88]	@ (800335c <HAL_TIM_Base_Start_IT+0xc0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d111      	bne.n	800332c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b06      	cmp	r3, #6
 8003318:	d010      	beq.n	800333c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332a:	e007      	b.n	800333c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40014000 	.word	0x40014000

08003360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e041      	b.n	80033f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f839 	bl	80033fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3304      	adds	r3, #4
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f000 fc48 	bl	8003c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_TIM_PWM_Start+0x24>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e022      	b.n	800347e <HAL_TIM_PWM_Start+0x6a>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b04      	cmp	r3, #4
 800343c:	d109      	bne.n	8003452 <HAL_TIM_PWM_Start+0x3e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	e015      	b.n	800347e <HAL_TIM_PWM_Start+0x6a>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d109      	bne.n	800346c <HAL_TIM_PWM_Start+0x58>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e008      	b.n	800347e <HAL_TIM_PWM_Start+0x6a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e068      	b.n	8003558 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <HAL_TIM_PWM_Start+0x82>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003494:	e013      	b.n	80034be <HAL_TIM_PWM_Start+0xaa>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d104      	bne.n	80034a6 <HAL_TIM_PWM_Start+0x92>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a4:	e00b      	b.n	80034be <HAL_TIM_PWM_Start+0xaa>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_PWM_Start+0xa2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b4:	e003      	b.n	80034be <HAL_TIM_PWM_Start+0xaa>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2201      	movs	r2, #1
 80034c4:	6839      	ldr	r1, [r7, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fe5a 	bl	8004180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a23      	ldr	r2, [pc, #140]	@ (8003560 <HAL_TIM_PWM_Start+0x14c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d107      	bne.n	80034e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003560 <HAL_TIM_PWM_Start+0x14c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d018      	beq.n	8003522 <HAL_TIM_PWM_Start+0x10e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f8:	d013      	beq.n	8003522 <HAL_TIM_PWM_Start+0x10e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a19      	ldr	r2, [pc, #100]	@ (8003564 <HAL_TIM_PWM_Start+0x150>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00e      	beq.n	8003522 <HAL_TIM_PWM_Start+0x10e>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a17      	ldr	r2, [pc, #92]	@ (8003568 <HAL_TIM_PWM_Start+0x154>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_TIM_PWM_Start+0x10e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a16      	ldr	r2, [pc, #88]	@ (800356c <HAL_TIM_PWM_Start+0x158>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_TIM_PWM_Start+0x10e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a14      	ldr	r2, [pc, #80]	@ (8003570 <HAL_TIM_PWM_Start+0x15c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d111      	bne.n	8003546 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b06      	cmp	r3, #6
 8003532:	d010      	beq.n	8003556 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003544:	e007      	b.n	8003556 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40010000 	.word	0x40010000
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800
 800356c:	40000c00 	.word	0x40000c00
 8003570:	40014000 	.word	0x40014000

08003574 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e097      	b.n	80036b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7fe fc0d 	bl	8001dbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035b8:	f023 0307 	bic.w	r3, r3, #7
 80035bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3304      	adds	r3, #4
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f000 fb33 	bl	8003c34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f6:	f023 0303 	bic.w	r3, r3, #3
 80035fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	4313      	orrs	r3, r2
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003614:	f023 030c 	bic.w	r3, r3, #12
 8003618:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003620:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	4313      	orrs	r3, r2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	011a      	lsls	r2, r3, #4
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	031b      	lsls	r3, r3, #12
 8003644:	4313      	orrs	r3, r2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003652:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800365a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	4313      	orrs	r3, r2
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0202 	mvn.w	r2, #2
 80036ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fa77 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fa69 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fa7a 	bl	8003c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b04      	cmp	r3, #4
 8003728:	d122      	bne.n	8003770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b04      	cmp	r3, #4
 8003736:	d11b      	bne.n	8003770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0204 	mvn.w	r2, #4
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2202      	movs	r2, #2
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fa4d 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fa3f 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fa50 	bl	8003c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b08      	cmp	r3, #8
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b08      	cmp	r3, #8
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0208 	mvn.w	r2, #8
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fa23 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa15 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fa26 	bl	8003c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0210 	mvn.w	r2, #16
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2208      	movs	r2, #8
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9f9 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9eb 	bl	8003be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9fc 	bl	8003c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0201 	mvn.w	r2, #1
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe f90c 	bl	8001a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384e:	2b80      	cmp	r3, #128	@ 0x80
 8003850:	d10e      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385c:	2b80      	cmp	r3, #128	@ 0x80
 800385e:	d107      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fd26 	bl	80042bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387a:	2b40      	cmp	r3, #64	@ 0x40
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003888:	2b40      	cmp	r3, #64	@ 0x40
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9c1 	bl	8003c1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d10e      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d107      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0220 	mvn.w	r2, #32
 80038c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fcf0 	bl	80042a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0ae      	b.n	8003a4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	f200 809f 	bhi.w	8003a3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003939 	.word	0x08003939
 8003908:	08003a3d 	.word	0x08003a3d
 800390c:	08003a3d 	.word	0x08003a3d
 8003910:	08003a3d 	.word	0x08003a3d
 8003914:	08003979 	.word	0x08003979
 8003918:	08003a3d 	.word	0x08003a3d
 800391c:	08003a3d 	.word	0x08003a3d
 8003920:	08003a3d 	.word	0x08003a3d
 8003924:	080039bb 	.word	0x080039bb
 8003928:	08003a3d 	.word	0x08003a3d
 800392c:	08003a3d 	.word	0x08003a3d
 8003930:	08003a3d 	.word	0x08003a3d
 8003934:	080039fb 	.word	0x080039fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f9f8 	bl	8003d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0208 	orr.w	r2, r2, #8
 8003952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0204 	bic.w	r2, r2, #4
 8003962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6999      	ldr	r1, [r3, #24]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	619a      	str	r2, [r3, #24]
      break;
 8003976:	e064      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fa3e 	bl	8003e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6999      	ldr	r1, [r3, #24]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	021a      	lsls	r2, r3, #8
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	619a      	str	r2, [r3, #24]
      break;
 80039b8:	e043      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fa89 	bl	8003ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0208 	orr.w	r2, r2, #8
 80039d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0204 	bic.w	r2, r2, #4
 80039e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69d9      	ldr	r1, [r3, #28]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	61da      	str	r2, [r3, #28]
      break;
 80039f8:	e023      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fad3 	bl	8003fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69d9      	ldr	r1, [r3, #28]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	021a      	lsls	r2, r3, #8
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	61da      	str	r2, [r3, #28]
      break;
 8003a3a:	e002      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIM_ConfigClockSource+0x1c>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e0b4      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x186>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aa8:	d03e      	beq.n	8003b28 <HAL_TIM_ConfigClockSource+0xd4>
 8003aaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aae:	f200 8087 	bhi.w	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab6:	f000 8086 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x172>
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003abe:	d87f      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b70      	cmp	r3, #112	@ 0x70
 8003ac2:	d01a      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0xa6>
 8003ac4:	2b70      	cmp	r3, #112	@ 0x70
 8003ac6:	d87b      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b60      	cmp	r3, #96	@ 0x60
 8003aca:	d050      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x11a>
 8003acc:	2b60      	cmp	r3, #96	@ 0x60
 8003ace:	d877      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b50      	cmp	r3, #80	@ 0x50
 8003ad2:	d03c      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xfa>
 8003ad4:	2b50      	cmp	r3, #80	@ 0x50
 8003ad6:	d873      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b40      	cmp	r3, #64	@ 0x40
 8003ada:	d058      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x13a>
 8003adc:	2b40      	cmp	r3, #64	@ 0x40
 8003ade:	d86f      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b30      	cmp	r3, #48	@ 0x30
 8003ae2:	d064      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003ae4:	2b30      	cmp	r3, #48	@ 0x30
 8003ae6:	d86b      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d060      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d867      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d05c      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d05a      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003af8:	e062      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6899      	ldr	r1, [r3, #8]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f000 fb19 	bl	8004140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	609a      	str	r2, [r3, #8]
      break;
 8003b26:	e04f      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6899      	ldr	r1, [r3, #8]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f000 fb02 	bl	8004140 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b4a:	609a      	str	r2, [r3, #8]
      break;
 8003b4c:	e03c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f000 fa76 	bl	800404c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2150      	movs	r1, #80	@ 0x50
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 facf 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003b6c:	e02c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 fa95 	bl	80040aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2160      	movs	r1, #96	@ 0x60
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fabf 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e01c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f000 fa56 	bl	800404c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2140      	movs	r1, #64	@ 0x40
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 faaf 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003bac:	e00c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f000 faa6 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003bbe:	e003      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc4:	e000      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a34      	ldr	r2, [pc, #208]	@ (8003d18 <TIM_Base_SetConfig+0xe4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00f      	beq.n	8003c6c <TIM_Base_SetConfig+0x38>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c52:	d00b      	beq.n	8003c6c <TIM_Base_SetConfig+0x38>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a31      	ldr	r2, [pc, #196]	@ (8003d1c <TIM_Base_SetConfig+0xe8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <TIM_Base_SetConfig+0x38>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a30      	ldr	r2, [pc, #192]	@ (8003d20 <TIM_Base_SetConfig+0xec>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0x38>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a2f      	ldr	r2, [pc, #188]	@ (8003d24 <TIM_Base_SetConfig+0xf0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a25      	ldr	r2, [pc, #148]	@ (8003d18 <TIM_Base_SetConfig+0xe4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01b      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8c:	d017      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a22      	ldr	r2, [pc, #136]	@ (8003d1c <TIM_Base_SetConfig+0xe8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a21      	ldr	r2, [pc, #132]	@ (8003d20 <TIM_Base_SetConfig+0xec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00f      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a20      	ldr	r2, [pc, #128]	@ (8003d24 <TIM_Base_SetConfig+0xf0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d28 <TIM_Base_SetConfig+0xf4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d2c <TIM_Base_SetConfig+0xf8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0x8a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <TIM_Base_SetConfig+0xfc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d108      	bne.n	8003cd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a08      	ldr	r2, [pc, #32]	@ (8003d18 <TIM_Base_SetConfig+0xe4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d103      	bne.n	8003d04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	615a      	str	r2, [r3, #20]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40014400 	.word	0x40014400
 8003d30:	40014800 	.word	0x40014800

08003d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 0302 	bic.w	r3, r3, #2
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dfc <TIM_OC1_SetConfig+0xc8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d10c      	bne.n	8003daa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0308 	bic.w	r3, r3, #8
 8003d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a13      	ldr	r2, [pc, #76]	@ (8003dfc <TIM_OC1_SetConfig+0xc8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	621a      	str	r2, [r3, #32]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40010000 	.word	0x40010000

08003e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f023 0210 	bic.w	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0320 	bic.w	r3, r3, #32
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed4 <TIM_OC2_SetConfig+0xd4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10d      	bne.n	8003e7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a15      	ldr	r2, [pc, #84]	@ (8003ed4 <TIM_OC2_SetConfig+0xd4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d113      	bne.n	8003eac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40010000 	.word	0x40010000

08003ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0303 	bic.w	r3, r3, #3
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa8 <TIM_OC3_SetConfig+0xd0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10d      	bne.n	8003f52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a14      	ldr	r2, [pc, #80]	@ (8003fa8 <TIM_OC3_SetConfig+0xd0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d113      	bne.n	8003f82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40010000 	.word	0x40010000

08003fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a10      	ldr	r2, [pc, #64]	@ (8004048 <TIM_OC4_SetConfig+0x9c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d109      	bne.n	8004020 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	019b      	lsls	r3, r3, #6
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40010000 	.word	0x40010000

0800404c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0201 	bic.w	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f023 030a 	bic.w	r3, r3, #10
 8004088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b087      	sub	sp, #28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0210 	bic.w	r2, r3, #16
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	031b      	lsls	r3, r3, #12
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	f043 0307 	orr.w	r3, r3, #7
 800412c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	609a      	str	r2, [r3, #8]
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800415a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	021a      	lsls	r2, r3, #8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	431a      	orrs	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4313      	orrs	r3, r2
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	609a      	str	r2, [r3, #8]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2201      	movs	r2, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a1a      	ldr	r2, [r3, #32]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	401a      	ands	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1a      	ldr	r2, [r3, #32]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	fa01 f303 	lsl.w	r3, r1, r3
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e050      	b.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1c      	ldr	r2, [pc, #112]	@ (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d018      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004230:	d013      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a18      	ldr	r2, [pc, #96]	@ (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a16      	ldr	r2, [pc, #88]	@ (800429c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a15      	ldr	r2, [pc, #84]	@ (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a13      	ldr	r2, [pc, #76]	@ (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d10c      	bne.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	4313      	orrs	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40010000 	.word	0x40010000
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00
 80042a4:	40014000 	.word	0x40014000

080042a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e03f      	b.n	8004362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fd fe20 	bl	8001f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2224      	movs	r2, #36	@ 0x24
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f929 	bl	800456c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695a      	ldr	r2, [r3, #20]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b08a      	sub	sp, #40	@ 0x28
 800436e:	af02      	add	r7, sp, #8
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b20      	cmp	r3, #32
 8004388:	d17c      	bne.n	8004484 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_UART_Transmit+0x2c>
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e075      	b.n	8004486 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Transmit+0x3e>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e06e      	b.n	8004486 <HAL_UART_Transmit+0x11c>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2221      	movs	r2, #33	@ 0x21
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043be:	f7fd ff8b 	bl	80022d8 <HAL_GetTick>
 80043c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	88fa      	ldrh	r2, [r7, #6]
 80043c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	88fa      	ldrh	r2, [r7, #6]
 80043ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d8:	d108      	bne.n	80043ec <HAL_UART_Transmit+0x82>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d104      	bne.n	80043ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	e003      	b.n	80043f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80043fc:	e02a      	b.n	8004454 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	2180      	movs	r1, #128	@ 0x80
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f840 	bl	800448e <UART_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e036      	b.n	8004486 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800442c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	3302      	adds	r3, #2
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	e007      	b.n	8004446 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	781a      	ldrb	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	3301      	adds	r3, #1
 8004444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1cf      	bne.n	80043fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	2140      	movs	r1, #64	@ 0x40
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f810 	bl	800448e <UART_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e006      	b.n	8004486 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	e000      	b.n	8004486 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3720      	adds	r7, #32
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b090      	sub	sp, #64	@ 0x40
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	4613      	mov	r3, r2
 800449c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449e:	e050      	b.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d04c      	beq.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0x30>
 80044ae:	f7fd ff13 	bl	80022d8 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d241      	bcs.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80044d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044de:	637a      	str	r2, [r7, #52]	@ 0x34
 80044e0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80044ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e5      	bne.n	80044be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	613b      	str	r3, [r7, #16]
   return(result);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	63bb      	str	r3, [r7, #56]	@ 0x38
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004512:	623a      	str	r2, [r7, #32]
 8004514:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	69f9      	ldr	r1, [r7, #28]
 8004518:	6a3a      	ldr	r2, [r7, #32]
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e5      	bne.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e00f      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	429a      	cmp	r2, r3
 8004550:	bf0c      	ite	eq
 8004552:	2301      	moveq	r3, #1
 8004554:	2300      	movne	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	429a      	cmp	r2, r3
 800455e:	d09f      	beq.n	80044a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3740      	adds	r7, #64	@ 0x40
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800456c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004570:	b0c0      	sub	sp, #256	@ 0x100
 8004572:	af00      	add	r7, sp, #0
 8004574:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	68d9      	ldr	r1, [r3, #12]
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	ea40 0301 	orr.w	r3, r0, r1
 8004594:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045c4:	f021 010c 	bic.w	r1, r1, #12
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045d2:	430b      	orrs	r3, r1
 80045d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e6:	6999      	ldr	r1, [r3, #24]
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	ea40 0301 	orr.w	r3, r0, r1
 80045f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004838 <UART_SetConfig+0x2cc>)
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d005      	beq.n	800460c <UART_SetConfig+0xa0>
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4b8d      	ldr	r3, [pc, #564]	@ (800483c <UART_SetConfig+0x2d0>)
 8004608:	429a      	cmp	r2, r3
 800460a:	d104      	bne.n	8004616 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800460c:	f7fe fd88 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 8004610:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004614:	e003      	b.n	800461e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004616:	f7fe fd6f 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 800461a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004628:	f040 810c 	bne.w	8004844 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800462c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004630:	2200      	movs	r2, #0
 8004632:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004636:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800463a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800463e:	4622      	mov	r2, r4
 8004640:	462b      	mov	r3, r5
 8004642:	1891      	adds	r1, r2, r2
 8004644:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004646:	415b      	adcs	r3, r3
 8004648:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800464a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800464e:	4621      	mov	r1, r4
 8004650:	eb12 0801 	adds.w	r8, r2, r1
 8004654:	4629      	mov	r1, r5
 8004656:	eb43 0901 	adc.w	r9, r3, r1
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800466a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800466e:	4690      	mov	r8, r2
 8004670:	4699      	mov	r9, r3
 8004672:	4623      	mov	r3, r4
 8004674:	eb18 0303 	adds.w	r3, r8, r3
 8004678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800467c:	462b      	mov	r3, r5
 800467e:	eb49 0303 	adc.w	r3, r9, r3
 8004682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004692:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004696:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800469a:	460b      	mov	r3, r1
 800469c:	18db      	adds	r3, r3, r3
 800469e:	653b      	str	r3, [r7, #80]	@ 0x50
 80046a0:	4613      	mov	r3, r2
 80046a2:	eb42 0303 	adc.w	r3, r2, r3
 80046a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80046a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046b0:	f7fc faa2 	bl	8000bf8 <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4b61      	ldr	r3, [pc, #388]	@ (8004840 <UART_SetConfig+0x2d4>)
 80046ba:	fba3 2302 	umull	r2, r3, r3, r2
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	011c      	lsls	r4, r3, #4
 80046c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046d4:	4642      	mov	r2, r8
 80046d6:	464b      	mov	r3, r9
 80046d8:	1891      	adds	r1, r2, r2
 80046da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046dc:	415b      	adcs	r3, r3
 80046de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046e4:	4641      	mov	r1, r8
 80046e6:	eb12 0a01 	adds.w	sl, r2, r1
 80046ea:	4649      	mov	r1, r9
 80046ec:	eb43 0b01 	adc.w	fp, r3, r1
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004700:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004704:	4692      	mov	sl, r2
 8004706:	469b      	mov	fp, r3
 8004708:	4643      	mov	r3, r8
 800470a:	eb1a 0303 	adds.w	r3, sl, r3
 800470e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004712:	464b      	mov	r3, r9
 8004714:	eb4b 0303 	adc.w	r3, fp, r3
 8004718:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004728:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800472c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004730:	460b      	mov	r3, r1
 8004732:	18db      	adds	r3, r3, r3
 8004734:	643b      	str	r3, [r7, #64]	@ 0x40
 8004736:	4613      	mov	r3, r2
 8004738:	eb42 0303 	adc.w	r3, r2, r3
 800473c:	647b      	str	r3, [r7, #68]	@ 0x44
 800473e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004742:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004746:	f7fc fa57 	bl	8000bf8 <__aeabi_uldivmod>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4611      	mov	r1, r2
 8004750:	4b3b      	ldr	r3, [pc, #236]	@ (8004840 <UART_SetConfig+0x2d4>)
 8004752:	fba3 2301 	umull	r2, r3, r3, r1
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	2264      	movs	r2, #100	@ 0x64
 800475a:	fb02 f303 	mul.w	r3, r2, r3
 800475e:	1acb      	subs	r3, r1, r3
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004766:	4b36      	ldr	r3, [pc, #216]	@ (8004840 <UART_SetConfig+0x2d4>)
 8004768:	fba3 2302 	umull	r2, r3, r3, r2
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004774:	441c      	add	r4, r3
 8004776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004780:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004784:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004788:	4642      	mov	r2, r8
 800478a:	464b      	mov	r3, r9
 800478c:	1891      	adds	r1, r2, r2
 800478e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004790:	415b      	adcs	r3, r3
 8004792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004794:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004798:	4641      	mov	r1, r8
 800479a:	1851      	adds	r1, r2, r1
 800479c:	6339      	str	r1, [r7, #48]	@ 0x30
 800479e:	4649      	mov	r1, r9
 80047a0:	414b      	adcs	r3, r1
 80047a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047b0:	4659      	mov	r1, fp
 80047b2:	00cb      	lsls	r3, r1, #3
 80047b4:	4651      	mov	r1, sl
 80047b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ba:	4651      	mov	r1, sl
 80047bc:	00ca      	lsls	r2, r1, #3
 80047be:	4610      	mov	r0, r2
 80047c0:	4619      	mov	r1, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	4642      	mov	r2, r8
 80047c6:	189b      	adds	r3, r3, r2
 80047c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047cc:	464b      	mov	r3, r9
 80047ce:	460a      	mov	r2, r1
 80047d0:	eb42 0303 	adc.w	r3, r2, r3
 80047d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047ec:	460b      	mov	r3, r1
 80047ee:	18db      	adds	r3, r3, r3
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047f2:	4613      	mov	r3, r2
 80047f4:	eb42 0303 	adc.w	r3, r2, r3
 80047f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004802:	f7fc f9f9 	bl	8000bf8 <__aeabi_uldivmod>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4b0d      	ldr	r3, [pc, #52]	@ (8004840 <UART_SetConfig+0x2d4>)
 800480c:	fba3 1302 	umull	r1, r3, r3, r2
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	2164      	movs	r1, #100	@ 0x64
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	3332      	adds	r3, #50	@ 0x32
 800481e:	4a08      	ldr	r2, [pc, #32]	@ (8004840 <UART_SetConfig+0x2d4>)
 8004820:	fba2 2303 	umull	r2, r3, r2, r3
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	f003 0207 	and.w	r2, r3, #7
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4422      	add	r2, r4
 8004832:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004834:	e106      	b.n	8004a44 <UART_SetConfig+0x4d8>
 8004836:	bf00      	nop
 8004838:	40011000 	.word	0x40011000
 800483c:	40011400 	.word	0x40011400
 8004840:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004848:	2200      	movs	r2, #0
 800484a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800484e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004852:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004856:	4642      	mov	r2, r8
 8004858:	464b      	mov	r3, r9
 800485a:	1891      	adds	r1, r2, r2
 800485c:	6239      	str	r1, [r7, #32]
 800485e:	415b      	adcs	r3, r3
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
 8004862:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004866:	4641      	mov	r1, r8
 8004868:	1854      	adds	r4, r2, r1
 800486a:	4649      	mov	r1, r9
 800486c:	eb43 0501 	adc.w	r5, r3, r1
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	00eb      	lsls	r3, r5, #3
 800487a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800487e:	00e2      	lsls	r2, r4, #3
 8004880:	4614      	mov	r4, r2
 8004882:	461d      	mov	r5, r3
 8004884:	4643      	mov	r3, r8
 8004886:	18e3      	adds	r3, r4, r3
 8004888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800488c:	464b      	mov	r3, r9
 800488e:	eb45 0303 	adc.w	r3, r5, r3
 8004892:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048b2:	4629      	mov	r1, r5
 80048b4:	008b      	lsls	r3, r1, #2
 80048b6:	4621      	mov	r1, r4
 80048b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048bc:	4621      	mov	r1, r4
 80048be:	008a      	lsls	r2, r1, #2
 80048c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048c4:	f7fc f998 	bl	8000bf8 <__aeabi_uldivmod>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4b60      	ldr	r3, [pc, #384]	@ (8004a50 <UART_SetConfig+0x4e4>)
 80048ce:	fba3 2302 	umull	r2, r3, r3, r2
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	011c      	lsls	r4, r3, #4
 80048d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048e8:	4642      	mov	r2, r8
 80048ea:	464b      	mov	r3, r9
 80048ec:	1891      	adds	r1, r2, r2
 80048ee:	61b9      	str	r1, [r7, #24]
 80048f0:	415b      	adcs	r3, r3
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f8:	4641      	mov	r1, r8
 80048fa:	1851      	adds	r1, r2, r1
 80048fc:	6139      	str	r1, [r7, #16]
 80048fe:	4649      	mov	r1, r9
 8004900:	414b      	adcs	r3, r1
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004910:	4659      	mov	r1, fp
 8004912:	00cb      	lsls	r3, r1, #3
 8004914:	4651      	mov	r1, sl
 8004916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800491a:	4651      	mov	r1, sl
 800491c:	00ca      	lsls	r2, r1, #3
 800491e:	4610      	mov	r0, r2
 8004920:	4619      	mov	r1, r3
 8004922:	4603      	mov	r3, r0
 8004924:	4642      	mov	r2, r8
 8004926:	189b      	adds	r3, r3, r2
 8004928:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800492c:	464b      	mov	r3, r9
 800492e:	460a      	mov	r2, r1
 8004930:	eb42 0303 	adc.w	r3, r2, r3
 8004934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004942:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004950:	4649      	mov	r1, r9
 8004952:	008b      	lsls	r3, r1, #2
 8004954:	4641      	mov	r1, r8
 8004956:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800495a:	4641      	mov	r1, r8
 800495c:	008a      	lsls	r2, r1, #2
 800495e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004962:	f7fc f949 	bl	8000bf8 <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4611      	mov	r1, r2
 800496c:	4b38      	ldr	r3, [pc, #224]	@ (8004a50 <UART_SetConfig+0x4e4>)
 800496e:	fba3 2301 	umull	r2, r3, r3, r1
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2264      	movs	r2, #100	@ 0x64
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	1acb      	subs	r3, r1, r3
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	3332      	adds	r3, #50	@ 0x32
 8004980:	4a33      	ldr	r2, [pc, #204]	@ (8004a50 <UART_SetConfig+0x4e4>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800498c:	441c      	add	r4, r3
 800498e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004992:	2200      	movs	r2, #0
 8004994:	673b      	str	r3, [r7, #112]	@ 0x70
 8004996:	677a      	str	r2, [r7, #116]	@ 0x74
 8004998:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800499c:	4642      	mov	r2, r8
 800499e:	464b      	mov	r3, r9
 80049a0:	1891      	adds	r1, r2, r2
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	415b      	adcs	r3, r3
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049ac:	4641      	mov	r1, r8
 80049ae:	1851      	adds	r1, r2, r1
 80049b0:	6039      	str	r1, [r7, #0]
 80049b2:	4649      	mov	r1, r9
 80049b4:	414b      	adcs	r3, r1
 80049b6:	607b      	str	r3, [r7, #4]
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049c4:	4659      	mov	r1, fp
 80049c6:	00cb      	lsls	r3, r1, #3
 80049c8:	4651      	mov	r1, sl
 80049ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ce:	4651      	mov	r1, sl
 80049d0:	00ca      	lsls	r2, r1, #3
 80049d2:	4610      	mov	r0, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	4603      	mov	r3, r0
 80049d8:	4642      	mov	r2, r8
 80049da:	189b      	adds	r3, r3, r2
 80049dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049de:	464b      	mov	r3, r9
 80049e0:	460a      	mov	r2, r1
 80049e2:	eb42 0303 	adc.w	r3, r2, r3
 80049e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80049f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a00:	4649      	mov	r1, r9
 8004a02:	008b      	lsls	r3, r1, #2
 8004a04:	4641      	mov	r1, r8
 8004a06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	008a      	lsls	r2, r1, #2
 8004a0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a12:	f7fc f8f1 	bl	8000bf8 <__aeabi_uldivmod>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a50 <UART_SetConfig+0x4e4>)
 8004a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	2164      	movs	r1, #100	@ 0x64
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	3332      	adds	r3, #50	@ 0x32
 8004a2e:	4a08      	ldr	r2, [pc, #32]	@ (8004a50 <UART_SetConfig+0x4e4>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	f003 020f 	and.w	r2, r3, #15
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4422      	add	r2, r4
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a50:	51eb851f 	.word	0x51eb851f

08004a54 <calloc>:
 8004a54:	4b02      	ldr	r3, [pc, #8]	@ (8004a60 <calloc+0xc>)
 8004a56:	460a      	mov	r2, r1
 8004a58:	4601      	mov	r1, r0
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	f000 b802 	b.w	8004a64 <_calloc_r>
 8004a60:	20000060 	.word	0x20000060

08004a64 <_calloc_r>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	fba1 5402 	umull	r5, r4, r1, r2
 8004a6a:	b93c      	cbnz	r4, 8004a7c <_calloc_r+0x18>
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	f000 f837 	bl	8004ae0 <_malloc_r>
 8004a72:	4606      	mov	r6, r0
 8004a74:	b928      	cbnz	r0, 8004a82 <_calloc_r+0x1e>
 8004a76:	2600      	movs	r6, #0
 8004a78:	4630      	mov	r0, r6
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	220c      	movs	r2, #12
 8004a7e:	6002      	str	r2, [r0, #0]
 8004a80:	e7f9      	b.n	8004a76 <_calloc_r+0x12>
 8004a82:	462a      	mov	r2, r5
 8004a84:	4621      	mov	r1, r4
 8004a86:	f000 fe40 	bl	800570a <memset>
 8004a8a:	e7f5      	b.n	8004a78 <_calloc_r+0x14>

08004a8c <malloc>:
 8004a8c:	4b02      	ldr	r3, [pc, #8]	@ (8004a98 <malloc+0xc>)
 8004a8e:	4601      	mov	r1, r0
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	f000 b825 	b.w	8004ae0 <_malloc_r>
 8004a96:	bf00      	nop
 8004a98:	20000060 	.word	0x20000060

08004a9c <sbrk_aligned>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	4e0f      	ldr	r6, [pc, #60]	@ (8004adc <sbrk_aligned+0x40>)
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	6831      	ldr	r1, [r6, #0]
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	b911      	cbnz	r1, 8004aae <sbrk_aligned+0x12>
 8004aa8:	f000 fe70 	bl	800578c <_sbrk_r>
 8004aac:	6030      	str	r0, [r6, #0]
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f000 fe6b 	bl	800578c <_sbrk_r>
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	d103      	bne.n	8004ac2 <sbrk_aligned+0x26>
 8004aba:	f04f 34ff 	mov.w	r4, #4294967295
 8004abe:	4620      	mov	r0, r4
 8004ac0:	bd70      	pop	{r4, r5, r6, pc}
 8004ac2:	1cc4      	adds	r4, r0, #3
 8004ac4:	f024 0403 	bic.w	r4, r4, #3
 8004ac8:	42a0      	cmp	r0, r4
 8004aca:	d0f8      	beq.n	8004abe <sbrk_aligned+0x22>
 8004acc:	1a21      	subs	r1, r4, r0
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f000 fe5c 	bl	800578c <_sbrk_r>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d1f2      	bne.n	8004abe <sbrk_aligned+0x22>
 8004ad8:	e7ef      	b.n	8004aba <sbrk_aligned+0x1e>
 8004ada:	bf00      	nop
 8004adc:	200003cc 	.word	0x200003cc

08004ae0 <_malloc_r>:
 8004ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ae4:	1ccd      	adds	r5, r1, #3
 8004ae6:	f025 0503 	bic.w	r5, r5, #3
 8004aea:	3508      	adds	r5, #8
 8004aec:	2d0c      	cmp	r5, #12
 8004aee:	bf38      	it	cc
 8004af0:	250c      	movcc	r5, #12
 8004af2:	2d00      	cmp	r5, #0
 8004af4:	4606      	mov	r6, r0
 8004af6:	db01      	blt.n	8004afc <_malloc_r+0x1c>
 8004af8:	42a9      	cmp	r1, r5
 8004afa:	d904      	bls.n	8004b06 <_malloc_r+0x26>
 8004afc:	230c      	movs	r3, #12
 8004afe:	6033      	str	r3, [r6, #0]
 8004b00:	2000      	movs	r0, #0
 8004b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bdc <_malloc_r+0xfc>
 8004b0a:	f000 f869 	bl	8004be0 <__malloc_lock>
 8004b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b12:	461c      	mov	r4, r3
 8004b14:	bb44      	cbnz	r4, 8004b68 <_malloc_r+0x88>
 8004b16:	4629      	mov	r1, r5
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f7ff ffbf 	bl	8004a9c <sbrk_aligned>
 8004b1e:	1c43      	adds	r3, r0, #1
 8004b20:	4604      	mov	r4, r0
 8004b22:	d158      	bne.n	8004bd6 <_malloc_r+0xf6>
 8004b24:	f8d8 4000 	ldr.w	r4, [r8]
 8004b28:	4627      	mov	r7, r4
 8004b2a:	2f00      	cmp	r7, #0
 8004b2c:	d143      	bne.n	8004bb6 <_malloc_r+0xd6>
 8004b2e:	2c00      	cmp	r4, #0
 8004b30:	d04b      	beq.n	8004bca <_malloc_r+0xea>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	4639      	mov	r1, r7
 8004b36:	4630      	mov	r0, r6
 8004b38:	eb04 0903 	add.w	r9, r4, r3
 8004b3c:	f000 fe26 	bl	800578c <_sbrk_r>
 8004b40:	4581      	cmp	r9, r0
 8004b42:	d142      	bne.n	8004bca <_malloc_r+0xea>
 8004b44:	6821      	ldr	r1, [r4, #0]
 8004b46:	1a6d      	subs	r5, r5, r1
 8004b48:	4629      	mov	r1, r5
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f7ff ffa6 	bl	8004a9c <sbrk_aligned>
 8004b50:	3001      	adds	r0, #1
 8004b52:	d03a      	beq.n	8004bca <_malloc_r+0xea>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	442b      	add	r3, r5
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	bb62      	cbnz	r2, 8004bbc <_malloc_r+0xdc>
 8004b62:	f8c8 7000 	str.w	r7, [r8]
 8004b66:	e00f      	b.n	8004b88 <_malloc_r+0xa8>
 8004b68:	6822      	ldr	r2, [r4, #0]
 8004b6a:	1b52      	subs	r2, r2, r5
 8004b6c:	d420      	bmi.n	8004bb0 <_malloc_r+0xd0>
 8004b6e:	2a0b      	cmp	r2, #11
 8004b70:	d917      	bls.n	8004ba2 <_malloc_r+0xc2>
 8004b72:	1961      	adds	r1, r4, r5
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	6025      	str	r5, [r4, #0]
 8004b78:	bf18      	it	ne
 8004b7a:	6059      	strne	r1, [r3, #4]
 8004b7c:	6863      	ldr	r3, [r4, #4]
 8004b7e:	bf08      	it	eq
 8004b80:	f8c8 1000 	streq.w	r1, [r8]
 8004b84:	5162      	str	r2, [r4, r5]
 8004b86:	604b      	str	r3, [r1, #4]
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f000 f82f 	bl	8004bec <__malloc_unlock>
 8004b8e:	f104 000b 	add.w	r0, r4, #11
 8004b92:	1d23      	adds	r3, r4, #4
 8004b94:	f020 0007 	bic.w	r0, r0, #7
 8004b98:	1ac2      	subs	r2, r0, r3
 8004b9a:	bf1c      	itt	ne
 8004b9c:	1a1b      	subne	r3, r3, r0
 8004b9e:	50a3      	strne	r3, [r4, r2]
 8004ba0:	e7af      	b.n	8004b02 <_malloc_r+0x22>
 8004ba2:	6862      	ldr	r2, [r4, #4]
 8004ba4:	42a3      	cmp	r3, r4
 8004ba6:	bf0c      	ite	eq
 8004ba8:	f8c8 2000 	streq.w	r2, [r8]
 8004bac:	605a      	strne	r2, [r3, #4]
 8004bae:	e7eb      	b.n	8004b88 <_malloc_r+0xa8>
 8004bb0:	4623      	mov	r3, r4
 8004bb2:	6864      	ldr	r4, [r4, #4]
 8004bb4:	e7ae      	b.n	8004b14 <_malloc_r+0x34>
 8004bb6:	463c      	mov	r4, r7
 8004bb8:	687f      	ldr	r7, [r7, #4]
 8004bba:	e7b6      	b.n	8004b2a <_malloc_r+0x4a>
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	42a3      	cmp	r3, r4
 8004bc2:	d1fb      	bne.n	8004bbc <_malloc_r+0xdc>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	6053      	str	r3, [r2, #4]
 8004bc8:	e7de      	b.n	8004b88 <_malloc_r+0xa8>
 8004bca:	230c      	movs	r3, #12
 8004bcc:	6033      	str	r3, [r6, #0]
 8004bce:	4630      	mov	r0, r6
 8004bd0:	f000 f80c 	bl	8004bec <__malloc_unlock>
 8004bd4:	e794      	b.n	8004b00 <_malloc_r+0x20>
 8004bd6:	6005      	str	r5, [r0, #0]
 8004bd8:	e7d6      	b.n	8004b88 <_malloc_r+0xa8>
 8004bda:	bf00      	nop
 8004bdc:	200003d0 	.word	0x200003d0

08004be0 <__malloc_lock>:
 8004be0:	4801      	ldr	r0, [pc, #4]	@ (8004be8 <__malloc_lock+0x8>)
 8004be2:	f000 be20 	b.w	8005826 <__retarget_lock_acquire_recursive>
 8004be6:	bf00      	nop
 8004be8:	20000514 	.word	0x20000514

08004bec <__malloc_unlock>:
 8004bec:	4801      	ldr	r0, [pc, #4]	@ (8004bf4 <__malloc_unlock+0x8>)
 8004bee:	f000 be1b 	b.w	8005828 <__retarget_lock_release_recursive>
 8004bf2:	bf00      	nop
 8004bf4:	20000514 	.word	0x20000514

08004bf8 <__cvt>:
 8004bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	ec57 6b10 	vmov	r6, r7, d0
 8004c00:	2f00      	cmp	r7, #0
 8004c02:	460c      	mov	r4, r1
 8004c04:	4619      	mov	r1, r3
 8004c06:	463b      	mov	r3, r7
 8004c08:	bfbb      	ittet	lt
 8004c0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004c0e:	461f      	movlt	r7, r3
 8004c10:	2300      	movge	r3, #0
 8004c12:	232d      	movlt	r3, #45	@ 0x2d
 8004c14:	700b      	strb	r3, [r1, #0]
 8004c16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004c1c:	4691      	mov	r9, r2
 8004c1e:	f023 0820 	bic.w	r8, r3, #32
 8004c22:	bfbc      	itt	lt
 8004c24:	4632      	movlt	r2, r6
 8004c26:	4616      	movlt	r6, r2
 8004c28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c2c:	d005      	beq.n	8004c3a <__cvt+0x42>
 8004c2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004c32:	d100      	bne.n	8004c36 <__cvt+0x3e>
 8004c34:	3401      	adds	r4, #1
 8004c36:	2102      	movs	r1, #2
 8004c38:	e000      	b.n	8004c3c <__cvt+0x44>
 8004c3a:	2103      	movs	r1, #3
 8004c3c:	ab03      	add	r3, sp, #12
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	ab02      	add	r3, sp, #8
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	ec47 6b10 	vmov	d0, r6, r7
 8004c48:	4653      	mov	r3, sl
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	f000 fe78 	bl	8005940 <_dtoa_r>
 8004c50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004c54:	4605      	mov	r5, r0
 8004c56:	d119      	bne.n	8004c8c <__cvt+0x94>
 8004c58:	f019 0f01 	tst.w	r9, #1
 8004c5c:	d00e      	beq.n	8004c7c <__cvt+0x84>
 8004c5e:	eb00 0904 	add.w	r9, r0, r4
 8004c62:	2200      	movs	r2, #0
 8004c64:	2300      	movs	r3, #0
 8004c66:	4630      	mov	r0, r6
 8004c68:	4639      	mov	r1, r7
 8004c6a:	f7fb ff35 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c6e:	b108      	cbz	r0, 8004c74 <__cvt+0x7c>
 8004c70:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c74:	2230      	movs	r2, #48	@ 0x30
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	454b      	cmp	r3, r9
 8004c7a:	d31e      	bcc.n	8004cba <__cvt+0xc2>
 8004c7c:	9b03      	ldr	r3, [sp, #12]
 8004c7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c80:	1b5b      	subs	r3, r3, r5
 8004c82:	4628      	mov	r0, r5
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	b004      	add	sp, #16
 8004c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c90:	eb00 0904 	add.w	r9, r0, r4
 8004c94:	d1e5      	bne.n	8004c62 <__cvt+0x6a>
 8004c96:	7803      	ldrb	r3, [r0, #0]
 8004c98:	2b30      	cmp	r3, #48	@ 0x30
 8004c9a:	d10a      	bne.n	8004cb2 <__cvt+0xba>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	f7fb ff18 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ca8:	b918      	cbnz	r0, 8004cb2 <__cvt+0xba>
 8004caa:	f1c4 0401 	rsb	r4, r4, #1
 8004cae:	f8ca 4000 	str.w	r4, [sl]
 8004cb2:	f8da 3000 	ldr.w	r3, [sl]
 8004cb6:	4499      	add	r9, r3
 8004cb8:	e7d3      	b.n	8004c62 <__cvt+0x6a>
 8004cba:	1c59      	adds	r1, r3, #1
 8004cbc:	9103      	str	r1, [sp, #12]
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	e7d9      	b.n	8004c76 <__cvt+0x7e>

08004cc2 <__exponent>:
 8004cc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cc4:	2900      	cmp	r1, #0
 8004cc6:	bfba      	itte	lt
 8004cc8:	4249      	neglt	r1, r1
 8004cca:	232d      	movlt	r3, #45	@ 0x2d
 8004ccc:	232b      	movge	r3, #43	@ 0x2b
 8004cce:	2909      	cmp	r1, #9
 8004cd0:	7002      	strb	r2, [r0, #0]
 8004cd2:	7043      	strb	r3, [r0, #1]
 8004cd4:	dd29      	ble.n	8004d2a <__exponent+0x68>
 8004cd6:	f10d 0307 	add.w	r3, sp, #7
 8004cda:	461d      	mov	r5, r3
 8004cdc:	270a      	movs	r7, #10
 8004cde:	461a      	mov	r2, r3
 8004ce0:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ce4:	fb07 1416 	mls	r4, r7, r6, r1
 8004ce8:	3430      	adds	r4, #48	@ 0x30
 8004cea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004cee:	460c      	mov	r4, r1
 8004cf0:	2c63      	cmp	r4, #99	@ 0x63
 8004cf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	dcf1      	bgt.n	8004cde <__exponent+0x1c>
 8004cfa:	3130      	adds	r1, #48	@ 0x30
 8004cfc:	1e94      	subs	r4, r2, #2
 8004cfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d02:	1c41      	adds	r1, r0, #1
 8004d04:	4623      	mov	r3, r4
 8004d06:	42ab      	cmp	r3, r5
 8004d08:	d30a      	bcc.n	8004d20 <__exponent+0x5e>
 8004d0a:	f10d 0309 	add.w	r3, sp, #9
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	42ac      	cmp	r4, r5
 8004d12:	bf88      	it	hi
 8004d14:	2300      	movhi	r3, #0
 8004d16:	3302      	adds	r3, #2
 8004d18:	4403      	add	r3, r0
 8004d1a:	1a18      	subs	r0, r3, r0
 8004d1c:	b003      	add	sp, #12
 8004d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d28:	e7ed      	b.n	8004d06 <__exponent+0x44>
 8004d2a:	2330      	movs	r3, #48	@ 0x30
 8004d2c:	3130      	adds	r1, #48	@ 0x30
 8004d2e:	7083      	strb	r3, [r0, #2]
 8004d30:	70c1      	strb	r1, [r0, #3]
 8004d32:	1d03      	adds	r3, r0, #4
 8004d34:	e7f1      	b.n	8004d1a <__exponent+0x58>
	...

08004d38 <_printf_float>:
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	b08d      	sub	sp, #52	@ 0x34
 8004d3e:	460c      	mov	r4, r1
 8004d40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004d44:	4616      	mov	r6, r2
 8004d46:	461f      	mov	r7, r3
 8004d48:	4605      	mov	r5, r0
 8004d4a:	f000 fce7 	bl	800571c <_localeconv_r>
 8004d4e:	6803      	ldr	r3, [r0, #0]
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fb fa94 	bl	8000280 <strlen>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d60:	9005      	str	r0, [sp, #20]
 8004d62:	3307      	adds	r3, #7
 8004d64:	f023 0307 	bic.w	r3, r3, #7
 8004d68:	f103 0208 	add.w	r2, r3, #8
 8004d6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d70:	f8d4 b000 	ldr.w	fp, [r4]
 8004d74:	f8c8 2000 	str.w	r2, [r8]
 8004d78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d80:	9307      	str	r3, [sp, #28]
 8004d82:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004d8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d8e:	4b9c      	ldr	r3, [pc, #624]	@ (8005000 <_printf_float+0x2c8>)
 8004d90:	f04f 32ff 	mov.w	r2, #4294967295
 8004d94:	f7fb fed2 	bl	8000b3c <__aeabi_dcmpun>
 8004d98:	bb70      	cbnz	r0, 8004df8 <_printf_float+0xc0>
 8004d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d9e:	4b98      	ldr	r3, [pc, #608]	@ (8005000 <_printf_float+0x2c8>)
 8004da0:	f04f 32ff 	mov.w	r2, #4294967295
 8004da4:	f7fb feac 	bl	8000b00 <__aeabi_dcmple>
 8004da8:	bb30      	cbnz	r0, 8004df8 <_printf_float+0xc0>
 8004daa:	2200      	movs	r2, #0
 8004dac:	2300      	movs	r3, #0
 8004dae:	4640      	mov	r0, r8
 8004db0:	4649      	mov	r1, r9
 8004db2:	f7fb fe9b 	bl	8000aec <__aeabi_dcmplt>
 8004db6:	b110      	cbz	r0, 8004dbe <_printf_float+0x86>
 8004db8:	232d      	movs	r3, #45	@ 0x2d
 8004dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dbe:	4a91      	ldr	r2, [pc, #580]	@ (8005004 <_printf_float+0x2cc>)
 8004dc0:	4b91      	ldr	r3, [pc, #580]	@ (8005008 <_printf_float+0x2d0>)
 8004dc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004dc6:	bf94      	ite	ls
 8004dc8:	4690      	movls	r8, r2
 8004dca:	4698      	movhi	r8, r3
 8004dcc:	2303      	movs	r3, #3
 8004dce:	6123      	str	r3, [r4, #16]
 8004dd0:	f02b 0304 	bic.w	r3, fp, #4
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	f04f 0900 	mov.w	r9, #0
 8004dda:	9700      	str	r7, [sp, #0]
 8004ddc:	4633      	mov	r3, r6
 8004dde:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004de0:	4621      	mov	r1, r4
 8004de2:	4628      	mov	r0, r5
 8004de4:	f000 f9d2 	bl	800518c <_printf_common>
 8004de8:	3001      	adds	r0, #1
 8004dea:	f040 808d 	bne.w	8004f08 <_printf_float+0x1d0>
 8004dee:	f04f 30ff 	mov.w	r0, #4294967295
 8004df2:	b00d      	add	sp, #52	@ 0x34
 8004df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	4649      	mov	r1, r9
 8004e00:	f7fb fe9c 	bl	8000b3c <__aeabi_dcmpun>
 8004e04:	b140      	cbz	r0, 8004e18 <_printf_float+0xe0>
 8004e06:	464b      	mov	r3, r9
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bfbc      	itt	lt
 8004e0c:	232d      	movlt	r3, #45	@ 0x2d
 8004e0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e12:	4a7e      	ldr	r2, [pc, #504]	@ (800500c <_printf_float+0x2d4>)
 8004e14:	4b7e      	ldr	r3, [pc, #504]	@ (8005010 <_printf_float+0x2d8>)
 8004e16:	e7d4      	b.n	8004dc2 <_printf_float+0x8a>
 8004e18:	6863      	ldr	r3, [r4, #4]
 8004e1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004e1e:	9206      	str	r2, [sp, #24]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	d13b      	bne.n	8004e9c <_printf_float+0x164>
 8004e24:	2306      	movs	r3, #6
 8004e26:	6063      	str	r3, [r4, #4]
 8004e28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	6022      	str	r2, [r4, #0]
 8004e30:	9303      	str	r3, [sp, #12]
 8004e32:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004e38:	ab09      	add	r3, sp, #36	@ 0x24
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	6861      	ldr	r1, [r4, #4]
 8004e3e:	ec49 8b10 	vmov	d0, r8, r9
 8004e42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004e46:	4628      	mov	r0, r5
 8004e48:	f7ff fed6 	bl	8004bf8 <__cvt>
 8004e4c:	9b06      	ldr	r3, [sp, #24]
 8004e4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e50:	2b47      	cmp	r3, #71	@ 0x47
 8004e52:	4680      	mov	r8, r0
 8004e54:	d129      	bne.n	8004eaa <_printf_float+0x172>
 8004e56:	1cc8      	adds	r0, r1, #3
 8004e58:	db02      	blt.n	8004e60 <_printf_float+0x128>
 8004e5a:	6863      	ldr	r3, [r4, #4]
 8004e5c:	4299      	cmp	r1, r3
 8004e5e:	dd41      	ble.n	8004ee4 <_printf_float+0x1ac>
 8004e60:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e64:	fa5f fa8a 	uxtb.w	sl, sl
 8004e68:	3901      	subs	r1, #1
 8004e6a:	4652      	mov	r2, sl
 8004e6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e70:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e72:	f7ff ff26 	bl	8004cc2 <__exponent>
 8004e76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e78:	1813      	adds	r3, r2, r0
 8004e7a:	2a01      	cmp	r2, #1
 8004e7c:	4681      	mov	r9, r0
 8004e7e:	6123      	str	r3, [r4, #16]
 8004e80:	dc02      	bgt.n	8004e88 <_printf_float+0x150>
 8004e82:	6822      	ldr	r2, [r4, #0]
 8004e84:	07d2      	lsls	r2, r2, #31
 8004e86:	d501      	bpl.n	8004e8c <_printf_float+0x154>
 8004e88:	3301      	adds	r3, #1
 8004e8a:	6123      	str	r3, [r4, #16]
 8004e8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0a2      	beq.n	8004dda <_printf_float+0xa2>
 8004e94:	232d      	movs	r3, #45	@ 0x2d
 8004e96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e9a:	e79e      	b.n	8004dda <_printf_float+0xa2>
 8004e9c:	9a06      	ldr	r2, [sp, #24]
 8004e9e:	2a47      	cmp	r2, #71	@ 0x47
 8004ea0:	d1c2      	bne.n	8004e28 <_printf_float+0xf0>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1c0      	bne.n	8004e28 <_printf_float+0xf0>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e7bd      	b.n	8004e26 <_printf_float+0xee>
 8004eaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004eae:	d9db      	bls.n	8004e68 <_printf_float+0x130>
 8004eb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004eb4:	d118      	bne.n	8004ee8 <_printf_float+0x1b0>
 8004eb6:	2900      	cmp	r1, #0
 8004eb8:	6863      	ldr	r3, [r4, #4]
 8004eba:	dd0b      	ble.n	8004ed4 <_printf_float+0x19c>
 8004ebc:	6121      	str	r1, [r4, #16]
 8004ebe:	b913      	cbnz	r3, 8004ec6 <_printf_float+0x18e>
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	07d0      	lsls	r0, r2, #31
 8004ec4:	d502      	bpl.n	8004ecc <_printf_float+0x194>
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	440b      	add	r3, r1
 8004eca:	6123      	str	r3, [r4, #16]
 8004ecc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ece:	f04f 0900 	mov.w	r9, #0
 8004ed2:	e7db      	b.n	8004e8c <_printf_float+0x154>
 8004ed4:	b913      	cbnz	r3, 8004edc <_printf_float+0x1a4>
 8004ed6:	6822      	ldr	r2, [r4, #0]
 8004ed8:	07d2      	lsls	r2, r2, #31
 8004eda:	d501      	bpl.n	8004ee0 <_printf_float+0x1a8>
 8004edc:	3302      	adds	r3, #2
 8004ede:	e7f4      	b.n	8004eca <_printf_float+0x192>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e7f2      	b.n	8004eca <_printf_float+0x192>
 8004ee4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004ee8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eea:	4299      	cmp	r1, r3
 8004eec:	db05      	blt.n	8004efa <_printf_float+0x1c2>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	6121      	str	r1, [r4, #16]
 8004ef2:	07d8      	lsls	r0, r3, #31
 8004ef4:	d5ea      	bpl.n	8004ecc <_printf_float+0x194>
 8004ef6:	1c4b      	adds	r3, r1, #1
 8004ef8:	e7e7      	b.n	8004eca <_printf_float+0x192>
 8004efa:	2900      	cmp	r1, #0
 8004efc:	bfd4      	ite	le
 8004efe:	f1c1 0202 	rsble	r2, r1, #2
 8004f02:	2201      	movgt	r2, #1
 8004f04:	4413      	add	r3, r2
 8004f06:	e7e0      	b.n	8004eca <_printf_float+0x192>
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	055a      	lsls	r2, r3, #21
 8004f0c:	d407      	bmi.n	8004f1e <_printf_float+0x1e6>
 8004f0e:	6923      	ldr	r3, [r4, #16]
 8004f10:	4642      	mov	r2, r8
 8004f12:	4631      	mov	r1, r6
 8004f14:	4628      	mov	r0, r5
 8004f16:	47b8      	blx	r7
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d12b      	bne.n	8004f74 <_printf_float+0x23c>
 8004f1c:	e767      	b.n	8004dee <_printf_float+0xb6>
 8004f1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f22:	f240 80dd 	bls.w	80050e0 <_printf_float+0x3a8>
 8004f26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f7fb fdd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d033      	beq.n	8004f9e <_printf_float+0x266>
 8004f36:	4a37      	ldr	r2, [pc, #220]	@ (8005014 <_printf_float+0x2dc>)
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b8      	blx	r7
 8004f40:	3001      	adds	r0, #1
 8004f42:	f43f af54 	beq.w	8004dee <_printf_float+0xb6>
 8004f46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004f4a:	4543      	cmp	r3, r8
 8004f4c:	db02      	blt.n	8004f54 <_printf_float+0x21c>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	07d8      	lsls	r0, r3, #31
 8004f52:	d50f      	bpl.n	8004f74 <_printf_float+0x23c>
 8004f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f58:	4631      	mov	r1, r6
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	47b8      	blx	r7
 8004f5e:	3001      	adds	r0, #1
 8004f60:	f43f af45 	beq.w	8004dee <_printf_float+0xb6>
 8004f64:	f04f 0900 	mov.w	r9, #0
 8004f68:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f6c:	f104 0a1a 	add.w	sl, r4, #26
 8004f70:	45c8      	cmp	r8, r9
 8004f72:	dc09      	bgt.n	8004f88 <_printf_float+0x250>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	079b      	lsls	r3, r3, #30
 8004f78:	f100 8103 	bmi.w	8005182 <_printf_float+0x44a>
 8004f7c:	68e0      	ldr	r0, [r4, #12]
 8004f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f80:	4298      	cmp	r0, r3
 8004f82:	bfb8      	it	lt
 8004f84:	4618      	movlt	r0, r3
 8004f86:	e734      	b.n	8004df2 <_printf_float+0xba>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	4652      	mov	r2, sl
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b8      	blx	r7
 8004f92:	3001      	adds	r0, #1
 8004f94:	f43f af2b 	beq.w	8004dee <_printf_float+0xb6>
 8004f98:	f109 0901 	add.w	r9, r9, #1
 8004f9c:	e7e8      	b.n	8004f70 <_printf_float+0x238>
 8004f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	dc39      	bgt.n	8005018 <_printf_float+0x2e0>
 8004fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <_printf_float+0x2dc>)
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4631      	mov	r1, r6
 8004faa:	4628      	mov	r0, r5
 8004fac:	47b8      	blx	r7
 8004fae:	3001      	adds	r0, #1
 8004fb0:	f43f af1d 	beq.w	8004dee <_printf_float+0xb6>
 8004fb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004fb8:	ea59 0303 	orrs.w	r3, r9, r3
 8004fbc:	d102      	bne.n	8004fc4 <_printf_float+0x28c>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	07d9      	lsls	r1, r3, #31
 8004fc2:	d5d7      	bpl.n	8004f74 <_printf_float+0x23c>
 8004fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4628      	mov	r0, r5
 8004fcc:	47b8      	blx	r7
 8004fce:	3001      	adds	r0, #1
 8004fd0:	f43f af0d 	beq.w	8004dee <_printf_float+0xb6>
 8004fd4:	f04f 0a00 	mov.w	sl, #0
 8004fd8:	f104 0b1a 	add.w	fp, r4, #26
 8004fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fde:	425b      	negs	r3, r3
 8004fe0:	4553      	cmp	r3, sl
 8004fe2:	dc01      	bgt.n	8004fe8 <_printf_float+0x2b0>
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	e793      	b.n	8004f10 <_printf_float+0x1d8>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	465a      	mov	r2, fp
 8004fec:	4631      	mov	r1, r6
 8004fee:	4628      	mov	r0, r5
 8004ff0:	47b8      	blx	r7
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	f43f aefb 	beq.w	8004dee <_printf_float+0xb6>
 8004ff8:	f10a 0a01 	add.w	sl, sl, #1
 8004ffc:	e7ee      	b.n	8004fdc <_printf_float+0x2a4>
 8004ffe:	bf00      	nop
 8005000:	7fefffff 	.word	0x7fefffff
 8005004:	080077a8 	.word	0x080077a8
 8005008:	080077ac 	.word	0x080077ac
 800500c:	080077b0 	.word	0x080077b0
 8005010:	080077b4 	.word	0x080077b4
 8005014:	080077b8 	.word	0x080077b8
 8005018:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800501a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800501e:	4553      	cmp	r3, sl
 8005020:	bfa8      	it	ge
 8005022:	4653      	movge	r3, sl
 8005024:	2b00      	cmp	r3, #0
 8005026:	4699      	mov	r9, r3
 8005028:	dc36      	bgt.n	8005098 <_printf_float+0x360>
 800502a:	f04f 0b00 	mov.w	fp, #0
 800502e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005032:	f104 021a 	add.w	r2, r4, #26
 8005036:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005038:	9306      	str	r3, [sp, #24]
 800503a:	eba3 0309 	sub.w	r3, r3, r9
 800503e:	455b      	cmp	r3, fp
 8005040:	dc31      	bgt.n	80050a6 <_printf_float+0x36e>
 8005042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005044:	459a      	cmp	sl, r3
 8005046:	dc3a      	bgt.n	80050be <_printf_float+0x386>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	07da      	lsls	r2, r3, #31
 800504c:	d437      	bmi.n	80050be <_printf_float+0x386>
 800504e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005050:	ebaa 0903 	sub.w	r9, sl, r3
 8005054:	9b06      	ldr	r3, [sp, #24]
 8005056:	ebaa 0303 	sub.w	r3, sl, r3
 800505a:	4599      	cmp	r9, r3
 800505c:	bfa8      	it	ge
 800505e:	4699      	movge	r9, r3
 8005060:	f1b9 0f00 	cmp.w	r9, #0
 8005064:	dc33      	bgt.n	80050ce <_printf_float+0x396>
 8005066:	f04f 0800 	mov.w	r8, #0
 800506a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800506e:	f104 0b1a 	add.w	fp, r4, #26
 8005072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005074:	ebaa 0303 	sub.w	r3, sl, r3
 8005078:	eba3 0309 	sub.w	r3, r3, r9
 800507c:	4543      	cmp	r3, r8
 800507e:	f77f af79 	ble.w	8004f74 <_printf_float+0x23c>
 8005082:	2301      	movs	r3, #1
 8005084:	465a      	mov	r2, fp
 8005086:	4631      	mov	r1, r6
 8005088:	4628      	mov	r0, r5
 800508a:	47b8      	blx	r7
 800508c:	3001      	adds	r0, #1
 800508e:	f43f aeae 	beq.w	8004dee <_printf_float+0xb6>
 8005092:	f108 0801 	add.w	r8, r8, #1
 8005096:	e7ec      	b.n	8005072 <_printf_float+0x33a>
 8005098:	4642      	mov	r2, r8
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	d1c2      	bne.n	800502a <_printf_float+0x2f2>
 80050a4:	e6a3      	b.n	8004dee <_printf_float+0xb6>
 80050a6:	2301      	movs	r3, #1
 80050a8:	4631      	mov	r1, r6
 80050aa:	4628      	mov	r0, r5
 80050ac:	9206      	str	r2, [sp, #24]
 80050ae:	47b8      	blx	r7
 80050b0:	3001      	adds	r0, #1
 80050b2:	f43f ae9c 	beq.w	8004dee <_printf_float+0xb6>
 80050b6:	9a06      	ldr	r2, [sp, #24]
 80050b8:	f10b 0b01 	add.w	fp, fp, #1
 80050bc:	e7bb      	b.n	8005036 <_printf_float+0x2fe>
 80050be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050c2:	4631      	mov	r1, r6
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	d1c0      	bne.n	800504e <_printf_float+0x316>
 80050cc:	e68f      	b.n	8004dee <_printf_float+0xb6>
 80050ce:	9a06      	ldr	r2, [sp, #24]
 80050d0:	464b      	mov	r3, r9
 80050d2:	4442      	add	r2, r8
 80050d4:	4631      	mov	r1, r6
 80050d6:	4628      	mov	r0, r5
 80050d8:	47b8      	blx	r7
 80050da:	3001      	adds	r0, #1
 80050dc:	d1c3      	bne.n	8005066 <_printf_float+0x32e>
 80050de:	e686      	b.n	8004dee <_printf_float+0xb6>
 80050e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80050e4:	f1ba 0f01 	cmp.w	sl, #1
 80050e8:	dc01      	bgt.n	80050ee <_printf_float+0x3b6>
 80050ea:	07db      	lsls	r3, r3, #31
 80050ec:	d536      	bpl.n	800515c <_printf_float+0x424>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4642      	mov	r2, r8
 80050f2:	4631      	mov	r1, r6
 80050f4:	4628      	mov	r0, r5
 80050f6:	47b8      	blx	r7
 80050f8:	3001      	adds	r0, #1
 80050fa:	f43f ae78 	beq.w	8004dee <_printf_float+0xb6>
 80050fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	f43f ae70 	beq.w	8004dee <_printf_float+0xb6>
 800510e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005112:	2200      	movs	r2, #0
 8005114:	2300      	movs	r3, #0
 8005116:	f10a 3aff 	add.w	sl, sl, #4294967295
 800511a:	f7fb fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800511e:	b9c0      	cbnz	r0, 8005152 <_printf_float+0x41a>
 8005120:	4653      	mov	r3, sl
 8005122:	f108 0201 	add.w	r2, r8, #1
 8005126:	4631      	mov	r1, r6
 8005128:	4628      	mov	r0, r5
 800512a:	47b8      	blx	r7
 800512c:	3001      	adds	r0, #1
 800512e:	d10c      	bne.n	800514a <_printf_float+0x412>
 8005130:	e65d      	b.n	8004dee <_printf_float+0xb6>
 8005132:	2301      	movs	r3, #1
 8005134:	465a      	mov	r2, fp
 8005136:	4631      	mov	r1, r6
 8005138:	4628      	mov	r0, r5
 800513a:	47b8      	blx	r7
 800513c:	3001      	adds	r0, #1
 800513e:	f43f ae56 	beq.w	8004dee <_printf_float+0xb6>
 8005142:	f108 0801 	add.w	r8, r8, #1
 8005146:	45d0      	cmp	r8, sl
 8005148:	dbf3      	blt.n	8005132 <_printf_float+0x3fa>
 800514a:	464b      	mov	r3, r9
 800514c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005150:	e6df      	b.n	8004f12 <_printf_float+0x1da>
 8005152:	f04f 0800 	mov.w	r8, #0
 8005156:	f104 0b1a 	add.w	fp, r4, #26
 800515a:	e7f4      	b.n	8005146 <_printf_float+0x40e>
 800515c:	2301      	movs	r3, #1
 800515e:	4642      	mov	r2, r8
 8005160:	e7e1      	b.n	8005126 <_printf_float+0x3ee>
 8005162:	2301      	movs	r3, #1
 8005164:	464a      	mov	r2, r9
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	47b8      	blx	r7
 800516c:	3001      	adds	r0, #1
 800516e:	f43f ae3e 	beq.w	8004dee <_printf_float+0xb6>
 8005172:	f108 0801 	add.w	r8, r8, #1
 8005176:	68e3      	ldr	r3, [r4, #12]
 8005178:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800517a:	1a5b      	subs	r3, r3, r1
 800517c:	4543      	cmp	r3, r8
 800517e:	dcf0      	bgt.n	8005162 <_printf_float+0x42a>
 8005180:	e6fc      	b.n	8004f7c <_printf_float+0x244>
 8005182:	f04f 0800 	mov.w	r8, #0
 8005186:	f104 0919 	add.w	r9, r4, #25
 800518a:	e7f4      	b.n	8005176 <_printf_float+0x43e>

0800518c <_printf_common>:
 800518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	4616      	mov	r6, r2
 8005192:	4698      	mov	r8, r3
 8005194:	688a      	ldr	r2, [r1, #8]
 8005196:	690b      	ldr	r3, [r1, #16]
 8005198:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800519c:	4293      	cmp	r3, r2
 800519e:	bfb8      	it	lt
 80051a0:	4613      	movlt	r3, r2
 80051a2:	6033      	str	r3, [r6, #0]
 80051a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051a8:	4607      	mov	r7, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	b10a      	cbz	r2, 80051b2 <_printf_common+0x26>
 80051ae:	3301      	adds	r3, #1
 80051b0:	6033      	str	r3, [r6, #0]
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	0699      	lsls	r1, r3, #26
 80051b6:	bf42      	ittt	mi
 80051b8:	6833      	ldrmi	r3, [r6, #0]
 80051ba:	3302      	addmi	r3, #2
 80051bc:	6033      	strmi	r3, [r6, #0]
 80051be:	6825      	ldr	r5, [r4, #0]
 80051c0:	f015 0506 	ands.w	r5, r5, #6
 80051c4:	d106      	bne.n	80051d4 <_printf_common+0x48>
 80051c6:	f104 0a19 	add.w	sl, r4, #25
 80051ca:	68e3      	ldr	r3, [r4, #12]
 80051cc:	6832      	ldr	r2, [r6, #0]
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	42ab      	cmp	r3, r5
 80051d2:	dc26      	bgt.n	8005222 <_printf_common+0x96>
 80051d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051d8:	6822      	ldr	r2, [r4, #0]
 80051da:	3b00      	subs	r3, #0
 80051dc:	bf18      	it	ne
 80051de:	2301      	movne	r3, #1
 80051e0:	0692      	lsls	r2, r2, #26
 80051e2:	d42b      	bmi.n	800523c <_printf_common+0xb0>
 80051e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051e8:	4641      	mov	r1, r8
 80051ea:	4638      	mov	r0, r7
 80051ec:	47c8      	blx	r9
 80051ee:	3001      	adds	r0, #1
 80051f0:	d01e      	beq.n	8005230 <_printf_common+0xa4>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	6922      	ldr	r2, [r4, #16]
 80051f6:	f003 0306 	and.w	r3, r3, #6
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	bf02      	ittt	eq
 80051fe:	68e5      	ldreq	r5, [r4, #12]
 8005200:	6833      	ldreq	r3, [r6, #0]
 8005202:	1aed      	subeq	r5, r5, r3
 8005204:	68a3      	ldr	r3, [r4, #8]
 8005206:	bf0c      	ite	eq
 8005208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800520c:	2500      	movne	r5, #0
 800520e:	4293      	cmp	r3, r2
 8005210:	bfc4      	itt	gt
 8005212:	1a9b      	subgt	r3, r3, r2
 8005214:	18ed      	addgt	r5, r5, r3
 8005216:	2600      	movs	r6, #0
 8005218:	341a      	adds	r4, #26
 800521a:	42b5      	cmp	r5, r6
 800521c:	d11a      	bne.n	8005254 <_printf_common+0xc8>
 800521e:	2000      	movs	r0, #0
 8005220:	e008      	b.n	8005234 <_printf_common+0xa8>
 8005222:	2301      	movs	r3, #1
 8005224:	4652      	mov	r2, sl
 8005226:	4641      	mov	r1, r8
 8005228:	4638      	mov	r0, r7
 800522a:	47c8      	blx	r9
 800522c:	3001      	adds	r0, #1
 800522e:	d103      	bne.n	8005238 <_printf_common+0xac>
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005238:	3501      	adds	r5, #1
 800523a:	e7c6      	b.n	80051ca <_printf_common+0x3e>
 800523c:	18e1      	adds	r1, r4, r3
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	2030      	movs	r0, #48	@ 0x30
 8005242:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005246:	4422      	add	r2, r4
 8005248:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800524c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005250:	3302      	adds	r3, #2
 8005252:	e7c7      	b.n	80051e4 <_printf_common+0x58>
 8005254:	2301      	movs	r3, #1
 8005256:	4622      	mov	r2, r4
 8005258:	4641      	mov	r1, r8
 800525a:	4638      	mov	r0, r7
 800525c:	47c8      	blx	r9
 800525e:	3001      	adds	r0, #1
 8005260:	d0e6      	beq.n	8005230 <_printf_common+0xa4>
 8005262:	3601      	adds	r6, #1
 8005264:	e7d9      	b.n	800521a <_printf_common+0x8e>
	...

08005268 <_printf_i>:
 8005268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800526c:	7e0f      	ldrb	r7, [r1, #24]
 800526e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005270:	2f78      	cmp	r7, #120	@ 0x78
 8005272:	4691      	mov	r9, r2
 8005274:	4680      	mov	r8, r0
 8005276:	460c      	mov	r4, r1
 8005278:	469a      	mov	sl, r3
 800527a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800527e:	d807      	bhi.n	8005290 <_printf_i+0x28>
 8005280:	2f62      	cmp	r7, #98	@ 0x62
 8005282:	d80a      	bhi.n	800529a <_printf_i+0x32>
 8005284:	2f00      	cmp	r7, #0
 8005286:	f000 80d2 	beq.w	800542e <_printf_i+0x1c6>
 800528a:	2f58      	cmp	r7, #88	@ 0x58
 800528c:	f000 80b9 	beq.w	8005402 <_printf_i+0x19a>
 8005290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005294:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005298:	e03a      	b.n	8005310 <_printf_i+0xa8>
 800529a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800529e:	2b15      	cmp	r3, #21
 80052a0:	d8f6      	bhi.n	8005290 <_printf_i+0x28>
 80052a2:	a101      	add	r1, pc, #4	@ (adr r1, 80052a8 <_printf_i+0x40>)
 80052a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052a8:	08005301 	.word	0x08005301
 80052ac:	08005315 	.word	0x08005315
 80052b0:	08005291 	.word	0x08005291
 80052b4:	08005291 	.word	0x08005291
 80052b8:	08005291 	.word	0x08005291
 80052bc:	08005291 	.word	0x08005291
 80052c0:	08005315 	.word	0x08005315
 80052c4:	08005291 	.word	0x08005291
 80052c8:	08005291 	.word	0x08005291
 80052cc:	08005291 	.word	0x08005291
 80052d0:	08005291 	.word	0x08005291
 80052d4:	08005415 	.word	0x08005415
 80052d8:	0800533f 	.word	0x0800533f
 80052dc:	080053cf 	.word	0x080053cf
 80052e0:	08005291 	.word	0x08005291
 80052e4:	08005291 	.word	0x08005291
 80052e8:	08005437 	.word	0x08005437
 80052ec:	08005291 	.word	0x08005291
 80052f0:	0800533f 	.word	0x0800533f
 80052f4:	08005291 	.word	0x08005291
 80052f8:	08005291 	.word	0x08005291
 80052fc:	080053d7 	.word	0x080053d7
 8005300:	6833      	ldr	r3, [r6, #0]
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6032      	str	r2, [r6, #0]
 8005308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800530c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005310:	2301      	movs	r3, #1
 8005312:	e09d      	b.n	8005450 <_printf_i+0x1e8>
 8005314:	6833      	ldr	r3, [r6, #0]
 8005316:	6820      	ldr	r0, [r4, #0]
 8005318:	1d19      	adds	r1, r3, #4
 800531a:	6031      	str	r1, [r6, #0]
 800531c:	0606      	lsls	r6, r0, #24
 800531e:	d501      	bpl.n	8005324 <_printf_i+0xbc>
 8005320:	681d      	ldr	r5, [r3, #0]
 8005322:	e003      	b.n	800532c <_printf_i+0xc4>
 8005324:	0645      	lsls	r5, r0, #25
 8005326:	d5fb      	bpl.n	8005320 <_printf_i+0xb8>
 8005328:	f9b3 5000 	ldrsh.w	r5, [r3]
 800532c:	2d00      	cmp	r5, #0
 800532e:	da03      	bge.n	8005338 <_printf_i+0xd0>
 8005330:	232d      	movs	r3, #45	@ 0x2d
 8005332:	426d      	negs	r5, r5
 8005334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005338:	4859      	ldr	r0, [pc, #356]	@ (80054a0 <_printf_i+0x238>)
 800533a:	230a      	movs	r3, #10
 800533c:	e011      	b.n	8005362 <_printf_i+0xfa>
 800533e:	6821      	ldr	r1, [r4, #0]
 8005340:	6833      	ldr	r3, [r6, #0]
 8005342:	0608      	lsls	r0, r1, #24
 8005344:	f853 5b04 	ldr.w	r5, [r3], #4
 8005348:	d402      	bmi.n	8005350 <_printf_i+0xe8>
 800534a:	0649      	lsls	r1, r1, #25
 800534c:	bf48      	it	mi
 800534e:	b2ad      	uxthmi	r5, r5
 8005350:	2f6f      	cmp	r7, #111	@ 0x6f
 8005352:	4853      	ldr	r0, [pc, #332]	@ (80054a0 <_printf_i+0x238>)
 8005354:	6033      	str	r3, [r6, #0]
 8005356:	bf14      	ite	ne
 8005358:	230a      	movne	r3, #10
 800535a:	2308      	moveq	r3, #8
 800535c:	2100      	movs	r1, #0
 800535e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005362:	6866      	ldr	r6, [r4, #4]
 8005364:	60a6      	str	r6, [r4, #8]
 8005366:	2e00      	cmp	r6, #0
 8005368:	bfa2      	ittt	ge
 800536a:	6821      	ldrge	r1, [r4, #0]
 800536c:	f021 0104 	bicge.w	r1, r1, #4
 8005370:	6021      	strge	r1, [r4, #0]
 8005372:	b90d      	cbnz	r5, 8005378 <_printf_i+0x110>
 8005374:	2e00      	cmp	r6, #0
 8005376:	d04b      	beq.n	8005410 <_printf_i+0x1a8>
 8005378:	4616      	mov	r6, r2
 800537a:	fbb5 f1f3 	udiv	r1, r5, r3
 800537e:	fb03 5711 	mls	r7, r3, r1, r5
 8005382:	5dc7      	ldrb	r7, [r0, r7]
 8005384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005388:	462f      	mov	r7, r5
 800538a:	42bb      	cmp	r3, r7
 800538c:	460d      	mov	r5, r1
 800538e:	d9f4      	bls.n	800537a <_printf_i+0x112>
 8005390:	2b08      	cmp	r3, #8
 8005392:	d10b      	bne.n	80053ac <_printf_i+0x144>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	07df      	lsls	r7, r3, #31
 8005398:	d508      	bpl.n	80053ac <_printf_i+0x144>
 800539a:	6923      	ldr	r3, [r4, #16]
 800539c:	6861      	ldr	r1, [r4, #4]
 800539e:	4299      	cmp	r1, r3
 80053a0:	bfde      	ittt	le
 80053a2:	2330      	movle	r3, #48	@ 0x30
 80053a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053ac:	1b92      	subs	r2, r2, r6
 80053ae:	6122      	str	r2, [r4, #16]
 80053b0:	f8cd a000 	str.w	sl, [sp]
 80053b4:	464b      	mov	r3, r9
 80053b6:	aa03      	add	r2, sp, #12
 80053b8:	4621      	mov	r1, r4
 80053ba:	4640      	mov	r0, r8
 80053bc:	f7ff fee6 	bl	800518c <_printf_common>
 80053c0:	3001      	adds	r0, #1
 80053c2:	d14a      	bne.n	800545a <_printf_i+0x1f2>
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	b004      	add	sp, #16
 80053ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	f043 0320 	orr.w	r3, r3, #32
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	4833      	ldr	r0, [pc, #204]	@ (80054a4 <_printf_i+0x23c>)
 80053d8:	2778      	movs	r7, #120	@ 0x78
 80053da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	6831      	ldr	r1, [r6, #0]
 80053e2:	061f      	lsls	r7, r3, #24
 80053e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80053e8:	d402      	bmi.n	80053f0 <_printf_i+0x188>
 80053ea:	065f      	lsls	r7, r3, #25
 80053ec:	bf48      	it	mi
 80053ee:	b2ad      	uxthmi	r5, r5
 80053f0:	6031      	str	r1, [r6, #0]
 80053f2:	07d9      	lsls	r1, r3, #31
 80053f4:	bf44      	itt	mi
 80053f6:	f043 0320 	orrmi.w	r3, r3, #32
 80053fa:	6023      	strmi	r3, [r4, #0]
 80053fc:	b11d      	cbz	r5, 8005406 <_printf_i+0x19e>
 80053fe:	2310      	movs	r3, #16
 8005400:	e7ac      	b.n	800535c <_printf_i+0xf4>
 8005402:	4827      	ldr	r0, [pc, #156]	@ (80054a0 <_printf_i+0x238>)
 8005404:	e7e9      	b.n	80053da <_printf_i+0x172>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	f023 0320 	bic.w	r3, r3, #32
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	e7f6      	b.n	80053fe <_printf_i+0x196>
 8005410:	4616      	mov	r6, r2
 8005412:	e7bd      	b.n	8005390 <_printf_i+0x128>
 8005414:	6833      	ldr	r3, [r6, #0]
 8005416:	6825      	ldr	r5, [r4, #0]
 8005418:	6961      	ldr	r1, [r4, #20]
 800541a:	1d18      	adds	r0, r3, #4
 800541c:	6030      	str	r0, [r6, #0]
 800541e:	062e      	lsls	r6, r5, #24
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	d501      	bpl.n	8005428 <_printf_i+0x1c0>
 8005424:	6019      	str	r1, [r3, #0]
 8005426:	e002      	b.n	800542e <_printf_i+0x1c6>
 8005428:	0668      	lsls	r0, r5, #25
 800542a:	d5fb      	bpl.n	8005424 <_printf_i+0x1bc>
 800542c:	8019      	strh	r1, [r3, #0]
 800542e:	2300      	movs	r3, #0
 8005430:	6123      	str	r3, [r4, #16]
 8005432:	4616      	mov	r6, r2
 8005434:	e7bc      	b.n	80053b0 <_printf_i+0x148>
 8005436:	6833      	ldr	r3, [r6, #0]
 8005438:	1d1a      	adds	r2, r3, #4
 800543a:	6032      	str	r2, [r6, #0]
 800543c:	681e      	ldr	r6, [r3, #0]
 800543e:	6862      	ldr	r2, [r4, #4]
 8005440:	2100      	movs	r1, #0
 8005442:	4630      	mov	r0, r6
 8005444:	f7fa fecc 	bl	80001e0 <memchr>
 8005448:	b108      	cbz	r0, 800544e <_printf_i+0x1e6>
 800544a:	1b80      	subs	r0, r0, r6
 800544c:	6060      	str	r0, [r4, #4]
 800544e:	6863      	ldr	r3, [r4, #4]
 8005450:	6123      	str	r3, [r4, #16]
 8005452:	2300      	movs	r3, #0
 8005454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005458:	e7aa      	b.n	80053b0 <_printf_i+0x148>
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	4632      	mov	r2, r6
 800545e:	4649      	mov	r1, r9
 8005460:	4640      	mov	r0, r8
 8005462:	47d0      	blx	sl
 8005464:	3001      	adds	r0, #1
 8005466:	d0ad      	beq.n	80053c4 <_printf_i+0x15c>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	079b      	lsls	r3, r3, #30
 800546c:	d413      	bmi.n	8005496 <_printf_i+0x22e>
 800546e:	68e0      	ldr	r0, [r4, #12]
 8005470:	9b03      	ldr	r3, [sp, #12]
 8005472:	4298      	cmp	r0, r3
 8005474:	bfb8      	it	lt
 8005476:	4618      	movlt	r0, r3
 8005478:	e7a6      	b.n	80053c8 <_printf_i+0x160>
 800547a:	2301      	movs	r3, #1
 800547c:	4632      	mov	r2, r6
 800547e:	4649      	mov	r1, r9
 8005480:	4640      	mov	r0, r8
 8005482:	47d0      	blx	sl
 8005484:	3001      	adds	r0, #1
 8005486:	d09d      	beq.n	80053c4 <_printf_i+0x15c>
 8005488:	3501      	adds	r5, #1
 800548a:	68e3      	ldr	r3, [r4, #12]
 800548c:	9903      	ldr	r1, [sp, #12]
 800548e:	1a5b      	subs	r3, r3, r1
 8005490:	42ab      	cmp	r3, r5
 8005492:	dcf2      	bgt.n	800547a <_printf_i+0x212>
 8005494:	e7eb      	b.n	800546e <_printf_i+0x206>
 8005496:	2500      	movs	r5, #0
 8005498:	f104 0619 	add.w	r6, r4, #25
 800549c:	e7f5      	b.n	800548a <_printf_i+0x222>
 800549e:	bf00      	nop
 80054a0:	080077ba 	.word	0x080077ba
 80054a4:	080077cb 	.word	0x080077cb

080054a8 <std>:
 80054a8:	2300      	movs	r3, #0
 80054aa:	b510      	push	{r4, lr}
 80054ac:	4604      	mov	r4, r0
 80054ae:	e9c0 3300 	strd	r3, r3, [r0]
 80054b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054b6:	6083      	str	r3, [r0, #8]
 80054b8:	8181      	strh	r1, [r0, #12]
 80054ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80054bc:	81c2      	strh	r2, [r0, #14]
 80054be:	6183      	str	r3, [r0, #24]
 80054c0:	4619      	mov	r1, r3
 80054c2:	2208      	movs	r2, #8
 80054c4:	305c      	adds	r0, #92	@ 0x5c
 80054c6:	f000 f920 	bl	800570a <memset>
 80054ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005500 <std+0x58>)
 80054cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80054ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005504 <std+0x5c>)
 80054d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005508 <std+0x60>)
 80054d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054d6:	4b0d      	ldr	r3, [pc, #52]	@ (800550c <std+0x64>)
 80054d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80054da:	4b0d      	ldr	r3, [pc, #52]	@ (8005510 <std+0x68>)
 80054dc:	6224      	str	r4, [r4, #32]
 80054de:	429c      	cmp	r4, r3
 80054e0:	d006      	beq.n	80054f0 <std+0x48>
 80054e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054e6:	4294      	cmp	r4, r2
 80054e8:	d002      	beq.n	80054f0 <std+0x48>
 80054ea:	33d0      	adds	r3, #208	@ 0xd0
 80054ec:	429c      	cmp	r4, r3
 80054ee:	d105      	bne.n	80054fc <std+0x54>
 80054f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f8:	f000 b994 	b.w	8005824 <__retarget_lock_init_recursive>
 80054fc:	bd10      	pop	{r4, pc}
 80054fe:	bf00      	nop
 8005500:	08005651 	.word	0x08005651
 8005504:	08005673 	.word	0x08005673
 8005508:	080056ab 	.word	0x080056ab
 800550c:	080056cf 	.word	0x080056cf
 8005510:	200003d4 	.word	0x200003d4

08005514 <stdio_exit_handler>:
 8005514:	4a02      	ldr	r2, [pc, #8]	@ (8005520 <stdio_exit_handler+0xc>)
 8005516:	4903      	ldr	r1, [pc, #12]	@ (8005524 <stdio_exit_handler+0x10>)
 8005518:	4803      	ldr	r0, [pc, #12]	@ (8005528 <stdio_exit_handler+0x14>)
 800551a:	f000 b869 	b.w	80055f0 <_fwalk_sglue>
 800551e:	bf00      	nop
 8005520:	20000054 	.word	0x20000054
 8005524:	08006fed 	.word	0x08006fed
 8005528:	20000064 	.word	0x20000064

0800552c <cleanup_stdio>:
 800552c:	6841      	ldr	r1, [r0, #4]
 800552e:	4b0c      	ldr	r3, [pc, #48]	@ (8005560 <cleanup_stdio+0x34>)
 8005530:	4299      	cmp	r1, r3
 8005532:	b510      	push	{r4, lr}
 8005534:	4604      	mov	r4, r0
 8005536:	d001      	beq.n	800553c <cleanup_stdio+0x10>
 8005538:	f001 fd58 	bl	8006fec <_fflush_r>
 800553c:	68a1      	ldr	r1, [r4, #8]
 800553e:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <cleanup_stdio+0x38>)
 8005540:	4299      	cmp	r1, r3
 8005542:	d002      	beq.n	800554a <cleanup_stdio+0x1e>
 8005544:	4620      	mov	r0, r4
 8005546:	f001 fd51 	bl	8006fec <_fflush_r>
 800554a:	68e1      	ldr	r1, [r4, #12]
 800554c:	4b06      	ldr	r3, [pc, #24]	@ (8005568 <cleanup_stdio+0x3c>)
 800554e:	4299      	cmp	r1, r3
 8005550:	d004      	beq.n	800555c <cleanup_stdio+0x30>
 8005552:	4620      	mov	r0, r4
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005558:	f001 bd48 	b.w	8006fec <_fflush_r>
 800555c:	bd10      	pop	{r4, pc}
 800555e:	bf00      	nop
 8005560:	200003d4 	.word	0x200003d4
 8005564:	2000043c 	.word	0x2000043c
 8005568:	200004a4 	.word	0x200004a4

0800556c <global_stdio_init.part.0>:
 800556c:	b510      	push	{r4, lr}
 800556e:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <global_stdio_init.part.0+0x30>)
 8005570:	4c0b      	ldr	r4, [pc, #44]	@ (80055a0 <global_stdio_init.part.0+0x34>)
 8005572:	4a0c      	ldr	r2, [pc, #48]	@ (80055a4 <global_stdio_init.part.0+0x38>)
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	4620      	mov	r0, r4
 8005578:	2200      	movs	r2, #0
 800557a:	2104      	movs	r1, #4
 800557c:	f7ff ff94 	bl	80054a8 <std>
 8005580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005584:	2201      	movs	r2, #1
 8005586:	2109      	movs	r1, #9
 8005588:	f7ff ff8e 	bl	80054a8 <std>
 800558c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005590:	2202      	movs	r2, #2
 8005592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005596:	2112      	movs	r1, #18
 8005598:	f7ff bf86 	b.w	80054a8 <std>
 800559c:	2000050c 	.word	0x2000050c
 80055a0:	200003d4 	.word	0x200003d4
 80055a4:	08005515 	.word	0x08005515

080055a8 <__sfp_lock_acquire>:
 80055a8:	4801      	ldr	r0, [pc, #4]	@ (80055b0 <__sfp_lock_acquire+0x8>)
 80055aa:	f000 b93c 	b.w	8005826 <__retarget_lock_acquire_recursive>
 80055ae:	bf00      	nop
 80055b0:	20000515 	.word	0x20000515

080055b4 <__sfp_lock_release>:
 80055b4:	4801      	ldr	r0, [pc, #4]	@ (80055bc <__sfp_lock_release+0x8>)
 80055b6:	f000 b937 	b.w	8005828 <__retarget_lock_release_recursive>
 80055ba:	bf00      	nop
 80055bc:	20000515 	.word	0x20000515

080055c0 <__sinit>:
 80055c0:	b510      	push	{r4, lr}
 80055c2:	4604      	mov	r4, r0
 80055c4:	f7ff fff0 	bl	80055a8 <__sfp_lock_acquire>
 80055c8:	6a23      	ldr	r3, [r4, #32]
 80055ca:	b11b      	cbz	r3, 80055d4 <__sinit+0x14>
 80055cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d0:	f7ff bff0 	b.w	80055b4 <__sfp_lock_release>
 80055d4:	4b04      	ldr	r3, [pc, #16]	@ (80055e8 <__sinit+0x28>)
 80055d6:	6223      	str	r3, [r4, #32]
 80055d8:	4b04      	ldr	r3, [pc, #16]	@ (80055ec <__sinit+0x2c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1f5      	bne.n	80055cc <__sinit+0xc>
 80055e0:	f7ff ffc4 	bl	800556c <global_stdio_init.part.0>
 80055e4:	e7f2      	b.n	80055cc <__sinit+0xc>
 80055e6:	bf00      	nop
 80055e8:	0800552d 	.word	0x0800552d
 80055ec:	2000050c 	.word	0x2000050c

080055f0 <_fwalk_sglue>:
 80055f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f4:	4607      	mov	r7, r0
 80055f6:	4688      	mov	r8, r1
 80055f8:	4614      	mov	r4, r2
 80055fa:	2600      	movs	r6, #0
 80055fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005600:	f1b9 0901 	subs.w	r9, r9, #1
 8005604:	d505      	bpl.n	8005612 <_fwalk_sglue+0x22>
 8005606:	6824      	ldr	r4, [r4, #0]
 8005608:	2c00      	cmp	r4, #0
 800560a:	d1f7      	bne.n	80055fc <_fwalk_sglue+0xc>
 800560c:	4630      	mov	r0, r6
 800560e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005612:	89ab      	ldrh	r3, [r5, #12]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d907      	bls.n	8005628 <_fwalk_sglue+0x38>
 8005618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800561c:	3301      	adds	r3, #1
 800561e:	d003      	beq.n	8005628 <_fwalk_sglue+0x38>
 8005620:	4629      	mov	r1, r5
 8005622:	4638      	mov	r0, r7
 8005624:	47c0      	blx	r8
 8005626:	4306      	orrs	r6, r0
 8005628:	3568      	adds	r5, #104	@ 0x68
 800562a:	e7e9      	b.n	8005600 <_fwalk_sglue+0x10>

0800562c <iprintf>:
 800562c:	b40f      	push	{r0, r1, r2, r3}
 800562e:	b507      	push	{r0, r1, r2, lr}
 8005630:	4906      	ldr	r1, [pc, #24]	@ (800564c <iprintf+0x20>)
 8005632:	ab04      	add	r3, sp, #16
 8005634:	6808      	ldr	r0, [r1, #0]
 8005636:	f853 2b04 	ldr.w	r2, [r3], #4
 800563a:	6881      	ldr	r1, [r0, #8]
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	f001 fb39 	bl	8006cb4 <_vfiprintf_r>
 8005642:	b003      	add	sp, #12
 8005644:	f85d eb04 	ldr.w	lr, [sp], #4
 8005648:	b004      	add	sp, #16
 800564a:	4770      	bx	lr
 800564c:	20000060 	.word	0x20000060

08005650 <__sread>:
 8005650:	b510      	push	{r4, lr}
 8005652:	460c      	mov	r4, r1
 8005654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005658:	f000 f886 	bl	8005768 <_read_r>
 800565c:	2800      	cmp	r0, #0
 800565e:	bfab      	itete	ge
 8005660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005662:	89a3      	ldrhlt	r3, [r4, #12]
 8005664:	181b      	addge	r3, r3, r0
 8005666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800566a:	bfac      	ite	ge
 800566c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800566e:	81a3      	strhlt	r3, [r4, #12]
 8005670:	bd10      	pop	{r4, pc}

08005672 <__swrite>:
 8005672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005676:	461f      	mov	r7, r3
 8005678:	898b      	ldrh	r3, [r1, #12]
 800567a:	05db      	lsls	r3, r3, #23
 800567c:	4605      	mov	r5, r0
 800567e:	460c      	mov	r4, r1
 8005680:	4616      	mov	r6, r2
 8005682:	d505      	bpl.n	8005690 <__swrite+0x1e>
 8005684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005688:	2302      	movs	r3, #2
 800568a:	2200      	movs	r2, #0
 800568c:	f000 f85a 	bl	8005744 <_lseek_r>
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800569a:	81a3      	strh	r3, [r4, #12]
 800569c:	4632      	mov	r2, r6
 800569e:	463b      	mov	r3, r7
 80056a0:	4628      	mov	r0, r5
 80056a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056a6:	f000 b881 	b.w	80057ac <_write_r>

080056aa <__sseek>:
 80056aa:	b510      	push	{r4, lr}
 80056ac:	460c      	mov	r4, r1
 80056ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b2:	f000 f847 	bl	8005744 <_lseek_r>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	bf15      	itete	ne
 80056bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056c6:	81a3      	strheq	r3, [r4, #12]
 80056c8:	bf18      	it	ne
 80056ca:	81a3      	strhne	r3, [r4, #12]
 80056cc:	bd10      	pop	{r4, pc}

080056ce <__sclose>:
 80056ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d2:	f000 b827 	b.w	8005724 <_close_r>

080056d6 <memmove>:
 80056d6:	4288      	cmp	r0, r1
 80056d8:	b510      	push	{r4, lr}
 80056da:	eb01 0402 	add.w	r4, r1, r2
 80056de:	d902      	bls.n	80056e6 <memmove+0x10>
 80056e0:	4284      	cmp	r4, r0
 80056e2:	4623      	mov	r3, r4
 80056e4:	d807      	bhi.n	80056f6 <memmove+0x20>
 80056e6:	1e43      	subs	r3, r0, #1
 80056e8:	42a1      	cmp	r1, r4
 80056ea:	d008      	beq.n	80056fe <memmove+0x28>
 80056ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056f4:	e7f8      	b.n	80056e8 <memmove+0x12>
 80056f6:	4402      	add	r2, r0
 80056f8:	4601      	mov	r1, r0
 80056fa:	428a      	cmp	r2, r1
 80056fc:	d100      	bne.n	8005700 <memmove+0x2a>
 80056fe:	bd10      	pop	{r4, pc}
 8005700:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005704:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005708:	e7f7      	b.n	80056fa <memmove+0x24>

0800570a <memset>:
 800570a:	4402      	add	r2, r0
 800570c:	4603      	mov	r3, r0
 800570e:	4293      	cmp	r3, r2
 8005710:	d100      	bne.n	8005714 <memset+0xa>
 8005712:	4770      	bx	lr
 8005714:	f803 1b01 	strb.w	r1, [r3], #1
 8005718:	e7f9      	b.n	800570e <memset+0x4>
	...

0800571c <_localeconv_r>:
 800571c:	4800      	ldr	r0, [pc, #0]	@ (8005720 <_localeconv_r+0x4>)
 800571e:	4770      	bx	lr
 8005720:	200001a0 	.word	0x200001a0

08005724 <_close_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d06      	ldr	r5, [pc, #24]	@ (8005740 <_close_r+0x1c>)
 8005728:	2300      	movs	r3, #0
 800572a:	4604      	mov	r4, r0
 800572c:	4608      	mov	r0, r1
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	f7fc fcc6 	bl	80020c0 <_close>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_close_r+0x1a>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	b103      	cbz	r3, 800573e <_close_r+0x1a>
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	20000510 	.word	0x20000510

08005744 <_lseek_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4d07      	ldr	r5, [pc, #28]	@ (8005764 <_lseek_r+0x20>)
 8005748:	4604      	mov	r4, r0
 800574a:	4608      	mov	r0, r1
 800574c:	4611      	mov	r1, r2
 800574e:	2200      	movs	r2, #0
 8005750:	602a      	str	r2, [r5, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f7fc fcdb 	bl	800210e <_lseek>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_lseek_r+0x1e>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_lseek_r+0x1e>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	20000510 	.word	0x20000510

08005768 <_read_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d07      	ldr	r5, [pc, #28]	@ (8005788 <_read_r+0x20>)
 800576c:	4604      	mov	r4, r0
 800576e:	4608      	mov	r0, r1
 8005770:	4611      	mov	r1, r2
 8005772:	2200      	movs	r2, #0
 8005774:	602a      	str	r2, [r5, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	f7fc fc85 	bl	8002086 <_read>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d102      	bne.n	8005786 <_read_r+0x1e>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	b103      	cbz	r3, 8005786 <_read_r+0x1e>
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	20000510 	.word	0x20000510

0800578c <_sbrk_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4d06      	ldr	r5, [pc, #24]	@ (80057a8 <_sbrk_r+0x1c>)
 8005790:	2300      	movs	r3, #0
 8005792:	4604      	mov	r4, r0
 8005794:	4608      	mov	r0, r1
 8005796:	602b      	str	r3, [r5, #0]
 8005798:	f7fc fcc6 	bl	8002128 <_sbrk>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_sbrk_r+0x1a>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_sbrk_r+0x1a>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	20000510 	.word	0x20000510

080057ac <_write_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4d07      	ldr	r5, [pc, #28]	@ (80057cc <_write_r+0x20>)
 80057b0:	4604      	mov	r4, r0
 80057b2:	4608      	mov	r0, r1
 80057b4:	4611      	mov	r1, r2
 80057b6:	2200      	movs	r2, #0
 80057b8:	602a      	str	r2, [r5, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7fb fc3a 	bl	8001034 <_write>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_write_r+0x1e>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_write_r+0x1e>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	20000510 	.word	0x20000510

080057d0 <__errno>:
 80057d0:	4b01      	ldr	r3, [pc, #4]	@ (80057d8 <__errno+0x8>)
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000060 	.word	0x20000060

080057dc <__libc_init_array>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	4d0d      	ldr	r5, [pc, #52]	@ (8005814 <__libc_init_array+0x38>)
 80057e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005818 <__libc_init_array+0x3c>)
 80057e2:	1b64      	subs	r4, r4, r5
 80057e4:	10a4      	asrs	r4, r4, #2
 80057e6:	2600      	movs	r6, #0
 80057e8:	42a6      	cmp	r6, r4
 80057ea:	d109      	bne.n	8005800 <__libc_init_array+0x24>
 80057ec:	4d0b      	ldr	r5, [pc, #44]	@ (800581c <__libc_init_array+0x40>)
 80057ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005820 <__libc_init_array+0x44>)
 80057f0:	f001 ff9c 	bl	800772c <_init>
 80057f4:	1b64      	subs	r4, r4, r5
 80057f6:	10a4      	asrs	r4, r4, #2
 80057f8:	2600      	movs	r6, #0
 80057fa:	42a6      	cmp	r6, r4
 80057fc:	d105      	bne.n	800580a <__libc_init_array+0x2e>
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	f855 3b04 	ldr.w	r3, [r5], #4
 8005804:	4798      	blx	r3
 8005806:	3601      	adds	r6, #1
 8005808:	e7ee      	b.n	80057e8 <__libc_init_array+0xc>
 800580a:	f855 3b04 	ldr.w	r3, [r5], #4
 800580e:	4798      	blx	r3
 8005810:	3601      	adds	r6, #1
 8005812:	e7f2      	b.n	80057fa <__libc_init_array+0x1e>
 8005814:	08007b30 	.word	0x08007b30
 8005818:	08007b30 	.word	0x08007b30
 800581c:	08007b30 	.word	0x08007b30
 8005820:	08007b34 	.word	0x08007b34

08005824 <__retarget_lock_init_recursive>:
 8005824:	4770      	bx	lr

08005826 <__retarget_lock_acquire_recursive>:
 8005826:	4770      	bx	lr

08005828 <__retarget_lock_release_recursive>:
 8005828:	4770      	bx	lr

0800582a <quorem>:
 800582a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582e:	6903      	ldr	r3, [r0, #16]
 8005830:	690c      	ldr	r4, [r1, #16]
 8005832:	42a3      	cmp	r3, r4
 8005834:	4607      	mov	r7, r0
 8005836:	db7e      	blt.n	8005936 <quorem+0x10c>
 8005838:	3c01      	subs	r4, #1
 800583a:	f101 0814 	add.w	r8, r1, #20
 800583e:	00a3      	lsls	r3, r4, #2
 8005840:	f100 0514 	add.w	r5, r0, #20
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005854:	3301      	adds	r3, #1
 8005856:	429a      	cmp	r2, r3
 8005858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800585c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005860:	d32e      	bcc.n	80058c0 <quorem+0x96>
 8005862:	f04f 0a00 	mov.w	sl, #0
 8005866:	46c4      	mov	ip, r8
 8005868:	46ae      	mov	lr, r5
 800586a:	46d3      	mov	fp, sl
 800586c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005870:	b298      	uxth	r0, r3
 8005872:	fb06 a000 	mla	r0, r6, r0, sl
 8005876:	0c02      	lsrs	r2, r0, #16
 8005878:	0c1b      	lsrs	r3, r3, #16
 800587a:	fb06 2303 	mla	r3, r6, r3, r2
 800587e:	f8de 2000 	ldr.w	r2, [lr]
 8005882:	b280      	uxth	r0, r0
 8005884:	b292      	uxth	r2, r2
 8005886:	1a12      	subs	r2, r2, r0
 8005888:	445a      	add	r2, fp
 800588a:	f8de 0000 	ldr.w	r0, [lr]
 800588e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005892:	b29b      	uxth	r3, r3
 8005894:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005898:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800589c:	b292      	uxth	r2, r2
 800589e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80058a2:	45e1      	cmp	r9, ip
 80058a4:	f84e 2b04 	str.w	r2, [lr], #4
 80058a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80058ac:	d2de      	bcs.n	800586c <quorem+0x42>
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	58eb      	ldr	r3, [r5, r3]
 80058b2:	b92b      	cbnz	r3, 80058c0 <quorem+0x96>
 80058b4:	9b01      	ldr	r3, [sp, #4]
 80058b6:	3b04      	subs	r3, #4
 80058b8:	429d      	cmp	r5, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	d32f      	bcc.n	800591e <quorem+0xf4>
 80058be:	613c      	str	r4, [r7, #16]
 80058c0:	4638      	mov	r0, r7
 80058c2:	f001 f8c5 	bl	8006a50 <__mcmp>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	db25      	blt.n	8005916 <quorem+0xec>
 80058ca:	4629      	mov	r1, r5
 80058cc:	2000      	movs	r0, #0
 80058ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80058d2:	f8d1 c000 	ldr.w	ip, [r1]
 80058d6:	fa1f fe82 	uxth.w	lr, r2
 80058da:	fa1f f38c 	uxth.w	r3, ip
 80058de:	eba3 030e 	sub.w	r3, r3, lr
 80058e2:	4403      	add	r3, r0
 80058e4:	0c12      	lsrs	r2, r2, #16
 80058e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80058ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058f4:	45c1      	cmp	r9, r8
 80058f6:	f841 3b04 	str.w	r3, [r1], #4
 80058fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80058fe:	d2e6      	bcs.n	80058ce <quorem+0xa4>
 8005900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005904:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005908:	b922      	cbnz	r2, 8005914 <quorem+0xea>
 800590a:	3b04      	subs	r3, #4
 800590c:	429d      	cmp	r5, r3
 800590e:	461a      	mov	r2, r3
 8005910:	d30b      	bcc.n	800592a <quorem+0x100>
 8005912:	613c      	str	r4, [r7, #16]
 8005914:	3601      	adds	r6, #1
 8005916:	4630      	mov	r0, r6
 8005918:	b003      	add	sp, #12
 800591a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	3b04      	subs	r3, #4
 8005922:	2a00      	cmp	r2, #0
 8005924:	d1cb      	bne.n	80058be <quorem+0x94>
 8005926:	3c01      	subs	r4, #1
 8005928:	e7c6      	b.n	80058b8 <quorem+0x8e>
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	3b04      	subs	r3, #4
 800592e:	2a00      	cmp	r2, #0
 8005930:	d1ef      	bne.n	8005912 <quorem+0xe8>
 8005932:	3c01      	subs	r4, #1
 8005934:	e7ea      	b.n	800590c <quorem+0xe2>
 8005936:	2000      	movs	r0, #0
 8005938:	e7ee      	b.n	8005918 <quorem+0xee>
 800593a:	0000      	movs	r0, r0
 800593c:	0000      	movs	r0, r0
	...

08005940 <_dtoa_r>:
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	69c7      	ldr	r7, [r0, #28]
 8005946:	b099      	sub	sp, #100	@ 0x64
 8005948:	ed8d 0b02 	vstr	d0, [sp, #8]
 800594c:	ec55 4b10 	vmov	r4, r5, d0
 8005950:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005952:	9109      	str	r1, [sp, #36]	@ 0x24
 8005954:	4683      	mov	fp, r0
 8005956:	920e      	str	r2, [sp, #56]	@ 0x38
 8005958:	9313      	str	r3, [sp, #76]	@ 0x4c
 800595a:	b97f      	cbnz	r7, 800597c <_dtoa_r+0x3c>
 800595c:	2010      	movs	r0, #16
 800595e:	f7ff f895 	bl	8004a8c <malloc>
 8005962:	4602      	mov	r2, r0
 8005964:	f8cb 001c 	str.w	r0, [fp, #28]
 8005968:	b920      	cbnz	r0, 8005974 <_dtoa_r+0x34>
 800596a:	4ba7      	ldr	r3, [pc, #668]	@ (8005c08 <_dtoa_r+0x2c8>)
 800596c:	21ef      	movs	r1, #239	@ 0xef
 800596e:	48a7      	ldr	r0, [pc, #668]	@ (8005c0c <_dtoa_r+0x2cc>)
 8005970:	f001 fc06 	bl	8007180 <__assert_func>
 8005974:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005978:	6007      	str	r7, [r0, #0]
 800597a:	60c7      	str	r7, [r0, #12]
 800597c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005980:	6819      	ldr	r1, [r3, #0]
 8005982:	b159      	cbz	r1, 800599c <_dtoa_r+0x5c>
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	604a      	str	r2, [r1, #4]
 8005988:	2301      	movs	r3, #1
 800598a:	4093      	lsls	r3, r2
 800598c:	608b      	str	r3, [r1, #8]
 800598e:	4658      	mov	r0, fp
 8005990:	f000 fe24 	bl	80065dc <_Bfree>
 8005994:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	1e2b      	subs	r3, r5, #0
 800599e:	bfb9      	ittee	lt
 80059a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80059a4:	9303      	strlt	r3, [sp, #12]
 80059a6:	2300      	movge	r3, #0
 80059a8:	6033      	strge	r3, [r6, #0]
 80059aa:	9f03      	ldr	r7, [sp, #12]
 80059ac:	4b98      	ldr	r3, [pc, #608]	@ (8005c10 <_dtoa_r+0x2d0>)
 80059ae:	bfbc      	itt	lt
 80059b0:	2201      	movlt	r2, #1
 80059b2:	6032      	strlt	r2, [r6, #0]
 80059b4:	43bb      	bics	r3, r7
 80059b6:	d112      	bne.n	80059de <_dtoa_r+0x9e>
 80059b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80059ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80059c4:	4323      	orrs	r3, r4
 80059c6:	f000 854d 	beq.w	8006464 <_dtoa_r+0xb24>
 80059ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80059cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005c24 <_dtoa_r+0x2e4>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 854f 	beq.w	8006474 <_dtoa_r+0xb34>
 80059d6:	f10a 0303 	add.w	r3, sl, #3
 80059da:	f000 bd49 	b.w	8006470 <_dtoa_r+0xb30>
 80059de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	ec51 0b17 	vmov	r0, r1, d7
 80059e8:	2300      	movs	r3, #0
 80059ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80059ee:	f7fb f873 	bl	8000ad8 <__aeabi_dcmpeq>
 80059f2:	4680      	mov	r8, r0
 80059f4:	b158      	cbz	r0, 8005a0e <_dtoa_r+0xce>
 80059f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80059f8:	2301      	movs	r3, #1
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80059fe:	b113      	cbz	r3, 8005a06 <_dtoa_r+0xc6>
 8005a00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005a02:	4b84      	ldr	r3, [pc, #528]	@ (8005c14 <_dtoa_r+0x2d4>)
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005c28 <_dtoa_r+0x2e8>
 8005a0a:	f000 bd33 	b.w	8006474 <_dtoa_r+0xb34>
 8005a0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005a12:	aa16      	add	r2, sp, #88	@ 0x58
 8005a14:	a917      	add	r1, sp, #92	@ 0x5c
 8005a16:	4658      	mov	r0, fp
 8005a18:	f001 f8ca 	bl	8006bb0 <__d2b>
 8005a1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005a20:	4681      	mov	r9, r0
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	d077      	beq.n	8005b16 <_dtoa_r+0x1d6>
 8005a26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005a38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005a3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005a40:	4619      	mov	r1, r3
 8005a42:	2200      	movs	r2, #0
 8005a44:	4b74      	ldr	r3, [pc, #464]	@ (8005c18 <_dtoa_r+0x2d8>)
 8005a46:	f7fa fc27 	bl	8000298 <__aeabi_dsub>
 8005a4a:	a369      	add	r3, pc, #420	@ (adr r3, 8005bf0 <_dtoa_r+0x2b0>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f7fa fdda 	bl	8000608 <__aeabi_dmul>
 8005a54:	a368      	add	r3, pc, #416	@ (adr r3, 8005bf8 <_dtoa_r+0x2b8>)
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	f7fa fc1f 	bl	800029c <__adddf3>
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4630      	mov	r0, r6
 8005a62:	460d      	mov	r5, r1
 8005a64:	f7fa fd66 	bl	8000534 <__aeabi_i2d>
 8005a68:	a365      	add	r3, pc, #404	@ (adr r3, 8005c00 <_dtoa_r+0x2c0>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fa fdcb 	bl	8000608 <__aeabi_dmul>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4620      	mov	r0, r4
 8005a78:	4629      	mov	r1, r5
 8005a7a:	f7fa fc0f 	bl	800029c <__adddf3>
 8005a7e:	4604      	mov	r4, r0
 8005a80:	460d      	mov	r5, r1
 8005a82:	f7fb f871 	bl	8000b68 <__aeabi_d2iz>
 8005a86:	2200      	movs	r2, #0
 8005a88:	4607      	mov	r7, r0
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	4629      	mov	r1, r5
 8005a90:	f7fb f82c 	bl	8000aec <__aeabi_dcmplt>
 8005a94:	b140      	cbz	r0, 8005aa8 <_dtoa_r+0x168>
 8005a96:	4638      	mov	r0, r7
 8005a98:	f7fa fd4c 	bl	8000534 <__aeabi_i2d>
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	462b      	mov	r3, r5
 8005aa0:	f7fb f81a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005aa4:	b900      	cbnz	r0, 8005aa8 <_dtoa_r+0x168>
 8005aa6:	3f01      	subs	r7, #1
 8005aa8:	2f16      	cmp	r7, #22
 8005aaa:	d851      	bhi.n	8005b50 <_dtoa_r+0x210>
 8005aac:	4b5b      	ldr	r3, [pc, #364]	@ (8005c1c <_dtoa_r+0x2dc>)
 8005aae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005aba:	f7fb f817 	bl	8000aec <__aeabi_dcmplt>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d048      	beq.n	8005b54 <_dtoa_r+0x214>
 8005ac2:	3f01      	subs	r7, #1
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005ac8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005aca:	1b9b      	subs	r3, r3, r6
 8005acc:	1e5a      	subs	r2, r3, #1
 8005ace:	bf44      	itt	mi
 8005ad0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ad4:	2300      	movmi	r3, #0
 8005ad6:	9208      	str	r2, [sp, #32]
 8005ad8:	bf54      	ite	pl
 8005ada:	f04f 0800 	movpl.w	r8, #0
 8005ade:	9308      	strmi	r3, [sp, #32]
 8005ae0:	2f00      	cmp	r7, #0
 8005ae2:	db39      	blt.n	8005b58 <_dtoa_r+0x218>
 8005ae4:	9b08      	ldr	r3, [sp, #32]
 8005ae6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005ae8:	443b      	add	r3, r7
 8005aea:	9308      	str	r3, [sp, #32]
 8005aec:	2300      	movs	r3, #0
 8005aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8005af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af2:	2b09      	cmp	r3, #9
 8005af4:	d864      	bhi.n	8005bc0 <_dtoa_r+0x280>
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	bfc4      	itt	gt
 8005afa:	3b04      	subgt	r3, #4
 8005afc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b00:	f1a3 0302 	sub.w	r3, r3, #2
 8005b04:	bfcc      	ite	gt
 8005b06:	2400      	movgt	r4, #0
 8005b08:	2401      	movle	r4, #1
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d863      	bhi.n	8005bd6 <_dtoa_r+0x296>
 8005b0e:	e8df f003 	tbb	[pc, r3]
 8005b12:	372a      	.short	0x372a
 8005b14:	5535      	.short	0x5535
 8005b16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005b1a:	441e      	add	r6, r3
 8005b1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	bfc1      	itttt	gt
 8005b24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005b28:	409f      	lslgt	r7, r3
 8005b2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005b2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005b32:	bfd6      	itet	le
 8005b34:	f1c3 0320 	rsble	r3, r3, #32
 8005b38:	ea47 0003 	orrgt.w	r0, r7, r3
 8005b3c:	fa04 f003 	lslle.w	r0, r4, r3
 8005b40:	f7fa fce8 	bl	8000514 <__aeabi_ui2d>
 8005b44:	2201      	movs	r2, #1
 8005b46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005b4a:	3e01      	subs	r6, #1
 8005b4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005b4e:	e777      	b.n	8005a40 <_dtoa_r+0x100>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e7b8      	b.n	8005ac6 <_dtoa_r+0x186>
 8005b54:	9012      	str	r0, [sp, #72]	@ 0x48
 8005b56:	e7b7      	b.n	8005ac8 <_dtoa_r+0x188>
 8005b58:	427b      	negs	r3, r7
 8005b5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	eba8 0807 	sub.w	r8, r8, r7
 8005b62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b64:	e7c4      	b.n	8005af0 <_dtoa_r+0x1b0>
 8005b66:	2300      	movs	r3, #0
 8005b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	dc35      	bgt.n	8005bdc <_dtoa_r+0x29c>
 8005b70:	2301      	movs	r3, #1
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	9307      	str	r3, [sp, #28]
 8005b76:	461a      	mov	r2, r3
 8005b78:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b7a:	e00b      	b.n	8005b94 <_dtoa_r+0x254>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e7f3      	b.n	8005b68 <_dtoa_r+0x228>
 8005b80:	2300      	movs	r3, #0
 8005b82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b86:	18fb      	adds	r3, r7, r3
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	9307      	str	r3, [sp, #28]
 8005b90:	bfb8      	it	lt
 8005b92:	2301      	movlt	r3, #1
 8005b94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005b98:	2100      	movs	r1, #0
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	f102 0514 	add.w	r5, r2, #20
 8005ba0:	429d      	cmp	r5, r3
 8005ba2:	d91f      	bls.n	8005be4 <_dtoa_r+0x2a4>
 8005ba4:	6041      	str	r1, [r0, #4]
 8005ba6:	4658      	mov	r0, fp
 8005ba8:	f000 fcd8 	bl	800655c <_Balloc>
 8005bac:	4682      	mov	sl, r0
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d13c      	bne.n	8005c2c <_dtoa_r+0x2ec>
 8005bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c20 <_dtoa_r+0x2e0>)
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005bba:	e6d8      	b.n	800596e <_dtoa_r+0x2e>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e7e0      	b.n	8005b82 <_dtoa_r+0x242>
 8005bc0:	2401      	movs	r4, #1
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	9307      	str	r3, [sp, #28]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2312      	movs	r3, #18
 8005bd4:	e7d0      	b.n	8005b78 <_dtoa_r+0x238>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bda:	e7f5      	b.n	8005bc8 <_dtoa_r+0x288>
 8005bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	9307      	str	r3, [sp, #28]
 8005be2:	e7d7      	b.n	8005b94 <_dtoa_r+0x254>
 8005be4:	3101      	adds	r1, #1
 8005be6:	0052      	lsls	r2, r2, #1
 8005be8:	e7d8      	b.n	8005b9c <_dtoa_r+0x25c>
 8005bea:	bf00      	nop
 8005bec:	f3af 8000 	nop.w
 8005bf0:	636f4361 	.word	0x636f4361
 8005bf4:	3fd287a7 	.word	0x3fd287a7
 8005bf8:	8b60c8b3 	.word	0x8b60c8b3
 8005bfc:	3fc68a28 	.word	0x3fc68a28
 8005c00:	509f79fb 	.word	0x509f79fb
 8005c04:	3fd34413 	.word	0x3fd34413
 8005c08:	080077e9 	.word	0x080077e9
 8005c0c:	08007800 	.word	0x08007800
 8005c10:	7ff00000 	.word	0x7ff00000
 8005c14:	080077b9 	.word	0x080077b9
 8005c18:	3ff80000 	.word	0x3ff80000
 8005c1c:	080078f8 	.word	0x080078f8
 8005c20:	08007858 	.word	0x08007858
 8005c24:	080077e5 	.word	0x080077e5
 8005c28:	080077b8 	.word	0x080077b8
 8005c2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c30:	6018      	str	r0, [r3, #0]
 8005c32:	9b07      	ldr	r3, [sp, #28]
 8005c34:	2b0e      	cmp	r3, #14
 8005c36:	f200 80a4 	bhi.w	8005d82 <_dtoa_r+0x442>
 8005c3a:	2c00      	cmp	r4, #0
 8005c3c:	f000 80a1 	beq.w	8005d82 <_dtoa_r+0x442>
 8005c40:	2f00      	cmp	r7, #0
 8005c42:	dd33      	ble.n	8005cac <_dtoa_r+0x36c>
 8005c44:	4bad      	ldr	r3, [pc, #692]	@ (8005efc <_dtoa_r+0x5bc>)
 8005c46:	f007 020f 	and.w	r2, r7, #15
 8005c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c4e:	ed93 7b00 	vldr	d7, [r3]
 8005c52:	05f8      	lsls	r0, r7, #23
 8005c54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005c58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005c5c:	d516      	bpl.n	8005c8c <_dtoa_r+0x34c>
 8005c5e:	4ba8      	ldr	r3, [pc, #672]	@ (8005f00 <_dtoa_r+0x5c0>)
 8005c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c68:	f7fa fdf8 	bl	800085c <__aeabi_ddiv>
 8005c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c70:	f004 040f 	and.w	r4, r4, #15
 8005c74:	2603      	movs	r6, #3
 8005c76:	4da2      	ldr	r5, [pc, #648]	@ (8005f00 <_dtoa_r+0x5c0>)
 8005c78:	b954      	cbnz	r4, 8005c90 <_dtoa_r+0x350>
 8005c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c82:	f7fa fdeb 	bl	800085c <__aeabi_ddiv>
 8005c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c8a:	e028      	b.n	8005cde <_dtoa_r+0x39e>
 8005c8c:	2602      	movs	r6, #2
 8005c8e:	e7f2      	b.n	8005c76 <_dtoa_r+0x336>
 8005c90:	07e1      	lsls	r1, r4, #31
 8005c92:	d508      	bpl.n	8005ca6 <_dtoa_r+0x366>
 8005c94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c9c:	f7fa fcb4 	bl	8000608 <__aeabi_dmul>
 8005ca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ca4:	3601      	adds	r6, #1
 8005ca6:	1064      	asrs	r4, r4, #1
 8005ca8:	3508      	adds	r5, #8
 8005caa:	e7e5      	b.n	8005c78 <_dtoa_r+0x338>
 8005cac:	f000 80d2 	beq.w	8005e54 <_dtoa_r+0x514>
 8005cb0:	427c      	negs	r4, r7
 8005cb2:	4b92      	ldr	r3, [pc, #584]	@ (8005efc <_dtoa_r+0x5bc>)
 8005cb4:	4d92      	ldr	r5, [pc, #584]	@ (8005f00 <_dtoa_r+0x5c0>)
 8005cb6:	f004 020f 	and.w	r2, r4, #15
 8005cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cc6:	f7fa fc9f 	bl	8000608 <__aeabi_dmul>
 8005cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cce:	1124      	asrs	r4, r4, #4
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2602      	movs	r6, #2
 8005cd4:	2c00      	cmp	r4, #0
 8005cd6:	f040 80b2 	bne.w	8005e3e <_dtoa_r+0x4fe>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1d3      	bne.n	8005c86 <_dtoa_r+0x346>
 8005cde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ce0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 80b7 	beq.w	8005e58 <_dtoa_r+0x518>
 8005cea:	4b86      	ldr	r3, [pc, #536]	@ (8005f04 <_dtoa_r+0x5c4>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	f7fa fefb 	bl	8000aec <__aeabi_dcmplt>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	f000 80ae 	beq.w	8005e58 <_dtoa_r+0x518>
 8005cfc:	9b07      	ldr	r3, [sp, #28]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 80aa 	beq.w	8005e58 <_dtoa_r+0x518>
 8005d04:	9b00      	ldr	r3, [sp, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	dd37      	ble.n	8005d7a <_dtoa_r+0x43a>
 8005d0a:	1e7b      	subs	r3, r7, #1
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	4620      	mov	r0, r4
 8005d10:	4b7d      	ldr	r3, [pc, #500]	@ (8005f08 <_dtoa_r+0x5c8>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	4629      	mov	r1, r5
 8005d16:	f7fa fc77 	bl	8000608 <__aeabi_dmul>
 8005d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d1e:	9c00      	ldr	r4, [sp, #0]
 8005d20:	3601      	adds	r6, #1
 8005d22:	4630      	mov	r0, r6
 8005d24:	f7fa fc06 	bl	8000534 <__aeabi_i2d>
 8005d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d2c:	f7fa fc6c 	bl	8000608 <__aeabi_dmul>
 8005d30:	4b76      	ldr	r3, [pc, #472]	@ (8005f0c <_dtoa_r+0x5cc>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	f7fa fab2 	bl	800029c <__adddf3>
 8005d38:	4605      	mov	r5, r0
 8005d3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005d3e:	2c00      	cmp	r4, #0
 8005d40:	f040 808d 	bne.w	8005e5e <_dtoa_r+0x51e>
 8005d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d48:	4b71      	ldr	r3, [pc, #452]	@ (8005f10 <_dtoa_r+0x5d0>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f7fa faa4 	bl	8000298 <__aeabi_dsub>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d58:	462a      	mov	r2, r5
 8005d5a:	4633      	mov	r3, r6
 8005d5c:	f7fa fee4 	bl	8000b28 <__aeabi_dcmpgt>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	f040 828b 	bne.w	800627c <_dtoa_r+0x93c>
 8005d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d6a:	462a      	mov	r2, r5
 8005d6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d70:	f7fa febc 	bl	8000aec <__aeabi_dcmplt>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	f040 8128 	bne.w	8005fca <_dtoa_r+0x68a>
 8005d7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005d7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005d82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f2c0 815a 	blt.w	800603e <_dtoa_r+0x6fe>
 8005d8a:	2f0e      	cmp	r7, #14
 8005d8c:	f300 8157 	bgt.w	800603e <_dtoa_r+0x6fe>
 8005d90:	4b5a      	ldr	r3, [pc, #360]	@ (8005efc <_dtoa_r+0x5bc>)
 8005d92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d96:	ed93 7b00 	vldr	d7, [r3]
 8005d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	ed8d 7b00 	vstr	d7, [sp]
 8005da2:	da03      	bge.n	8005dac <_dtoa_r+0x46c>
 8005da4:	9b07      	ldr	r3, [sp, #28]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f340 8101 	ble.w	8005fae <_dtoa_r+0x66e>
 8005dac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005db0:	4656      	mov	r6, sl
 8005db2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005db6:	4620      	mov	r0, r4
 8005db8:	4629      	mov	r1, r5
 8005dba:	f7fa fd4f 	bl	800085c <__aeabi_ddiv>
 8005dbe:	f7fa fed3 	bl	8000b68 <__aeabi_d2iz>
 8005dc2:	4680      	mov	r8, r0
 8005dc4:	f7fa fbb6 	bl	8000534 <__aeabi_i2d>
 8005dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dcc:	f7fa fc1c 	bl	8000608 <__aeabi_dmul>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005ddc:	f7fa fa5c 	bl	8000298 <__aeabi_dsub>
 8005de0:	f806 4b01 	strb.w	r4, [r6], #1
 8005de4:	9d07      	ldr	r5, [sp, #28]
 8005de6:	eba6 040a 	sub.w	r4, r6, sl
 8005dea:	42a5      	cmp	r5, r4
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	f040 8117 	bne.w	8006022 <_dtoa_r+0x6e2>
 8005df4:	f7fa fa52 	bl	800029c <__adddf3>
 8005df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	460d      	mov	r5, r1
 8005e00:	f7fa fe92 	bl	8000b28 <__aeabi_dcmpgt>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	f040 80f9 	bne.w	8005ffc <_dtoa_r+0x6bc>
 8005e0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e0e:	4620      	mov	r0, r4
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7fa fe61 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e16:	b118      	cbz	r0, 8005e20 <_dtoa_r+0x4e0>
 8005e18:	f018 0f01 	tst.w	r8, #1
 8005e1c:	f040 80ee 	bne.w	8005ffc <_dtoa_r+0x6bc>
 8005e20:	4649      	mov	r1, r9
 8005e22:	4658      	mov	r0, fp
 8005e24:	f000 fbda 	bl	80065dc <_Bfree>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	7033      	strb	r3, [r6, #0]
 8005e2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005e2e:	3701      	adds	r7, #1
 8005e30:	601f      	str	r7, [r3, #0]
 8005e32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 831d 	beq.w	8006474 <_dtoa_r+0xb34>
 8005e3a:	601e      	str	r6, [r3, #0]
 8005e3c:	e31a      	b.n	8006474 <_dtoa_r+0xb34>
 8005e3e:	07e2      	lsls	r2, r4, #31
 8005e40:	d505      	bpl.n	8005e4e <_dtoa_r+0x50e>
 8005e42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e46:	f7fa fbdf 	bl	8000608 <__aeabi_dmul>
 8005e4a:	3601      	adds	r6, #1
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	1064      	asrs	r4, r4, #1
 8005e50:	3508      	adds	r5, #8
 8005e52:	e73f      	b.n	8005cd4 <_dtoa_r+0x394>
 8005e54:	2602      	movs	r6, #2
 8005e56:	e742      	b.n	8005cde <_dtoa_r+0x39e>
 8005e58:	9c07      	ldr	r4, [sp, #28]
 8005e5a:	9704      	str	r7, [sp, #16]
 8005e5c:	e761      	b.n	8005d22 <_dtoa_r+0x3e2>
 8005e5e:	4b27      	ldr	r3, [pc, #156]	@ (8005efc <_dtoa_r+0x5bc>)
 8005e60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e6a:	4454      	add	r4, sl
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	d053      	beq.n	8005f18 <_dtoa_r+0x5d8>
 8005e70:	4928      	ldr	r1, [pc, #160]	@ (8005f14 <_dtoa_r+0x5d4>)
 8005e72:	2000      	movs	r0, #0
 8005e74:	f7fa fcf2 	bl	800085c <__aeabi_ddiv>
 8005e78:	4633      	mov	r3, r6
 8005e7a:	462a      	mov	r2, r5
 8005e7c:	f7fa fa0c 	bl	8000298 <__aeabi_dsub>
 8005e80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e84:	4656      	mov	r6, sl
 8005e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e8a:	f7fa fe6d 	bl	8000b68 <__aeabi_d2iz>
 8005e8e:	4605      	mov	r5, r0
 8005e90:	f7fa fb50 	bl	8000534 <__aeabi_i2d>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e9c:	f7fa f9fc 	bl	8000298 <__aeabi_dsub>
 8005ea0:	3530      	adds	r5, #48	@ 0x30
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005eaa:	f806 5b01 	strb.w	r5, [r6], #1
 8005eae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005eb2:	f7fa fe1b 	bl	8000aec <__aeabi_dcmplt>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d171      	bne.n	8005f9e <_dtoa_r+0x65e>
 8005eba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ebe:	4911      	ldr	r1, [pc, #68]	@ (8005f04 <_dtoa_r+0x5c4>)
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	f7fa f9e9 	bl	8000298 <__aeabi_dsub>
 8005ec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005eca:	f7fa fe0f 	bl	8000aec <__aeabi_dcmplt>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	f040 8095 	bne.w	8005ffe <_dtoa_r+0x6be>
 8005ed4:	42a6      	cmp	r6, r4
 8005ed6:	f43f af50 	beq.w	8005d7a <_dtoa_r+0x43a>
 8005eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ede:	4b0a      	ldr	r3, [pc, #40]	@ (8005f08 <_dtoa_r+0x5c8>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f7fa fb91 	bl	8000608 <__aeabi_dmul>
 8005ee6:	4b08      	ldr	r3, [pc, #32]	@ (8005f08 <_dtoa_r+0x5c8>)
 8005ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005eec:	2200      	movs	r2, #0
 8005eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ef2:	f7fa fb89 	bl	8000608 <__aeabi_dmul>
 8005ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005efa:	e7c4      	b.n	8005e86 <_dtoa_r+0x546>
 8005efc:	080078f8 	.word	0x080078f8
 8005f00:	080078d0 	.word	0x080078d0
 8005f04:	3ff00000 	.word	0x3ff00000
 8005f08:	40240000 	.word	0x40240000
 8005f0c:	401c0000 	.word	0x401c0000
 8005f10:	40140000 	.word	0x40140000
 8005f14:	3fe00000 	.word	0x3fe00000
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f7fa fb74 	bl	8000608 <__aeabi_dmul>
 8005f20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f24:	9415      	str	r4, [sp, #84]	@ 0x54
 8005f26:	4656      	mov	r6, sl
 8005f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f2c:	f7fa fe1c 	bl	8000b68 <__aeabi_d2iz>
 8005f30:	4605      	mov	r5, r0
 8005f32:	f7fa faff 	bl	8000534 <__aeabi_i2d>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f3e:	f7fa f9ab 	bl	8000298 <__aeabi_dsub>
 8005f42:	3530      	adds	r5, #48	@ 0x30
 8005f44:	f806 5b01 	strb.w	r5, [r6], #1
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	42a6      	cmp	r6, r4
 8005f4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	d124      	bne.n	8005fa2 <_dtoa_r+0x662>
 8005f58:	4bac      	ldr	r3, [pc, #688]	@ (800620c <_dtoa_r+0x8cc>)
 8005f5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005f5e:	f7fa f99d 	bl	800029c <__adddf3>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f6a:	f7fa fddd 	bl	8000b28 <__aeabi_dcmpgt>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d145      	bne.n	8005ffe <_dtoa_r+0x6be>
 8005f72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f76:	49a5      	ldr	r1, [pc, #660]	@ (800620c <_dtoa_r+0x8cc>)
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f7fa f98d 	bl	8000298 <__aeabi_dsub>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f86:	f7fa fdb1 	bl	8000aec <__aeabi_dcmplt>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	f43f aef5 	beq.w	8005d7a <_dtoa_r+0x43a>
 8005f90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005f92:	1e73      	subs	r3, r6, #1
 8005f94:	9315      	str	r3, [sp, #84]	@ 0x54
 8005f96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005f9a:	2b30      	cmp	r3, #48	@ 0x30
 8005f9c:	d0f8      	beq.n	8005f90 <_dtoa_r+0x650>
 8005f9e:	9f04      	ldr	r7, [sp, #16]
 8005fa0:	e73e      	b.n	8005e20 <_dtoa_r+0x4e0>
 8005fa2:	4b9b      	ldr	r3, [pc, #620]	@ (8006210 <_dtoa_r+0x8d0>)
 8005fa4:	f7fa fb30 	bl	8000608 <__aeabi_dmul>
 8005fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fac:	e7bc      	b.n	8005f28 <_dtoa_r+0x5e8>
 8005fae:	d10c      	bne.n	8005fca <_dtoa_r+0x68a>
 8005fb0:	4b98      	ldr	r3, [pc, #608]	@ (8006214 <_dtoa_r+0x8d4>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fb8:	f7fa fb26 	bl	8000608 <__aeabi_dmul>
 8005fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fc0:	f7fa fda8 	bl	8000b14 <__aeabi_dcmpge>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f000 8157 	beq.w	8006278 <_dtoa_r+0x938>
 8005fca:	2400      	movs	r4, #0
 8005fcc:	4625      	mov	r5, r4
 8005fce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	9304      	str	r3, [sp, #16]
 8005fd4:	4656      	mov	r6, sl
 8005fd6:	2700      	movs	r7, #0
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4658      	mov	r0, fp
 8005fdc:	f000 fafe 	bl	80065dc <_Bfree>
 8005fe0:	2d00      	cmp	r5, #0
 8005fe2:	d0dc      	beq.n	8005f9e <_dtoa_r+0x65e>
 8005fe4:	b12f      	cbz	r7, 8005ff2 <_dtoa_r+0x6b2>
 8005fe6:	42af      	cmp	r7, r5
 8005fe8:	d003      	beq.n	8005ff2 <_dtoa_r+0x6b2>
 8005fea:	4639      	mov	r1, r7
 8005fec:	4658      	mov	r0, fp
 8005fee:	f000 faf5 	bl	80065dc <_Bfree>
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	4658      	mov	r0, fp
 8005ff6:	f000 faf1 	bl	80065dc <_Bfree>
 8005ffa:	e7d0      	b.n	8005f9e <_dtoa_r+0x65e>
 8005ffc:	9704      	str	r7, [sp, #16]
 8005ffe:	4633      	mov	r3, r6
 8006000:	461e      	mov	r6, r3
 8006002:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006006:	2a39      	cmp	r2, #57	@ 0x39
 8006008:	d107      	bne.n	800601a <_dtoa_r+0x6da>
 800600a:	459a      	cmp	sl, r3
 800600c:	d1f8      	bne.n	8006000 <_dtoa_r+0x6c0>
 800600e:	9a04      	ldr	r2, [sp, #16]
 8006010:	3201      	adds	r2, #1
 8006012:	9204      	str	r2, [sp, #16]
 8006014:	2230      	movs	r2, #48	@ 0x30
 8006016:	f88a 2000 	strb.w	r2, [sl]
 800601a:	781a      	ldrb	r2, [r3, #0]
 800601c:	3201      	adds	r2, #1
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e7bd      	b.n	8005f9e <_dtoa_r+0x65e>
 8006022:	4b7b      	ldr	r3, [pc, #492]	@ (8006210 <_dtoa_r+0x8d0>)
 8006024:	2200      	movs	r2, #0
 8006026:	f7fa faef 	bl	8000608 <__aeabi_dmul>
 800602a:	2200      	movs	r2, #0
 800602c:	2300      	movs	r3, #0
 800602e:	4604      	mov	r4, r0
 8006030:	460d      	mov	r5, r1
 8006032:	f7fa fd51 	bl	8000ad8 <__aeabi_dcmpeq>
 8006036:	2800      	cmp	r0, #0
 8006038:	f43f aebb 	beq.w	8005db2 <_dtoa_r+0x472>
 800603c:	e6f0      	b.n	8005e20 <_dtoa_r+0x4e0>
 800603e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006040:	2a00      	cmp	r2, #0
 8006042:	f000 80db 	beq.w	80061fc <_dtoa_r+0x8bc>
 8006046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006048:	2a01      	cmp	r2, #1
 800604a:	f300 80bf 	bgt.w	80061cc <_dtoa_r+0x88c>
 800604e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006050:	2a00      	cmp	r2, #0
 8006052:	f000 80b7 	beq.w	80061c4 <_dtoa_r+0x884>
 8006056:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800605a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800605c:	4646      	mov	r6, r8
 800605e:	9a08      	ldr	r2, [sp, #32]
 8006060:	2101      	movs	r1, #1
 8006062:	441a      	add	r2, r3
 8006064:	4658      	mov	r0, fp
 8006066:	4498      	add	r8, r3
 8006068:	9208      	str	r2, [sp, #32]
 800606a:	f000 fb6b 	bl	8006744 <__i2b>
 800606e:	4605      	mov	r5, r0
 8006070:	b15e      	cbz	r6, 800608a <_dtoa_r+0x74a>
 8006072:	9b08      	ldr	r3, [sp, #32]
 8006074:	2b00      	cmp	r3, #0
 8006076:	dd08      	ble.n	800608a <_dtoa_r+0x74a>
 8006078:	42b3      	cmp	r3, r6
 800607a:	9a08      	ldr	r2, [sp, #32]
 800607c:	bfa8      	it	ge
 800607e:	4633      	movge	r3, r6
 8006080:	eba8 0803 	sub.w	r8, r8, r3
 8006084:	1af6      	subs	r6, r6, r3
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	9308      	str	r3, [sp, #32]
 800608a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800608c:	b1f3      	cbz	r3, 80060cc <_dtoa_r+0x78c>
 800608e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 80b7 	beq.w	8006204 <_dtoa_r+0x8c4>
 8006096:	b18c      	cbz	r4, 80060bc <_dtoa_r+0x77c>
 8006098:	4629      	mov	r1, r5
 800609a:	4622      	mov	r2, r4
 800609c:	4658      	mov	r0, fp
 800609e:	f000 fc11 	bl	80068c4 <__pow5mult>
 80060a2:	464a      	mov	r2, r9
 80060a4:	4601      	mov	r1, r0
 80060a6:	4605      	mov	r5, r0
 80060a8:	4658      	mov	r0, fp
 80060aa:	f000 fb61 	bl	8006770 <__multiply>
 80060ae:	4649      	mov	r1, r9
 80060b0:	9004      	str	r0, [sp, #16]
 80060b2:	4658      	mov	r0, fp
 80060b4:	f000 fa92 	bl	80065dc <_Bfree>
 80060b8:	9b04      	ldr	r3, [sp, #16]
 80060ba:	4699      	mov	r9, r3
 80060bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060be:	1b1a      	subs	r2, r3, r4
 80060c0:	d004      	beq.n	80060cc <_dtoa_r+0x78c>
 80060c2:	4649      	mov	r1, r9
 80060c4:	4658      	mov	r0, fp
 80060c6:	f000 fbfd 	bl	80068c4 <__pow5mult>
 80060ca:	4681      	mov	r9, r0
 80060cc:	2101      	movs	r1, #1
 80060ce:	4658      	mov	r0, fp
 80060d0:	f000 fb38 	bl	8006744 <__i2b>
 80060d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060d6:	4604      	mov	r4, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 81cf 	beq.w	800647c <_dtoa_r+0xb3c>
 80060de:	461a      	mov	r2, r3
 80060e0:	4601      	mov	r1, r0
 80060e2:	4658      	mov	r0, fp
 80060e4:	f000 fbee 	bl	80068c4 <__pow5mult>
 80060e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	4604      	mov	r4, r0
 80060ee:	f300 8095 	bgt.w	800621c <_dtoa_r+0x8dc>
 80060f2:	9b02      	ldr	r3, [sp, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f040 8087 	bne.w	8006208 <_dtoa_r+0x8c8>
 80060fa:	9b03      	ldr	r3, [sp, #12]
 80060fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 8089 	bne.w	8006218 <_dtoa_r+0x8d8>
 8006106:	9b03      	ldr	r3, [sp, #12]
 8006108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800610c:	0d1b      	lsrs	r3, r3, #20
 800610e:	051b      	lsls	r3, r3, #20
 8006110:	b12b      	cbz	r3, 800611e <_dtoa_r+0x7de>
 8006112:	9b08      	ldr	r3, [sp, #32]
 8006114:	3301      	adds	r3, #1
 8006116:	9308      	str	r3, [sp, #32]
 8006118:	f108 0801 	add.w	r8, r8, #1
 800611c:	2301      	movs	r3, #1
 800611e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 81b0 	beq.w	8006488 <_dtoa_r+0xb48>
 8006128:	6923      	ldr	r3, [r4, #16]
 800612a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800612e:	6918      	ldr	r0, [r3, #16]
 8006130:	f000 fabc 	bl	80066ac <__hi0bits>
 8006134:	f1c0 0020 	rsb	r0, r0, #32
 8006138:	9b08      	ldr	r3, [sp, #32]
 800613a:	4418      	add	r0, r3
 800613c:	f010 001f 	ands.w	r0, r0, #31
 8006140:	d077      	beq.n	8006232 <_dtoa_r+0x8f2>
 8006142:	f1c0 0320 	rsb	r3, r0, #32
 8006146:	2b04      	cmp	r3, #4
 8006148:	dd6b      	ble.n	8006222 <_dtoa_r+0x8e2>
 800614a:	9b08      	ldr	r3, [sp, #32]
 800614c:	f1c0 001c 	rsb	r0, r0, #28
 8006150:	4403      	add	r3, r0
 8006152:	4480      	add	r8, r0
 8006154:	4406      	add	r6, r0
 8006156:	9308      	str	r3, [sp, #32]
 8006158:	f1b8 0f00 	cmp.w	r8, #0
 800615c:	dd05      	ble.n	800616a <_dtoa_r+0x82a>
 800615e:	4649      	mov	r1, r9
 8006160:	4642      	mov	r2, r8
 8006162:	4658      	mov	r0, fp
 8006164:	f000 fc08 	bl	8006978 <__lshift>
 8006168:	4681      	mov	r9, r0
 800616a:	9b08      	ldr	r3, [sp, #32]
 800616c:	2b00      	cmp	r3, #0
 800616e:	dd05      	ble.n	800617c <_dtoa_r+0x83c>
 8006170:	4621      	mov	r1, r4
 8006172:	461a      	mov	r2, r3
 8006174:	4658      	mov	r0, fp
 8006176:	f000 fbff 	bl	8006978 <__lshift>
 800617a:	4604      	mov	r4, r0
 800617c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800617e:	2b00      	cmp	r3, #0
 8006180:	d059      	beq.n	8006236 <_dtoa_r+0x8f6>
 8006182:	4621      	mov	r1, r4
 8006184:	4648      	mov	r0, r9
 8006186:	f000 fc63 	bl	8006a50 <__mcmp>
 800618a:	2800      	cmp	r0, #0
 800618c:	da53      	bge.n	8006236 <_dtoa_r+0x8f6>
 800618e:	1e7b      	subs	r3, r7, #1
 8006190:	9304      	str	r3, [sp, #16]
 8006192:	4649      	mov	r1, r9
 8006194:	2300      	movs	r3, #0
 8006196:	220a      	movs	r2, #10
 8006198:	4658      	mov	r0, fp
 800619a:	f000 fa41 	bl	8006620 <__multadd>
 800619e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061a0:	4681      	mov	r9, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 8172 	beq.w	800648c <_dtoa_r+0xb4c>
 80061a8:	2300      	movs	r3, #0
 80061aa:	4629      	mov	r1, r5
 80061ac:	220a      	movs	r2, #10
 80061ae:	4658      	mov	r0, fp
 80061b0:	f000 fa36 	bl	8006620 <__multadd>
 80061b4:	9b00      	ldr	r3, [sp, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	4605      	mov	r5, r0
 80061ba:	dc67      	bgt.n	800628c <_dtoa_r+0x94c>
 80061bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061be:	2b02      	cmp	r3, #2
 80061c0:	dc41      	bgt.n	8006246 <_dtoa_r+0x906>
 80061c2:	e063      	b.n	800628c <_dtoa_r+0x94c>
 80061c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80061c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80061ca:	e746      	b.n	800605a <_dtoa_r+0x71a>
 80061cc:	9b07      	ldr	r3, [sp, #28]
 80061ce:	1e5c      	subs	r4, r3, #1
 80061d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	bfbf      	itttt	lt
 80061d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80061d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80061da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80061dc:	1ae3      	sublt	r3, r4, r3
 80061de:	bfb4      	ite	lt
 80061e0:	18d2      	addlt	r2, r2, r3
 80061e2:	1b1c      	subge	r4, r3, r4
 80061e4:	9b07      	ldr	r3, [sp, #28]
 80061e6:	bfbc      	itt	lt
 80061e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80061ea:	2400      	movlt	r4, #0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	bfb5      	itete	lt
 80061f0:	eba8 0603 	sublt.w	r6, r8, r3
 80061f4:	9b07      	ldrge	r3, [sp, #28]
 80061f6:	2300      	movlt	r3, #0
 80061f8:	4646      	movge	r6, r8
 80061fa:	e730      	b.n	800605e <_dtoa_r+0x71e>
 80061fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80061fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006200:	4646      	mov	r6, r8
 8006202:	e735      	b.n	8006070 <_dtoa_r+0x730>
 8006204:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006206:	e75c      	b.n	80060c2 <_dtoa_r+0x782>
 8006208:	2300      	movs	r3, #0
 800620a:	e788      	b.n	800611e <_dtoa_r+0x7de>
 800620c:	3fe00000 	.word	0x3fe00000
 8006210:	40240000 	.word	0x40240000
 8006214:	40140000 	.word	0x40140000
 8006218:	9b02      	ldr	r3, [sp, #8]
 800621a:	e780      	b.n	800611e <_dtoa_r+0x7de>
 800621c:	2300      	movs	r3, #0
 800621e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006220:	e782      	b.n	8006128 <_dtoa_r+0x7e8>
 8006222:	d099      	beq.n	8006158 <_dtoa_r+0x818>
 8006224:	9a08      	ldr	r2, [sp, #32]
 8006226:	331c      	adds	r3, #28
 8006228:	441a      	add	r2, r3
 800622a:	4498      	add	r8, r3
 800622c:	441e      	add	r6, r3
 800622e:	9208      	str	r2, [sp, #32]
 8006230:	e792      	b.n	8006158 <_dtoa_r+0x818>
 8006232:	4603      	mov	r3, r0
 8006234:	e7f6      	b.n	8006224 <_dtoa_r+0x8e4>
 8006236:	9b07      	ldr	r3, [sp, #28]
 8006238:	9704      	str	r7, [sp, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	dc20      	bgt.n	8006280 <_dtoa_r+0x940>
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006242:	2b02      	cmp	r3, #2
 8006244:	dd1e      	ble.n	8006284 <_dtoa_r+0x944>
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	f47f aec0 	bne.w	8005fce <_dtoa_r+0x68e>
 800624e:	4621      	mov	r1, r4
 8006250:	2205      	movs	r2, #5
 8006252:	4658      	mov	r0, fp
 8006254:	f000 f9e4 	bl	8006620 <__multadd>
 8006258:	4601      	mov	r1, r0
 800625a:	4604      	mov	r4, r0
 800625c:	4648      	mov	r0, r9
 800625e:	f000 fbf7 	bl	8006a50 <__mcmp>
 8006262:	2800      	cmp	r0, #0
 8006264:	f77f aeb3 	ble.w	8005fce <_dtoa_r+0x68e>
 8006268:	4656      	mov	r6, sl
 800626a:	2331      	movs	r3, #49	@ 0x31
 800626c:	f806 3b01 	strb.w	r3, [r6], #1
 8006270:	9b04      	ldr	r3, [sp, #16]
 8006272:	3301      	adds	r3, #1
 8006274:	9304      	str	r3, [sp, #16]
 8006276:	e6ae      	b.n	8005fd6 <_dtoa_r+0x696>
 8006278:	9c07      	ldr	r4, [sp, #28]
 800627a:	9704      	str	r7, [sp, #16]
 800627c:	4625      	mov	r5, r4
 800627e:	e7f3      	b.n	8006268 <_dtoa_r+0x928>
 8006280:	9b07      	ldr	r3, [sp, #28]
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 8104 	beq.w	8006494 <_dtoa_r+0xb54>
 800628c:	2e00      	cmp	r6, #0
 800628e:	dd05      	ble.n	800629c <_dtoa_r+0x95c>
 8006290:	4629      	mov	r1, r5
 8006292:	4632      	mov	r2, r6
 8006294:	4658      	mov	r0, fp
 8006296:	f000 fb6f 	bl	8006978 <__lshift>
 800629a:	4605      	mov	r5, r0
 800629c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d05a      	beq.n	8006358 <_dtoa_r+0xa18>
 80062a2:	6869      	ldr	r1, [r5, #4]
 80062a4:	4658      	mov	r0, fp
 80062a6:	f000 f959 	bl	800655c <_Balloc>
 80062aa:	4606      	mov	r6, r0
 80062ac:	b928      	cbnz	r0, 80062ba <_dtoa_r+0x97a>
 80062ae:	4b84      	ldr	r3, [pc, #528]	@ (80064c0 <_dtoa_r+0xb80>)
 80062b0:	4602      	mov	r2, r0
 80062b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80062b6:	f7ff bb5a 	b.w	800596e <_dtoa_r+0x2e>
 80062ba:	692a      	ldr	r2, [r5, #16]
 80062bc:	3202      	adds	r2, #2
 80062be:	0092      	lsls	r2, r2, #2
 80062c0:	f105 010c 	add.w	r1, r5, #12
 80062c4:	300c      	adds	r0, #12
 80062c6:	f000 ff4d 	bl	8007164 <memcpy>
 80062ca:	2201      	movs	r2, #1
 80062cc:	4631      	mov	r1, r6
 80062ce:	4658      	mov	r0, fp
 80062d0:	f000 fb52 	bl	8006978 <__lshift>
 80062d4:	f10a 0301 	add.w	r3, sl, #1
 80062d8:	9307      	str	r3, [sp, #28]
 80062da:	9b00      	ldr	r3, [sp, #0]
 80062dc:	4453      	add	r3, sl
 80062de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062e0:	9b02      	ldr	r3, [sp, #8]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	462f      	mov	r7, r5
 80062e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80062ea:	4605      	mov	r5, r0
 80062ec:	9b07      	ldr	r3, [sp, #28]
 80062ee:	4621      	mov	r1, r4
 80062f0:	3b01      	subs	r3, #1
 80062f2:	4648      	mov	r0, r9
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	f7ff fa98 	bl	800582a <quorem>
 80062fa:	4639      	mov	r1, r7
 80062fc:	9002      	str	r0, [sp, #8]
 80062fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006302:	4648      	mov	r0, r9
 8006304:	f000 fba4 	bl	8006a50 <__mcmp>
 8006308:	462a      	mov	r2, r5
 800630a:	9008      	str	r0, [sp, #32]
 800630c:	4621      	mov	r1, r4
 800630e:	4658      	mov	r0, fp
 8006310:	f000 fbba 	bl	8006a88 <__mdiff>
 8006314:	68c2      	ldr	r2, [r0, #12]
 8006316:	4606      	mov	r6, r0
 8006318:	bb02      	cbnz	r2, 800635c <_dtoa_r+0xa1c>
 800631a:	4601      	mov	r1, r0
 800631c:	4648      	mov	r0, r9
 800631e:	f000 fb97 	bl	8006a50 <__mcmp>
 8006322:	4602      	mov	r2, r0
 8006324:	4631      	mov	r1, r6
 8006326:	4658      	mov	r0, fp
 8006328:	920e      	str	r2, [sp, #56]	@ 0x38
 800632a:	f000 f957 	bl	80065dc <_Bfree>
 800632e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006330:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006332:	9e07      	ldr	r6, [sp, #28]
 8006334:	ea43 0102 	orr.w	r1, r3, r2
 8006338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800633a:	4319      	orrs	r1, r3
 800633c:	d110      	bne.n	8006360 <_dtoa_r+0xa20>
 800633e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006342:	d029      	beq.n	8006398 <_dtoa_r+0xa58>
 8006344:	9b08      	ldr	r3, [sp, #32]
 8006346:	2b00      	cmp	r3, #0
 8006348:	dd02      	ble.n	8006350 <_dtoa_r+0xa10>
 800634a:	9b02      	ldr	r3, [sp, #8]
 800634c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006350:	9b00      	ldr	r3, [sp, #0]
 8006352:	f883 8000 	strb.w	r8, [r3]
 8006356:	e63f      	b.n	8005fd8 <_dtoa_r+0x698>
 8006358:	4628      	mov	r0, r5
 800635a:	e7bb      	b.n	80062d4 <_dtoa_r+0x994>
 800635c:	2201      	movs	r2, #1
 800635e:	e7e1      	b.n	8006324 <_dtoa_r+0x9e4>
 8006360:	9b08      	ldr	r3, [sp, #32]
 8006362:	2b00      	cmp	r3, #0
 8006364:	db04      	blt.n	8006370 <_dtoa_r+0xa30>
 8006366:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006368:	430b      	orrs	r3, r1
 800636a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800636c:	430b      	orrs	r3, r1
 800636e:	d120      	bne.n	80063b2 <_dtoa_r+0xa72>
 8006370:	2a00      	cmp	r2, #0
 8006372:	dded      	ble.n	8006350 <_dtoa_r+0xa10>
 8006374:	4649      	mov	r1, r9
 8006376:	2201      	movs	r2, #1
 8006378:	4658      	mov	r0, fp
 800637a:	f000 fafd 	bl	8006978 <__lshift>
 800637e:	4621      	mov	r1, r4
 8006380:	4681      	mov	r9, r0
 8006382:	f000 fb65 	bl	8006a50 <__mcmp>
 8006386:	2800      	cmp	r0, #0
 8006388:	dc03      	bgt.n	8006392 <_dtoa_r+0xa52>
 800638a:	d1e1      	bne.n	8006350 <_dtoa_r+0xa10>
 800638c:	f018 0f01 	tst.w	r8, #1
 8006390:	d0de      	beq.n	8006350 <_dtoa_r+0xa10>
 8006392:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006396:	d1d8      	bne.n	800634a <_dtoa_r+0xa0a>
 8006398:	9a00      	ldr	r2, [sp, #0]
 800639a:	2339      	movs	r3, #57	@ 0x39
 800639c:	7013      	strb	r3, [r2, #0]
 800639e:	4633      	mov	r3, r6
 80063a0:	461e      	mov	r6, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80063a8:	2a39      	cmp	r2, #57	@ 0x39
 80063aa:	d052      	beq.n	8006452 <_dtoa_r+0xb12>
 80063ac:	3201      	adds	r2, #1
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	e612      	b.n	8005fd8 <_dtoa_r+0x698>
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	dd07      	ble.n	80063c6 <_dtoa_r+0xa86>
 80063b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80063ba:	d0ed      	beq.n	8006398 <_dtoa_r+0xa58>
 80063bc:	9a00      	ldr	r2, [sp, #0]
 80063be:	f108 0301 	add.w	r3, r8, #1
 80063c2:	7013      	strb	r3, [r2, #0]
 80063c4:	e608      	b.n	8005fd8 <_dtoa_r+0x698>
 80063c6:	9b07      	ldr	r3, [sp, #28]
 80063c8:	9a07      	ldr	r2, [sp, #28]
 80063ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80063ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d028      	beq.n	8006426 <_dtoa_r+0xae6>
 80063d4:	4649      	mov	r1, r9
 80063d6:	2300      	movs	r3, #0
 80063d8:	220a      	movs	r2, #10
 80063da:	4658      	mov	r0, fp
 80063dc:	f000 f920 	bl	8006620 <__multadd>
 80063e0:	42af      	cmp	r7, r5
 80063e2:	4681      	mov	r9, r0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	f04f 020a 	mov.w	r2, #10
 80063ec:	4639      	mov	r1, r7
 80063ee:	4658      	mov	r0, fp
 80063f0:	d107      	bne.n	8006402 <_dtoa_r+0xac2>
 80063f2:	f000 f915 	bl	8006620 <__multadd>
 80063f6:	4607      	mov	r7, r0
 80063f8:	4605      	mov	r5, r0
 80063fa:	9b07      	ldr	r3, [sp, #28]
 80063fc:	3301      	adds	r3, #1
 80063fe:	9307      	str	r3, [sp, #28]
 8006400:	e774      	b.n	80062ec <_dtoa_r+0x9ac>
 8006402:	f000 f90d 	bl	8006620 <__multadd>
 8006406:	4629      	mov	r1, r5
 8006408:	4607      	mov	r7, r0
 800640a:	2300      	movs	r3, #0
 800640c:	220a      	movs	r2, #10
 800640e:	4658      	mov	r0, fp
 8006410:	f000 f906 	bl	8006620 <__multadd>
 8006414:	4605      	mov	r5, r0
 8006416:	e7f0      	b.n	80063fa <_dtoa_r+0xaba>
 8006418:	9b00      	ldr	r3, [sp, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfcc      	ite	gt
 800641e:	461e      	movgt	r6, r3
 8006420:	2601      	movle	r6, #1
 8006422:	4456      	add	r6, sl
 8006424:	2700      	movs	r7, #0
 8006426:	4649      	mov	r1, r9
 8006428:	2201      	movs	r2, #1
 800642a:	4658      	mov	r0, fp
 800642c:	f000 faa4 	bl	8006978 <__lshift>
 8006430:	4621      	mov	r1, r4
 8006432:	4681      	mov	r9, r0
 8006434:	f000 fb0c 	bl	8006a50 <__mcmp>
 8006438:	2800      	cmp	r0, #0
 800643a:	dcb0      	bgt.n	800639e <_dtoa_r+0xa5e>
 800643c:	d102      	bne.n	8006444 <_dtoa_r+0xb04>
 800643e:	f018 0f01 	tst.w	r8, #1
 8006442:	d1ac      	bne.n	800639e <_dtoa_r+0xa5e>
 8006444:	4633      	mov	r3, r6
 8006446:	461e      	mov	r6, r3
 8006448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800644c:	2a30      	cmp	r2, #48	@ 0x30
 800644e:	d0fa      	beq.n	8006446 <_dtoa_r+0xb06>
 8006450:	e5c2      	b.n	8005fd8 <_dtoa_r+0x698>
 8006452:	459a      	cmp	sl, r3
 8006454:	d1a4      	bne.n	80063a0 <_dtoa_r+0xa60>
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	3301      	adds	r3, #1
 800645a:	9304      	str	r3, [sp, #16]
 800645c:	2331      	movs	r3, #49	@ 0x31
 800645e:	f88a 3000 	strb.w	r3, [sl]
 8006462:	e5b9      	b.n	8005fd8 <_dtoa_r+0x698>
 8006464:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006466:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80064c4 <_dtoa_r+0xb84>
 800646a:	b11b      	cbz	r3, 8006474 <_dtoa_r+0xb34>
 800646c:	f10a 0308 	add.w	r3, sl, #8
 8006470:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	4650      	mov	r0, sl
 8006476:	b019      	add	sp, #100	@ 0x64
 8006478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800647e:	2b01      	cmp	r3, #1
 8006480:	f77f ae37 	ble.w	80060f2 <_dtoa_r+0x7b2>
 8006484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006486:	930a      	str	r3, [sp, #40]	@ 0x28
 8006488:	2001      	movs	r0, #1
 800648a:	e655      	b.n	8006138 <_dtoa_r+0x7f8>
 800648c:	9b00      	ldr	r3, [sp, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f77f aed6 	ble.w	8006240 <_dtoa_r+0x900>
 8006494:	4656      	mov	r6, sl
 8006496:	4621      	mov	r1, r4
 8006498:	4648      	mov	r0, r9
 800649a:	f7ff f9c6 	bl	800582a <quorem>
 800649e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80064a2:	f806 8b01 	strb.w	r8, [r6], #1
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	eba6 020a 	sub.w	r2, r6, sl
 80064ac:	4293      	cmp	r3, r2
 80064ae:	ddb3      	ble.n	8006418 <_dtoa_r+0xad8>
 80064b0:	4649      	mov	r1, r9
 80064b2:	2300      	movs	r3, #0
 80064b4:	220a      	movs	r2, #10
 80064b6:	4658      	mov	r0, fp
 80064b8:	f000 f8b2 	bl	8006620 <__multadd>
 80064bc:	4681      	mov	r9, r0
 80064be:	e7ea      	b.n	8006496 <_dtoa_r+0xb56>
 80064c0:	08007858 	.word	0x08007858
 80064c4:	080077dc 	.word	0x080077dc

080064c8 <_free_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4605      	mov	r5, r0
 80064cc:	2900      	cmp	r1, #0
 80064ce:	d041      	beq.n	8006554 <_free_r+0x8c>
 80064d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064d4:	1f0c      	subs	r4, r1, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	bfb8      	it	lt
 80064da:	18e4      	addlt	r4, r4, r3
 80064dc:	f7fe fb80 	bl	8004be0 <__malloc_lock>
 80064e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006558 <_free_r+0x90>)
 80064e2:	6813      	ldr	r3, [r2, #0]
 80064e4:	b933      	cbnz	r3, 80064f4 <_free_r+0x2c>
 80064e6:	6063      	str	r3, [r4, #4]
 80064e8:	6014      	str	r4, [r2, #0]
 80064ea:	4628      	mov	r0, r5
 80064ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064f0:	f7fe bb7c 	b.w	8004bec <__malloc_unlock>
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	d908      	bls.n	800650a <_free_r+0x42>
 80064f8:	6820      	ldr	r0, [r4, #0]
 80064fa:	1821      	adds	r1, r4, r0
 80064fc:	428b      	cmp	r3, r1
 80064fe:	bf01      	itttt	eq
 8006500:	6819      	ldreq	r1, [r3, #0]
 8006502:	685b      	ldreq	r3, [r3, #4]
 8006504:	1809      	addeq	r1, r1, r0
 8006506:	6021      	streq	r1, [r4, #0]
 8006508:	e7ed      	b.n	80064e6 <_free_r+0x1e>
 800650a:	461a      	mov	r2, r3
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	b10b      	cbz	r3, 8006514 <_free_r+0x4c>
 8006510:	42a3      	cmp	r3, r4
 8006512:	d9fa      	bls.n	800650a <_free_r+0x42>
 8006514:	6811      	ldr	r1, [r2, #0]
 8006516:	1850      	adds	r0, r2, r1
 8006518:	42a0      	cmp	r0, r4
 800651a:	d10b      	bne.n	8006534 <_free_r+0x6c>
 800651c:	6820      	ldr	r0, [r4, #0]
 800651e:	4401      	add	r1, r0
 8006520:	1850      	adds	r0, r2, r1
 8006522:	4283      	cmp	r3, r0
 8006524:	6011      	str	r1, [r2, #0]
 8006526:	d1e0      	bne.n	80064ea <_free_r+0x22>
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	6053      	str	r3, [r2, #4]
 800652e:	4408      	add	r0, r1
 8006530:	6010      	str	r0, [r2, #0]
 8006532:	e7da      	b.n	80064ea <_free_r+0x22>
 8006534:	d902      	bls.n	800653c <_free_r+0x74>
 8006536:	230c      	movs	r3, #12
 8006538:	602b      	str	r3, [r5, #0]
 800653a:	e7d6      	b.n	80064ea <_free_r+0x22>
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	1821      	adds	r1, r4, r0
 8006540:	428b      	cmp	r3, r1
 8006542:	bf04      	itt	eq
 8006544:	6819      	ldreq	r1, [r3, #0]
 8006546:	685b      	ldreq	r3, [r3, #4]
 8006548:	6063      	str	r3, [r4, #4]
 800654a:	bf04      	itt	eq
 800654c:	1809      	addeq	r1, r1, r0
 800654e:	6021      	streq	r1, [r4, #0]
 8006550:	6054      	str	r4, [r2, #4]
 8006552:	e7ca      	b.n	80064ea <_free_r+0x22>
 8006554:	bd38      	pop	{r3, r4, r5, pc}
 8006556:	bf00      	nop
 8006558:	200003d0 	.word	0x200003d0

0800655c <_Balloc>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	69c6      	ldr	r6, [r0, #28]
 8006560:	4604      	mov	r4, r0
 8006562:	460d      	mov	r5, r1
 8006564:	b976      	cbnz	r6, 8006584 <_Balloc+0x28>
 8006566:	2010      	movs	r0, #16
 8006568:	f7fe fa90 	bl	8004a8c <malloc>
 800656c:	4602      	mov	r2, r0
 800656e:	61e0      	str	r0, [r4, #28]
 8006570:	b920      	cbnz	r0, 800657c <_Balloc+0x20>
 8006572:	4b18      	ldr	r3, [pc, #96]	@ (80065d4 <_Balloc+0x78>)
 8006574:	4818      	ldr	r0, [pc, #96]	@ (80065d8 <_Balloc+0x7c>)
 8006576:	216b      	movs	r1, #107	@ 0x6b
 8006578:	f000 fe02 	bl	8007180 <__assert_func>
 800657c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006580:	6006      	str	r6, [r0, #0]
 8006582:	60c6      	str	r6, [r0, #12]
 8006584:	69e6      	ldr	r6, [r4, #28]
 8006586:	68f3      	ldr	r3, [r6, #12]
 8006588:	b183      	cbz	r3, 80065ac <_Balloc+0x50>
 800658a:	69e3      	ldr	r3, [r4, #28]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006592:	b9b8      	cbnz	r0, 80065c4 <_Balloc+0x68>
 8006594:	2101      	movs	r1, #1
 8006596:	fa01 f605 	lsl.w	r6, r1, r5
 800659a:	1d72      	adds	r2, r6, #5
 800659c:	0092      	lsls	r2, r2, #2
 800659e:	4620      	mov	r0, r4
 80065a0:	f7fe fa60 	bl	8004a64 <_calloc_r>
 80065a4:	b160      	cbz	r0, 80065c0 <_Balloc+0x64>
 80065a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065aa:	e00e      	b.n	80065ca <_Balloc+0x6e>
 80065ac:	2221      	movs	r2, #33	@ 0x21
 80065ae:	2104      	movs	r1, #4
 80065b0:	4620      	mov	r0, r4
 80065b2:	f7fe fa57 	bl	8004a64 <_calloc_r>
 80065b6:	69e3      	ldr	r3, [r4, #28]
 80065b8:	60f0      	str	r0, [r6, #12]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e4      	bne.n	800658a <_Balloc+0x2e>
 80065c0:	2000      	movs	r0, #0
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	6802      	ldr	r2, [r0, #0]
 80065c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065ca:	2300      	movs	r3, #0
 80065cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065d0:	e7f7      	b.n	80065c2 <_Balloc+0x66>
 80065d2:	bf00      	nop
 80065d4:	080077e9 	.word	0x080077e9
 80065d8:	08007869 	.word	0x08007869

080065dc <_Bfree>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	69c6      	ldr	r6, [r0, #28]
 80065e0:	4605      	mov	r5, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	b976      	cbnz	r6, 8006604 <_Bfree+0x28>
 80065e6:	2010      	movs	r0, #16
 80065e8:	f7fe fa50 	bl	8004a8c <malloc>
 80065ec:	4602      	mov	r2, r0
 80065ee:	61e8      	str	r0, [r5, #28]
 80065f0:	b920      	cbnz	r0, 80065fc <_Bfree+0x20>
 80065f2:	4b09      	ldr	r3, [pc, #36]	@ (8006618 <_Bfree+0x3c>)
 80065f4:	4809      	ldr	r0, [pc, #36]	@ (800661c <_Bfree+0x40>)
 80065f6:	218f      	movs	r1, #143	@ 0x8f
 80065f8:	f000 fdc2 	bl	8007180 <__assert_func>
 80065fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006600:	6006      	str	r6, [r0, #0]
 8006602:	60c6      	str	r6, [r0, #12]
 8006604:	b13c      	cbz	r4, 8006616 <_Bfree+0x3a>
 8006606:	69eb      	ldr	r3, [r5, #28]
 8006608:	6862      	ldr	r2, [r4, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006610:	6021      	str	r1, [r4, #0]
 8006612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	080077e9 	.word	0x080077e9
 800661c:	08007869 	.word	0x08007869

08006620 <__multadd>:
 8006620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006624:	690d      	ldr	r5, [r1, #16]
 8006626:	4607      	mov	r7, r0
 8006628:	460c      	mov	r4, r1
 800662a:	461e      	mov	r6, r3
 800662c:	f101 0c14 	add.w	ip, r1, #20
 8006630:	2000      	movs	r0, #0
 8006632:	f8dc 3000 	ldr.w	r3, [ip]
 8006636:	b299      	uxth	r1, r3
 8006638:	fb02 6101 	mla	r1, r2, r1, r6
 800663c:	0c1e      	lsrs	r6, r3, #16
 800663e:	0c0b      	lsrs	r3, r1, #16
 8006640:	fb02 3306 	mla	r3, r2, r6, r3
 8006644:	b289      	uxth	r1, r1
 8006646:	3001      	adds	r0, #1
 8006648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800664c:	4285      	cmp	r5, r0
 800664e:	f84c 1b04 	str.w	r1, [ip], #4
 8006652:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006656:	dcec      	bgt.n	8006632 <__multadd+0x12>
 8006658:	b30e      	cbz	r6, 800669e <__multadd+0x7e>
 800665a:	68a3      	ldr	r3, [r4, #8]
 800665c:	42ab      	cmp	r3, r5
 800665e:	dc19      	bgt.n	8006694 <__multadd+0x74>
 8006660:	6861      	ldr	r1, [r4, #4]
 8006662:	4638      	mov	r0, r7
 8006664:	3101      	adds	r1, #1
 8006666:	f7ff ff79 	bl	800655c <_Balloc>
 800666a:	4680      	mov	r8, r0
 800666c:	b928      	cbnz	r0, 800667a <__multadd+0x5a>
 800666e:	4602      	mov	r2, r0
 8006670:	4b0c      	ldr	r3, [pc, #48]	@ (80066a4 <__multadd+0x84>)
 8006672:	480d      	ldr	r0, [pc, #52]	@ (80066a8 <__multadd+0x88>)
 8006674:	21ba      	movs	r1, #186	@ 0xba
 8006676:	f000 fd83 	bl	8007180 <__assert_func>
 800667a:	6922      	ldr	r2, [r4, #16]
 800667c:	3202      	adds	r2, #2
 800667e:	f104 010c 	add.w	r1, r4, #12
 8006682:	0092      	lsls	r2, r2, #2
 8006684:	300c      	adds	r0, #12
 8006686:	f000 fd6d 	bl	8007164 <memcpy>
 800668a:	4621      	mov	r1, r4
 800668c:	4638      	mov	r0, r7
 800668e:	f7ff ffa5 	bl	80065dc <_Bfree>
 8006692:	4644      	mov	r4, r8
 8006694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006698:	3501      	adds	r5, #1
 800669a:	615e      	str	r6, [r3, #20]
 800669c:	6125      	str	r5, [r4, #16]
 800669e:	4620      	mov	r0, r4
 80066a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a4:	08007858 	.word	0x08007858
 80066a8:	08007869 	.word	0x08007869

080066ac <__hi0bits>:
 80066ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80066b0:	4603      	mov	r3, r0
 80066b2:	bf36      	itet	cc
 80066b4:	0403      	lslcc	r3, r0, #16
 80066b6:	2000      	movcs	r0, #0
 80066b8:	2010      	movcc	r0, #16
 80066ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066be:	bf3c      	itt	cc
 80066c0:	021b      	lslcc	r3, r3, #8
 80066c2:	3008      	addcc	r0, #8
 80066c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066c8:	bf3c      	itt	cc
 80066ca:	011b      	lslcc	r3, r3, #4
 80066cc:	3004      	addcc	r0, #4
 80066ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d2:	bf3c      	itt	cc
 80066d4:	009b      	lslcc	r3, r3, #2
 80066d6:	3002      	addcc	r0, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	db05      	blt.n	80066e8 <__hi0bits+0x3c>
 80066dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066e0:	f100 0001 	add.w	r0, r0, #1
 80066e4:	bf08      	it	eq
 80066e6:	2020      	moveq	r0, #32
 80066e8:	4770      	bx	lr

080066ea <__lo0bits>:
 80066ea:	6803      	ldr	r3, [r0, #0]
 80066ec:	4602      	mov	r2, r0
 80066ee:	f013 0007 	ands.w	r0, r3, #7
 80066f2:	d00b      	beq.n	800670c <__lo0bits+0x22>
 80066f4:	07d9      	lsls	r1, r3, #31
 80066f6:	d421      	bmi.n	800673c <__lo0bits+0x52>
 80066f8:	0798      	lsls	r0, r3, #30
 80066fa:	bf49      	itett	mi
 80066fc:	085b      	lsrmi	r3, r3, #1
 80066fe:	089b      	lsrpl	r3, r3, #2
 8006700:	2001      	movmi	r0, #1
 8006702:	6013      	strmi	r3, [r2, #0]
 8006704:	bf5c      	itt	pl
 8006706:	6013      	strpl	r3, [r2, #0]
 8006708:	2002      	movpl	r0, #2
 800670a:	4770      	bx	lr
 800670c:	b299      	uxth	r1, r3
 800670e:	b909      	cbnz	r1, 8006714 <__lo0bits+0x2a>
 8006710:	0c1b      	lsrs	r3, r3, #16
 8006712:	2010      	movs	r0, #16
 8006714:	b2d9      	uxtb	r1, r3
 8006716:	b909      	cbnz	r1, 800671c <__lo0bits+0x32>
 8006718:	3008      	adds	r0, #8
 800671a:	0a1b      	lsrs	r3, r3, #8
 800671c:	0719      	lsls	r1, r3, #28
 800671e:	bf04      	itt	eq
 8006720:	091b      	lsreq	r3, r3, #4
 8006722:	3004      	addeq	r0, #4
 8006724:	0799      	lsls	r1, r3, #30
 8006726:	bf04      	itt	eq
 8006728:	089b      	lsreq	r3, r3, #2
 800672a:	3002      	addeq	r0, #2
 800672c:	07d9      	lsls	r1, r3, #31
 800672e:	d403      	bmi.n	8006738 <__lo0bits+0x4e>
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	f100 0001 	add.w	r0, r0, #1
 8006736:	d003      	beq.n	8006740 <__lo0bits+0x56>
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	4770      	bx	lr
 800673c:	2000      	movs	r0, #0
 800673e:	4770      	bx	lr
 8006740:	2020      	movs	r0, #32
 8006742:	4770      	bx	lr

08006744 <__i2b>:
 8006744:	b510      	push	{r4, lr}
 8006746:	460c      	mov	r4, r1
 8006748:	2101      	movs	r1, #1
 800674a:	f7ff ff07 	bl	800655c <_Balloc>
 800674e:	4602      	mov	r2, r0
 8006750:	b928      	cbnz	r0, 800675e <__i2b+0x1a>
 8006752:	4b05      	ldr	r3, [pc, #20]	@ (8006768 <__i2b+0x24>)
 8006754:	4805      	ldr	r0, [pc, #20]	@ (800676c <__i2b+0x28>)
 8006756:	f240 1145 	movw	r1, #325	@ 0x145
 800675a:	f000 fd11 	bl	8007180 <__assert_func>
 800675e:	2301      	movs	r3, #1
 8006760:	6144      	str	r4, [r0, #20]
 8006762:	6103      	str	r3, [r0, #16]
 8006764:	bd10      	pop	{r4, pc}
 8006766:	bf00      	nop
 8006768:	08007858 	.word	0x08007858
 800676c:	08007869 	.word	0x08007869

08006770 <__multiply>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	4614      	mov	r4, r2
 8006776:	690a      	ldr	r2, [r1, #16]
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	429a      	cmp	r2, r3
 800677c:	bfa8      	it	ge
 800677e:	4623      	movge	r3, r4
 8006780:	460f      	mov	r7, r1
 8006782:	bfa4      	itt	ge
 8006784:	460c      	movge	r4, r1
 8006786:	461f      	movge	r7, r3
 8006788:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800678c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006790:	68a3      	ldr	r3, [r4, #8]
 8006792:	6861      	ldr	r1, [r4, #4]
 8006794:	eb0a 0609 	add.w	r6, sl, r9
 8006798:	42b3      	cmp	r3, r6
 800679a:	b085      	sub	sp, #20
 800679c:	bfb8      	it	lt
 800679e:	3101      	addlt	r1, #1
 80067a0:	f7ff fedc 	bl	800655c <_Balloc>
 80067a4:	b930      	cbnz	r0, 80067b4 <__multiply+0x44>
 80067a6:	4602      	mov	r2, r0
 80067a8:	4b44      	ldr	r3, [pc, #272]	@ (80068bc <__multiply+0x14c>)
 80067aa:	4845      	ldr	r0, [pc, #276]	@ (80068c0 <__multiply+0x150>)
 80067ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80067b0:	f000 fce6 	bl	8007180 <__assert_func>
 80067b4:	f100 0514 	add.w	r5, r0, #20
 80067b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067bc:	462b      	mov	r3, r5
 80067be:	2200      	movs	r2, #0
 80067c0:	4543      	cmp	r3, r8
 80067c2:	d321      	bcc.n	8006808 <__multiply+0x98>
 80067c4:	f107 0114 	add.w	r1, r7, #20
 80067c8:	f104 0214 	add.w	r2, r4, #20
 80067cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80067d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80067d4:	9302      	str	r3, [sp, #8]
 80067d6:	1b13      	subs	r3, r2, r4
 80067d8:	3b15      	subs	r3, #21
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	3304      	adds	r3, #4
 80067e0:	f104 0715 	add.w	r7, r4, #21
 80067e4:	42ba      	cmp	r2, r7
 80067e6:	bf38      	it	cc
 80067e8:	2304      	movcc	r3, #4
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	9b02      	ldr	r3, [sp, #8]
 80067ee:	9103      	str	r1, [sp, #12]
 80067f0:	428b      	cmp	r3, r1
 80067f2:	d80c      	bhi.n	800680e <__multiply+0x9e>
 80067f4:	2e00      	cmp	r6, #0
 80067f6:	dd03      	ble.n	8006800 <__multiply+0x90>
 80067f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d05b      	beq.n	80068b8 <__multiply+0x148>
 8006800:	6106      	str	r6, [r0, #16]
 8006802:	b005      	add	sp, #20
 8006804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006808:	f843 2b04 	str.w	r2, [r3], #4
 800680c:	e7d8      	b.n	80067c0 <__multiply+0x50>
 800680e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006812:	f1ba 0f00 	cmp.w	sl, #0
 8006816:	d024      	beq.n	8006862 <__multiply+0xf2>
 8006818:	f104 0e14 	add.w	lr, r4, #20
 800681c:	46a9      	mov	r9, r5
 800681e:	f04f 0c00 	mov.w	ip, #0
 8006822:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006826:	f8d9 3000 	ldr.w	r3, [r9]
 800682a:	fa1f fb87 	uxth.w	fp, r7
 800682e:	b29b      	uxth	r3, r3
 8006830:	fb0a 330b 	mla	r3, sl, fp, r3
 8006834:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006838:	f8d9 7000 	ldr.w	r7, [r9]
 800683c:	4463      	add	r3, ip
 800683e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006842:	fb0a c70b 	mla	r7, sl, fp, ip
 8006846:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800684a:	b29b      	uxth	r3, r3
 800684c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006850:	4572      	cmp	r2, lr
 8006852:	f849 3b04 	str.w	r3, [r9], #4
 8006856:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800685a:	d8e2      	bhi.n	8006822 <__multiply+0xb2>
 800685c:	9b01      	ldr	r3, [sp, #4]
 800685e:	f845 c003 	str.w	ip, [r5, r3]
 8006862:	9b03      	ldr	r3, [sp, #12]
 8006864:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006868:	3104      	adds	r1, #4
 800686a:	f1b9 0f00 	cmp.w	r9, #0
 800686e:	d021      	beq.n	80068b4 <__multiply+0x144>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	f104 0c14 	add.w	ip, r4, #20
 8006876:	46ae      	mov	lr, r5
 8006878:	f04f 0a00 	mov.w	sl, #0
 800687c:	f8bc b000 	ldrh.w	fp, [ip]
 8006880:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006884:	fb09 770b 	mla	r7, r9, fp, r7
 8006888:	4457      	add	r7, sl
 800688a:	b29b      	uxth	r3, r3
 800688c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006890:	f84e 3b04 	str.w	r3, [lr], #4
 8006894:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006898:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800689c:	f8be 3000 	ldrh.w	r3, [lr]
 80068a0:	fb09 330a 	mla	r3, r9, sl, r3
 80068a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80068a8:	4562      	cmp	r2, ip
 80068aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068ae:	d8e5      	bhi.n	800687c <__multiply+0x10c>
 80068b0:	9f01      	ldr	r7, [sp, #4]
 80068b2:	51eb      	str	r3, [r5, r7]
 80068b4:	3504      	adds	r5, #4
 80068b6:	e799      	b.n	80067ec <__multiply+0x7c>
 80068b8:	3e01      	subs	r6, #1
 80068ba:	e79b      	b.n	80067f4 <__multiply+0x84>
 80068bc:	08007858 	.word	0x08007858
 80068c0:	08007869 	.word	0x08007869

080068c4 <__pow5mult>:
 80068c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c8:	4615      	mov	r5, r2
 80068ca:	f012 0203 	ands.w	r2, r2, #3
 80068ce:	4607      	mov	r7, r0
 80068d0:	460e      	mov	r6, r1
 80068d2:	d007      	beq.n	80068e4 <__pow5mult+0x20>
 80068d4:	4c25      	ldr	r4, [pc, #148]	@ (800696c <__pow5mult+0xa8>)
 80068d6:	3a01      	subs	r2, #1
 80068d8:	2300      	movs	r3, #0
 80068da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068de:	f7ff fe9f 	bl	8006620 <__multadd>
 80068e2:	4606      	mov	r6, r0
 80068e4:	10ad      	asrs	r5, r5, #2
 80068e6:	d03d      	beq.n	8006964 <__pow5mult+0xa0>
 80068e8:	69fc      	ldr	r4, [r7, #28]
 80068ea:	b97c      	cbnz	r4, 800690c <__pow5mult+0x48>
 80068ec:	2010      	movs	r0, #16
 80068ee:	f7fe f8cd 	bl	8004a8c <malloc>
 80068f2:	4602      	mov	r2, r0
 80068f4:	61f8      	str	r0, [r7, #28]
 80068f6:	b928      	cbnz	r0, 8006904 <__pow5mult+0x40>
 80068f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006970 <__pow5mult+0xac>)
 80068fa:	481e      	ldr	r0, [pc, #120]	@ (8006974 <__pow5mult+0xb0>)
 80068fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006900:	f000 fc3e 	bl	8007180 <__assert_func>
 8006904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006908:	6004      	str	r4, [r0, #0]
 800690a:	60c4      	str	r4, [r0, #12]
 800690c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006910:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006914:	b94c      	cbnz	r4, 800692a <__pow5mult+0x66>
 8006916:	f240 2171 	movw	r1, #625	@ 0x271
 800691a:	4638      	mov	r0, r7
 800691c:	f7ff ff12 	bl	8006744 <__i2b>
 8006920:	2300      	movs	r3, #0
 8006922:	f8c8 0008 	str.w	r0, [r8, #8]
 8006926:	4604      	mov	r4, r0
 8006928:	6003      	str	r3, [r0, #0]
 800692a:	f04f 0900 	mov.w	r9, #0
 800692e:	07eb      	lsls	r3, r5, #31
 8006930:	d50a      	bpl.n	8006948 <__pow5mult+0x84>
 8006932:	4631      	mov	r1, r6
 8006934:	4622      	mov	r2, r4
 8006936:	4638      	mov	r0, r7
 8006938:	f7ff ff1a 	bl	8006770 <__multiply>
 800693c:	4631      	mov	r1, r6
 800693e:	4680      	mov	r8, r0
 8006940:	4638      	mov	r0, r7
 8006942:	f7ff fe4b 	bl	80065dc <_Bfree>
 8006946:	4646      	mov	r6, r8
 8006948:	106d      	asrs	r5, r5, #1
 800694a:	d00b      	beq.n	8006964 <__pow5mult+0xa0>
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	b938      	cbnz	r0, 8006960 <__pow5mult+0x9c>
 8006950:	4622      	mov	r2, r4
 8006952:	4621      	mov	r1, r4
 8006954:	4638      	mov	r0, r7
 8006956:	f7ff ff0b 	bl	8006770 <__multiply>
 800695a:	6020      	str	r0, [r4, #0]
 800695c:	f8c0 9000 	str.w	r9, [r0]
 8006960:	4604      	mov	r4, r0
 8006962:	e7e4      	b.n	800692e <__pow5mult+0x6a>
 8006964:	4630      	mov	r0, r6
 8006966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800696a:	bf00      	nop
 800696c:	080078c4 	.word	0x080078c4
 8006970:	080077e9 	.word	0x080077e9
 8006974:	08007869 	.word	0x08007869

08006978 <__lshift>:
 8006978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800697c:	460c      	mov	r4, r1
 800697e:	6849      	ldr	r1, [r1, #4]
 8006980:	6923      	ldr	r3, [r4, #16]
 8006982:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006986:	68a3      	ldr	r3, [r4, #8]
 8006988:	4607      	mov	r7, r0
 800698a:	4691      	mov	r9, r2
 800698c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006990:	f108 0601 	add.w	r6, r8, #1
 8006994:	42b3      	cmp	r3, r6
 8006996:	db0b      	blt.n	80069b0 <__lshift+0x38>
 8006998:	4638      	mov	r0, r7
 800699a:	f7ff fddf 	bl	800655c <_Balloc>
 800699e:	4605      	mov	r5, r0
 80069a0:	b948      	cbnz	r0, 80069b6 <__lshift+0x3e>
 80069a2:	4602      	mov	r2, r0
 80069a4:	4b28      	ldr	r3, [pc, #160]	@ (8006a48 <__lshift+0xd0>)
 80069a6:	4829      	ldr	r0, [pc, #164]	@ (8006a4c <__lshift+0xd4>)
 80069a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80069ac:	f000 fbe8 	bl	8007180 <__assert_func>
 80069b0:	3101      	adds	r1, #1
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	e7ee      	b.n	8006994 <__lshift+0x1c>
 80069b6:	2300      	movs	r3, #0
 80069b8:	f100 0114 	add.w	r1, r0, #20
 80069bc:	f100 0210 	add.w	r2, r0, #16
 80069c0:	4618      	mov	r0, r3
 80069c2:	4553      	cmp	r3, sl
 80069c4:	db33      	blt.n	8006a2e <__lshift+0xb6>
 80069c6:	6920      	ldr	r0, [r4, #16]
 80069c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069cc:	f104 0314 	add.w	r3, r4, #20
 80069d0:	f019 091f 	ands.w	r9, r9, #31
 80069d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069dc:	d02b      	beq.n	8006a36 <__lshift+0xbe>
 80069de:	f1c9 0e20 	rsb	lr, r9, #32
 80069e2:	468a      	mov	sl, r1
 80069e4:	2200      	movs	r2, #0
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	fa00 f009 	lsl.w	r0, r0, r9
 80069ec:	4310      	orrs	r0, r2
 80069ee:	f84a 0b04 	str.w	r0, [sl], #4
 80069f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f6:	459c      	cmp	ip, r3
 80069f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80069fc:	d8f3      	bhi.n	80069e6 <__lshift+0x6e>
 80069fe:	ebac 0304 	sub.w	r3, ip, r4
 8006a02:	3b15      	subs	r3, #21
 8006a04:	f023 0303 	bic.w	r3, r3, #3
 8006a08:	3304      	adds	r3, #4
 8006a0a:	f104 0015 	add.w	r0, r4, #21
 8006a0e:	4584      	cmp	ip, r0
 8006a10:	bf38      	it	cc
 8006a12:	2304      	movcc	r3, #4
 8006a14:	50ca      	str	r2, [r1, r3]
 8006a16:	b10a      	cbz	r2, 8006a1c <__lshift+0xa4>
 8006a18:	f108 0602 	add.w	r6, r8, #2
 8006a1c:	3e01      	subs	r6, #1
 8006a1e:	4638      	mov	r0, r7
 8006a20:	612e      	str	r6, [r5, #16]
 8006a22:	4621      	mov	r1, r4
 8006a24:	f7ff fdda 	bl	80065dc <_Bfree>
 8006a28:	4628      	mov	r0, r5
 8006a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a32:	3301      	adds	r3, #1
 8006a34:	e7c5      	b.n	80069c2 <__lshift+0x4a>
 8006a36:	3904      	subs	r1, #4
 8006a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a40:	459c      	cmp	ip, r3
 8006a42:	d8f9      	bhi.n	8006a38 <__lshift+0xc0>
 8006a44:	e7ea      	b.n	8006a1c <__lshift+0xa4>
 8006a46:	bf00      	nop
 8006a48:	08007858 	.word	0x08007858
 8006a4c:	08007869 	.word	0x08007869

08006a50 <__mcmp>:
 8006a50:	690a      	ldr	r2, [r1, #16]
 8006a52:	4603      	mov	r3, r0
 8006a54:	6900      	ldr	r0, [r0, #16]
 8006a56:	1a80      	subs	r0, r0, r2
 8006a58:	b530      	push	{r4, r5, lr}
 8006a5a:	d10e      	bne.n	8006a7a <__mcmp+0x2a>
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	3114      	adds	r1, #20
 8006a60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a70:	4295      	cmp	r5, r2
 8006a72:	d003      	beq.n	8006a7c <__mcmp+0x2c>
 8006a74:	d205      	bcs.n	8006a82 <__mcmp+0x32>
 8006a76:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7a:	bd30      	pop	{r4, r5, pc}
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	d3f3      	bcc.n	8006a68 <__mcmp+0x18>
 8006a80:	e7fb      	b.n	8006a7a <__mcmp+0x2a>
 8006a82:	2001      	movs	r0, #1
 8006a84:	e7f9      	b.n	8006a7a <__mcmp+0x2a>
	...

08006a88 <__mdiff>:
 8006a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	4689      	mov	r9, r1
 8006a8e:	4606      	mov	r6, r0
 8006a90:	4611      	mov	r1, r2
 8006a92:	4648      	mov	r0, r9
 8006a94:	4614      	mov	r4, r2
 8006a96:	f7ff ffdb 	bl	8006a50 <__mcmp>
 8006a9a:	1e05      	subs	r5, r0, #0
 8006a9c:	d112      	bne.n	8006ac4 <__mdiff+0x3c>
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f7ff fd5b 	bl	800655c <_Balloc>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	b928      	cbnz	r0, 8006ab6 <__mdiff+0x2e>
 8006aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8006ba8 <__mdiff+0x120>)
 8006aac:	f240 2137 	movw	r1, #567	@ 0x237
 8006ab0:	483e      	ldr	r0, [pc, #248]	@ (8006bac <__mdiff+0x124>)
 8006ab2:	f000 fb65 	bl	8007180 <__assert_func>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006abc:	4610      	mov	r0, r2
 8006abe:	b003      	add	sp, #12
 8006ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac4:	bfbc      	itt	lt
 8006ac6:	464b      	movlt	r3, r9
 8006ac8:	46a1      	movlt	r9, r4
 8006aca:	4630      	mov	r0, r6
 8006acc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ad0:	bfba      	itte	lt
 8006ad2:	461c      	movlt	r4, r3
 8006ad4:	2501      	movlt	r5, #1
 8006ad6:	2500      	movge	r5, #0
 8006ad8:	f7ff fd40 	bl	800655c <_Balloc>
 8006adc:	4602      	mov	r2, r0
 8006ade:	b918      	cbnz	r0, 8006ae8 <__mdiff+0x60>
 8006ae0:	4b31      	ldr	r3, [pc, #196]	@ (8006ba8 <__mdiff+0x120>)
 8006ae2:	f240 2145 	movw	r1, #581	@ 0x245
 8006ae6:	e7e3      	b.n	8006ab0 <__mdiff+0x28>
 8006ae8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006aec:	6926      	ldr	r6, [r4, #16]
 8006aee:	60c5      	str	r5, [r0, #12]
 8006af0:	f109 0310 	add.w	r3, r9, #16
 8006af4:	f109 0514 	add.w	r5, r9, #20
 8006af8:	f104 0e14 	add.w	lr, r4, #20
 8006afc:	f100 0b14 	add.w	fp, r0, #20
 8006b00:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b04:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b08:	9301      	str	r3, [sp, #4]
 8006b0a:	46d9      	mov	r9, fp
 8006b0c:	f04f 0c00 	mov.w	ip, #0
 8006b10:	9b01      	ldr	r3, [sp, #4]
 8006b12:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b16:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	fa1f f38a 	uxth.w	r3, sl
 8006b20:	4619      	mov	r1, r3
 8006b22:	b283      	uxth	r3, r0
 8006b24:	1acb      	subs	r3, r1, r3
 8006b26:	0c00      	lsrs	r0, r0, #16
 8006b28:	4463      	add	r3, ip
 8006b2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b2e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b38:	4576      	cmp	r6, lr
 8006b3a:	f849 3b04 	str.w	r3, [r9], #4
 8006b3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b42:	d8e5      	bhi.n	8006b10 <__mdiff+0x88>
 8006b44:	1b33      	subs	r3, r6, r4
 8006b46:	3b15      	subs	r3, #21
 8006b48:	f023 0303 	bic.w	r3, r3, #3
 8006b4c:	3415      	adds	r4, #21
 8006b4e:	3304      	adds	r3, #4
 8006b50:	42a6      	cmp	r6, r4
 8006b52:	bf38      	it	cc
 8006b54:	2304      	movcc	r3, #4
 8006b56:	441d      	add	r5, r3
 8006b58:	445b      	add	r3, fp
 8006b5a:	461e      	mov	r6, r3
 8006b5c:	462c      	mov	r4, r5
 8006b5e:	4544      	cmp	r4, r8
 8006b60:	d30e      	bcc.n	8006b80 <__mdiff+0xf8>
 8006b62:	f108 0103 	add.w	r1, r8, #3
 8006b66:	1b49      	subs	r1, r1, r5
 8006b68:	f021 0103 	bic.w	r1, r1, #3
 8006b6c:	3d03      	subs	r5, #3
 8006b6e:	45a8      	cmp	r8, r5
 8006b70:	bf38      	it	cc
 8006b72:	2100      	movcc	r1, #0
 8006b74:	440b      	add	r3, r1
 8006b76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b7a:	b191      	cbz	r1, 8006ba2 <__mdiff+0x11a>
 8006b7c:	6117      	str	r7, [r2, #16]
 8006b7e:	e79d      	b.n	8006abc <__mdiff+0x34>
 8006b80:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b84:	46e6      	mov	lr, ip
 8006b86:	0c08      	lsrs	r0, r1, #16
 8006b88:	fa1c fc81 	uxtah	ip, ip, r1
 8006b8c:	4471      	add	r1, lr
 8006b8e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b92:	b289      	uxth	r1, r1
 8006b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b98:	f846 1b04 	str.w	r1, [r6], #4
 8006b9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ba0:	e7dd      	b.n	8006b5e <__mdiff+0xd6>
 8006ba2:	3f01      	subs	r7, #1
 8006ba4:	e7e7      	b.n	8006b76 <__mdiff+0xee>
 8006ba6:	bf00      	nop
 8006ba8:	08007858 	.word	0x08007858
 8006bac:	08007869 	.word	0x08007869

08006bb0 <__d2b>:
 8006bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	ec59 8b10 	vmov	r8, r9, d0
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	f7ff fccd 	bl	800655c <_Balloc>
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	b930      	cbnz	r0, 8006bd4 <__d2b+0x24>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	4b23      	ldr	r3, [pc, #140]	@ (8006c58 <__d2b+0xa8>)
 8006bca:	4824      	ldr	r0, [pc, #144]	@ (8006c5c <__d2b+0xac>)
 8006bcc:	f240 310f 	movw	r1, #783	@ 0x30f
 8006bd0:	f000 fad6 	bl	8007180 <__assert_func>
 8006bd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bdc:	b10d      	cbz	r5, 8006be2 <__d2b+0x32>
 8006bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	f1b8 0300 	subs.w	r3, r8, #0
 8006be8:	d023      	beq.n	8006c32 <__d2b+0x82>
 8006bea:	4668      	mov	r0, sp
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	f7ff fd7c 	bl	80066ea <__lo0bits>
 8006bf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006bf6:	b1d0      	cbz	r0, 8006c2e <__d2b+0x7e>
 8006bf8:	f1c0 0320 	rsb	r3, r0, #32
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	430b      	orrs	r3, r1
 8006c02:	40c2      	lsrs	r2, r0
 8006c04:	6163      	str	r3, [r4, #20]
 8006c06:	9201      	str	r2, [sp, #4]
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	61a3      	str	r3, [r4, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bf0c      	ite	eq
 8006c10:	2201      	moveq	r2, #1
 8006c12:	2202      	movne	r2, #2
 8006c14:	6122      	str	r2, [r4, #16]
 8006c16:	b1a5      	cbz	r5, 8006c42 <__d2b+0x92>
 8006c18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c1c:	4405      	add	r5, r0
 8006c1e:	603d      	str	r5, [r7, #0]
 8006c20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c24:	6030      	str	r0, [r6, #0]
 8006c26:	4620      	mov	r0, r4
 8006c28:	b003      	add	sp, #12
 8006c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c2e:	6161      	str	r1, [r4, #20]
 8006c30:	e7ea      	b.n	8006c08 <__d2b+0x58>
 8006c32:	a801      	add	r0, sp, #4
 8006c34:	f7ff fd59 	bl	80066ea <__lo0bits>
 8006c38:	9b01      	ldr	r3, [sp, #4]
 8006c3a:	6163      	str	r3, [r4, #20]
 8006c3c:	3020      	adds	r0, #32
 8006c3e:	2201      	movs	r2, #1
 8006c40:	e7e8      	b.n	8006c14 <__d2b+0x64>
 8006c42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c4a:	6038      	str	r0, [r7, #0]
 8006c4c:	6918      	ldr	r0, [r3, #16]
 8006c4e:	f7ff fd2d 	bl	80066ac <__hi0bits>
 8006c52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c56:	e7e5      	b.n	8006c24 <__d2b+0x74>
 8006c58:	08007858 	.word	0x08007858
 8006c5c:	08007869 	.word	0x08007869

08006c60 <__sfputc_r>:
 8006c60:	6893      	ldr	r3, [r2, #8]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	b410      	push	{r4}
 8006c68:	6093      	str	r3, [r2, #8]
 8006c6a:	da08      	bge.n	8006c7e <__sfputc_r+0x1e>
 8006c6c:	6994      	ldr	r4, [r2, #24]
 8006c6e:	42a3      	cmp	r3, r4
 8006c70:	db01      	blt.n	8006c76 <__sfputc_r+0x16>
 8006c72:	290a      	cmp	r1, #10
 8006c74:	d103      	bne.n	8006c7e <__sfputc_r+0x1e>
 8006c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c7a:	f000 b9df 	b.w	800703c <__swbuf_r>
 8006c7e:	6813      	ldr	r3, [r2, #0]
 8006c80:	1c58      	adds	r0, r3, #1
 8006c82:	6010      	str	r0, [r2, #0]
 8006c84:	7019      	strb	r1, [r3, #0]
 8006c86:	4608      	mov	r0, r1
 8006c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <__sfputs_r>:
 8006c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c90:	4606      	mov	r6, r0
 8006c92:	460f      	mov	r7, r1
 8006c94:	4614      	mov	r4, r2
 8006c96:	18d5      	adds	r5, r2, r3
 8006c98:	42ac      	cmp	r4, r5
 8006c9a:	d101      	bne.n	8006ca0 <__sfputs_r+0x12>
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	e007      	b.n	8006cb0 <__sfputs_r+0x22>
 8006ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca4:	463a      	mov	r2, r7
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f7ff ffda 	bl	8006c60 <__sfputc_r>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d1f3      	bne.n	8006c98 <__sfputs_r+0xa>
 8006cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cb4 <_vfiprintf_r>:
 8006cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb8:	460d      	mov	r5, r1
 8006cba:	b09d      	sub	sp, #116	@ 0x74
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	4698      	mov	r8, r3
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	b118      	cbz	r0, 8006ccc <_vfiprintf_r+0x18>
 8006cc4:	6a03      	ldr	r3, [r0, #32]
 8006cc6:	b90b      	cbnz	r3, 8006ccc <_vfiprintf_r+0x18>
 8006cc8:	f7fe fc7a 	bl	80055c0 <__sinit>
 8006ccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cce:	07d9      	lsls	r1, r3, #31
 8006cd0:	d405      	bmi.n	8006cde <_vfiprintf_r+0x2a>
 8006cd2:	89ab      	ldrh	r3, [r5, #12]
 8006cd4:	059a      	lsls	r2, r3, #22
 8006cd6:	d402      	bmi.n	8006cde <_vfiprintf_r+0x2a>
 8006cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cda:	f7fe fda4 	bl	8005826 <__retarget_lock_acquire_recursive>
 8006cde:	89ab      	ldrh	r3, [r5, #12]
 8006ce0:	071b      	lsls	r3, r3, #28
 8006ce2:	d501      	bpl.n	8006ce8 <_vfiprintf_r+0x34>
 8006ce4:	692b      	ldr	r3, [r5, #16]
 8006ce6:	b99b      	cbnz	r3, 8006d10 <_vfiprintf_r+0x5c>
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4630      	mov	r0, r6
 8006cec:	f000 f9e4 	bl	80070b8 <__swsetup_r>
 8006cf0:	b170      	cbz	r0, 8006d10 <_vfiprintf_r+0x5c>
 8006cf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cf4:	07dc      	lsls	r4, r3, #31
 8006cf6:	d504      	bpl.n	8006d02 <_vfiprintf_r+0x4e>
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	b01d      	add	sp, #116	@ 0x74
 8006cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d02:	89ab      	ldrh	r3, [r5, #12]
 8006d04:	0598      	lsls	r0, r3, #22
 8006d06:	d4f7      	bmi.n	8006cf8 <_vfiprintf_r+0x44>
 8006d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d0a:	f7fe fd8d 	bl	8005828 <__retarget_lock_release_recursive>
 8006d0e:	e7f3      	b.n	8006cf8 <_vfiprintf_r+0x44>
 8006d10:	2300      	movs	r3, #0
 8006d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d14:	2320      	movs	r3, #32
 8006d16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d1e:	2330      	movs	r3, #48	@ 0x30
 8006d20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ed0 <_vfiprintf_r+0x21c>
 8006d24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d28:	f04f 0901 	mov.w	r9, #1
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	469a      	mov	sl, r3
 8006d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d34:	b10a      	cbz	r2, 8006d3a <_vfiprintf_r+0x86>
 8006d36:	2a25      	cmp	r2, #37	@ 0x25
 8006d38:	d1f9      	bne.n	8006d2e <_vfiprintf_r+0x7a>
 8006d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d3e:	d00b      	beq.n	8006d58 <_vfiprintf_r+0xa4>
 8006d40:	465b      	mov	r3, fp
 8006d42:	4622      	mov	r2, r4
 8006d44:	4629      	mov	r1, r5
 8006d46:	4630      	mov	r0, r6
 8006d48:	f7ff ffa1 	bl	8006c8e <__sfputs_r>
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	f000 80a7 	beq.w	8006ea0 <_vfiprintf_r+0x1ec>
 8006d52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d54:	445a      	add	r2, fp
 8006d56:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d58:	f89a 3000 	ldrb.w	r3, [sl]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 809f 	beq.w	8006ea0 <_vfiprintf_r+0x1ec>
 8006d62:	2300      	movs	r3, #0
 8006d64:	f04f 32ff 	mov.w	r2, #4294967295
 8006d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d6c:	f10a 0a01 	add.w	sl, sl, #1
 8006d70:	9304      	str	r3, [sp, #16]
 8006d72:	9307      	str	r3, [sp, #28]
 8006d74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d78:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d7a:	4654      	mov	r4, sl
 8006d7c:	2205      	movs	r2, #5
 8006d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d82:	4853      	ldr	r0, [pc, #332]	@ (8006ed0 <_vfiprintf_r+0x21c>)
 8006d84:	f7f9 fa2c 	bl	80001e0 <memchr>
 8006d88:	9a04      	ldr	r2, [sp, #16]
 8006d8a:	b9d8      	cbnz	r0, 8006dc4 <_vfiprintf_r+0x110>
 8006d8c:	06d1      	lsls	r1, r2, #27
 8006d8e:	bf44      	itt	mi
 8006d90:	2320      	movmi	r3, #32
 8006d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d96:	0713      	lsls	r3, r2, #28
 8006d98:	bf44      	itt	mi
 8006d9a:	232b      	movmi	r3, #43	@ 0x2b
 8006d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006da0:	f89a 3000 	ldrb.w	r3, [sl]
 8006da4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006da6:	d015      	beq.n	8006dd4 <_vfiprintf_r+0x120>
 8006da8:	9a07      	ldr	r2, [sp, #28]
 8006daa:	4654      	mov	r4, sl
 8006dac:	2000      	movs	r0, #0
 8006dae:	f04f 0c0a 	mov.w	ip, #10
 8006db2:	4621      	mov	r1, r4
 8006db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006db8:	3b30      	subs	r3, #48	@ 0x30
 8006dba:	2b09      	cmp	r3, #9
 8006dbc:	d94b      	bls.n	8006e56 <_vfiprintf_r+0x1a2>
 8006dbe:	b1b0      	cbz	r0, 8006dee <_vfiprintf_r+0x13a>
 8006dc0:	9207      	str	r2, [sp, #28]
 8006dc2:	e014      	b.n	8006dee <_vfiprintf_r+0x13a>
 8006dc4:	eba0 0308 	sub.w	r3, r0, r8
 8006dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	9304      	str	r3, [sp, #16]
 8006dd0:	46a2      	mov	sl, r4
 8006dd2:	e7d2      	b.n	8006d7a <_vfiprintf_r+0xc6>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	1d19      	adds	r1, r3, #4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	9103      	str	r1, [sp, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bfbb      	ittet	lt
 8006de0:	425b      	neglt	r3, r3
 8006de2:	f042 0202 	orrlt.w	r2, r2, #2
 8006de6:	9307      	strge	r3, [sp, #28]
 8006de8:	9307      	strlt	r3, [sp, #28]
 8006dea:	bfb8      	it	lt
 8006dec:	9204      	strlt	r2, [sp, #16]
 8006dee:	7823      	ldrb	r3, [r4, #0]
 8006df0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006df2:	d10a      	bne.n	8006e0a <_vfiprintf_r+0x156>
 8006df4:	7863      	ldrb	r3, [r4, #1]
 8006df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006df8:	d132      	bne.n	8006e60 <_vfiprintf_r+0x1ac>
 8006dfa:	9b03      	ldr	r3, [sp, #12]
 8006dfc:	1d1a      	adds	r2, r3, #4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	9203      	str	r2, [sp, #12]
 8006e02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e06:	3402      	adds	r4, #2
 8006e08:	9305      	str	r3, [sp, #20]
 8006e0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ee0 <_vfiprintf_r+0x22c>
 8006e0e:	7821      	ldrb	r1, [r4, #0]
 8006e10:	2203      	movs	r2, #3
 8006e12:	4650      	mov	r0, sl
 8006e14:	f7f9 f9e4 	bl	80001e0 <memchr>
 8006e18:	b138      	cbz	r0, 8006e2a <_vfiprintf_r+0x176>
 8006e1a:	9b04      	ldr	r3, [sp, #16]
 8006e1c:	eba0 000a 	sub.w	r0, r0, sl
 8006e20:	2240      	movs	r2, #64	@ 0x40
 8006e22:	4082      	lsls	r2, r0
 8006e24:	4313      	orrs	r3, r2
 8006e26:	3401      	adds	r4, #1
 8006e28:	9304      	str	r3, [sp, #16]
 8006e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2e:	4829      	ldr	r0, [pc, #164]	@ (8006ed4 <_vfiprintf_r+0x220>)
 8006e30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e34:	2206      	movs	r2, #6
 8006e36:	f7f9 f9d3 	bl	80001e0 <memchr>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d03f      	beq.n	8006ebe <_vfiprintf_r+0x20a>
 8006e3e:	4b26      	ldr	r3, [pc, #152]	@ (8006ed8 <_vfiprintf_r+0x224>)
 8006e40:	bb1b      	cbnz	r3, 8006e8a <_vfiprintf_r+0x1d6>
 8006e42:	9b03      	ldr	r3, [sp, #12]
 8006e44:	3307      	adds	r3, #7
 8006e46:	f023 0307 	bic.w	r3, r3, #7
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	9303      	str	r3, [sp, #12]
 8006e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e50:	443b      	add	r3, r7
 8006e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e54:	e76a      	b.n	8006d2c <_vfiprintf_r+0x78>
 8006e56:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	e7a8      	b.n	8006db2 <_vfiprintf_r+0xfe>
 8006e60:	2300      	movs	r3, #0
 8006e62:	3401      	adds	r4, #1
 8006e64:	9305      	str	r3, [sp, #20]
 8006e66:	4619      	mov	r1, r3
 8006e68:	f04f 0c0a 	mov.w	ip, #10
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e72:	3a30      	subs	r2, #48	@ 0x30
 8006e74:	2a09      	cmp	r2, #9
 8006e76:	d903      	bls.n	8006e80 <_vfiprintf_r+0x1cc>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0c6      	beq.n	8006e0a <_vfiprintf_r+0x156>
 8006e7c:	9105      	str	r1, [sp, #20]
 8006e7e:	e7c4      	b.n	8006e0a <_vfiprintf_r+0x156>
 8006e80:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e84:	4604      	mov	r4, r0
 8006e86:	2301      	movs	r3, #1
 8006e88:	e7f0      	b.n	8006e6c <_vfiprintf_r+0x1b8>
 8006e8a:	ab03      	add	r3, sp, #12
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	462a      	mov	r2, r5
 8006e90:	4b12      	ldr	r3, [pc, #72]	@ (8006edc <_vfiprintf_r+0x228>)
 8006e92:	a904      	add	r1, sp, #16
 8006e94:	4630      	mov	r0, r6
 8006e96:	f7fd ff4f 	bl	8004d38 <_printf_float>
 8006e9a:	4607      	mov	r7, r0
 8006e9c:	1c78      	adds	r0, r7, #1
 8006e9e:	d1d6      	bne.n	8006e4e <_vfiprintf_r+0x19a>
 8006ea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ea2:	07d9      	lsls	r1, r3, #31
 8006ea4:	d405      	bmi.n	8006eb2 <_vfiprintf_r+0x1fe>
 8006ea6:	89ab      	ldrh	r3, [r5, #12]
 8006ea8:	059a      	lsls	r2, r3, #22
 8006eaa:	d402      	bmi.n	8006eb2 <_vfiprintf_r+0x1fe>
 8006eac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eae:	f7fe fcbb 	bl	8005828 <__retarget_lock_release_recursive>
 8006eb2:	89ab      	ldrh	r3, [r5, #12]
 8006eb4:	065b      	lsls	r3, r3, #25
 8006eb6:	f53f af1f 	bmi.w	8006cf8 <_vfiprintf_r+0x44>
 8006eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ebc:	e71e      	b.n	8006cfc <_vfiprintf_r+0x48>
 8006ebe:	ab03      	add	r3, sp, #12
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	462a      	mov	r2, r5
 8006ec4:	4b05      	ldr	r3, [pc, #20]	@ (8006edc <_vfiprintf_r+0x228>)
 8006ec6:	a904      	add	r1, sp, #16
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f7fe f9cd 	bl	8005268 <_printf_i>
 8006ece:	e7e4      	b.n	8006e9a <_vfiprintf_r+0x1e6>
 8006ed0:	080079c0 	.word	0x080079c0
 8006ed4:	080079ca 	.word	0x080079ca
 8006ed8:	08004d39 	.word	0x08004d39
 8006edc:	08006c8f 	.word	0x08006c8f
 8006ee0:	080079c6 	.word	0x080079c6

08006ee4 <__sflush_r>:
 8006ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eec:	0716      	lsls	r6, r2, #28
 8006eee:	4605      	mov	r5, r0
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	d454      	bmi.n	8006f9e <__sflush_r+0xba>
 8006ef4:	684b      	ldr	r3, [r1, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dc02      	bgt.n	8006f00 <__sflush_r+0x1c>
 8006efa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	dd48      	ble.n	8006f92 <__sflush_r+0xae>
 8006f00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f02:	2e00      	cmp	r6, #0
 8006f04:	d045      	beq.n	8006f92 <__sflush_r+0xae>
 8006f06:	2300      	movs	r3, #0
 8006f08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f0c:	682f      	ldr	r7, [r5, #0]
 8006f0e:	6a21      	ldr	r1, [r4, #32]
 8006f10:	602b      	str	r3, [r5, #0]
 8006f12:	d030      	beq.n	8006f76 <__sflush_r+0x92>
 8006f14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	0759      	lsls	r1, r3, #29
 8006f1a:	d505      	bpl.n	8006f28 <__sflush_r+0x44>
 8006f1c:	6863      	ldr	r3, [r4, #4]
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f22:	b10b      	cbz	r3, 8006f28 <__sflush_r+0x44>
 8006f24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f26:	1ad2      	subs	r2, r2, r3
 8006f28:	2300      	movs	r3, #0
 8006f2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f2c:	6a21      	ldr	r1, [r4, #32]
 8006f2e:	4628      	mov	r0, r5
 8006f30:	47b0      	blx	r6
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	d106      	bne.n	8006f46 <__sflush_r+0x62>
 8006f38:	6829      	ldr	r1, [r5, #0]
 8006f3a:	291d      	cmp	r1, #29
 8006f3c:	d82b      	bhi.n	8006f96 <__sflush_r+0xb2>
 8006f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8006fe8 <__sflush_r+0x104>)
 8006f40:	410a      	asrs	r2, r1
 8006f42:	07d6      	lsls	r6, r2, #31
 8006f44:	d427      	bmi.n	8006f96 <__sflush_r+0xb2>
 8006f46:	2200      	movs	r2, #0
 8006f48:	6062      	str	r2, [r4, #4]
 8006f4a:	04d9      	lsls	r1, r3, #19
 8006f4c:	6922      	ldr	r2, [r4, #16]
 8006f4e:	6022      	str	r2, [r4, #0]
 8006f50:	d504      	bpl.n	8006f5c <__sflush_r+0x78>
 8006f52:	1c42      	adds	r2, r0, #1
 8006f54:	d101      	bne.n	8006f5a <__sflush_r+0x76>
 8006f56:	682b      	ldr	r3, [r5, #0]
 8006f58:	b903      	cbnz	r3, 8006f5c <__sflush_r+0x78>
 8006f5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f5e:	602f      	str	r7, [r5, #0]
 8006f60:	b1b9      	cbz	r1, 8006f92 <__sflush_r+0xae>
 8006f62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f66:	4299      	cmp	r1, r3
 8006f68:	d002      	beq.n	8006f70 <__sflush_r+0x8c>
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f7ff faac 	bl	80064c8 <_free_r>
 8006f70:	2300      	movs	r3, #0
 8006f72:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f74:	e00d      	b.n	8006f92 <__sflush_r+0xae>
 8006f76:	2301      	movs	r3, #1
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b0      	blx	r6
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	1c50      	adds	r0, r2, #1
 8006f80:	d1c9      	bne.n	8006f16 <__sflush_r+0x32>
 8006f82:	682b      	ldr	r3, [r5, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0c6      	beq.n	8006f16 <__sflush_r+0x32>
 8006f88:	2b1d      	cmp	r3, #29
 8006f8a:	d001      	beq.n	8006f90 <__sflush_r+0xac>
 8006f8c:	2b16      	cmp	r3, #22
 8006f8e:	d11e      	bne.n	8006fce <__sflush_r+0xea>
 8006f90:	602f      	str	r7, [r5, #0]
 8006f92:	2000      	movs	r0, #0
 8006f94:	e022      	b.n	8006fdc <__sflush_r+0xf8>
 8006f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f9a:	b21b      	sxth	r3, r3
 8006f9c:	e01b      	b.n	8006fd6 <__sflush_r+0xf2>
 8006f9e:	690f      	ldr	r7, [r1, #16]
 8006fa0:	2f00      	cmp	r7, #0
 8006fa2:	d0f6      	beq.n	8006f92 <__sflush_r+0xae>
 8006fa4:	0793      	lsls	r3, r2, #30
 8006fa6:	680e      	ldr	r6, [r1, #0]
 8006fa8:	bf08      	it	eq
 8006faa:	694b      	ldreq	r3, [r1, #20]
 8006fac:	600f      	str	r7, [r1, #0]
 8006fae:	bf18      	it	ne
 8006fb0:	2300      	movne	r3, #0
 8006fb2:	eba6 0807 	sub.w	r8, r6, r7
 8006fb6:	608b      	str	r3, [r1, #8]
 8006fb8:	f1b8 0f00 	cmp.w	r8, #0
 8006fbc:	dde9      	ble.n	8006f92 <__sflush_r+0xae>
 8006fbe:	6a21      	ldr	r1, [r4, #32]
 8006fc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006fc2:	4643      	mov	r3, r8
 8006fc4:	463a      	mov	r2, r7
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b0      	blx	r6
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	dc08      	bgt.n	8006fe0 <__sflush_r+0xfc>
 8006fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fd6:	81a3      	strh	r3, [r4, #12]
 8006fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe0:	4407      	add	r7, r0
 8006fe2:	eba8 0800 	sub.w	r8, r8, r0
 8006fe6:	e7e7      	b.n	8006fb8 <__sflush_r+0xd4>
 8006fe8:	dfbffffe 	.word	0xdfbffffe

08006fec <_fflush_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	690b      	ldr	r3, [r1, #16]
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	b913      	cbnz	r3, 8006ffc <_fflush_r+0x10>
 8006ff6:	2500      	movs	r5, #0
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	b118      	cbz	r0, 8007006 <_fflush_r+0x1a>
 8006ffe:	6a03      	ldr	r3, [r0, #32]
 8007000:	b90b      	cbnz	r3, 8007006 <_fflush_r+0x1a>
 8007002:	f7fe fadd 	bl	80055c0 <__sinit>
 8007006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0f3      	beq.n	8006ff6 <_fflush_r+0xa>
 800700e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007010:	07d0      	lsls	r0, r2, #31
 8007012:	d404      	bmi.n	800701e <_fflush_r+0x32>
 8007014:	0599      	lsls	r1, r3, #22
 8007016:	d402      	bmi.n	800701e <_fflush_r+0x32>
 8007018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800701a:	f7fe fc04 	bl	8005826 <__retarget_lock_acquire_recursive>
 800701e:	4628      	mov	r0, r5
 8007020:	4621      	mov	r1, r4
 8007022:	f7ff ff5f 	bl	8006ee4 <__sflush_r>
 8007026:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007028:	07da      	lsls	r2, r3, #31
 800702a:	4605      	mov	r5, r0
 800702c:	d4e4      	bmi.n	8006ff8 <_fflush_r+0xc>
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	059b      	lsls	r3, r3, #22
 8007032:	d4e1      	bmi.n	8006ff8 <_fflush_r+0xc>
 8007034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007036:	f7fe fbf7 	bl	8005828 <__retarget_lock_release_recursive>
 800703a:	e7dd      	b.n	8006ff8 <_fflush_r+0xc>

0800703c <__swbuf_r>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	460e      	mov	r6, r1
 8007040:	4614      	mov	r4, r2
 8007042:	4605      	mov	r5, r0
 8007044:	b118      	cbz	r0, 800704e <__swbuf_r+0x12>
 8007046:	6a03      	ldr	r3, [r0, #32]
 8007048:	b90b      	cbnz	r3, 800704e <__swbuf_r+0x12>
 800704a:	f7fe fab9 	bl	80055c0 <__sinit>
 800704e:	69a3      	ldr	r3, [r4, #24]
 8007050:	60a3      	str	r3, [r4, #8]
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	071a      	lsls	r2, r3, #28
 8007056:	d501      	bpl.n	800705c <__swbuf_r+0x20>
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	b943      	cbnz	r3, 800706e <__swbuf_r+0x32>
 800705c:	4621      	mov	r1, r4
 800705e:	4628      	mov	r0, r5
 8007060:	f000 f82a 	bl	80070b8 <__swsetup_r>
 8007064:	b118      	cbz	r0, 800706e <__swbuf_r+0x32>
 8007066:	f04f 37ff 	mov.w	r7, #4294967295
 800706a:	4638      	mov	r0, r7
 800706c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	6922      	ldr	r2, [r4, #16]
 8007072:	1a98      	subs	r0, r3, r2
 8007074:	6963      	ldr	r3, [r4, #20]
 8007076:	b2f6      	uxtb	r6, r6
 8007078:	4283      	cmp	r3, r0
 800707a:	4637      	mov	r7, r6
 800707c:	dc05      	bgt.n	800708a <__swbuf_r+0x4e>
 800707e:	4621      	mov	r1, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f7ff ffb3 	bl	8006fec <_fflush_r>
 8007086:	2800      	cmp	r0, #0
 8007088:	d1ed      	bne.n	8007066 <__swbuf_r+0x2a>
 800708a:	68a3      	ldr	r3, [r4, #8]
 800708c:	3b01      	subs	r3, #1
 800708e:	60a3      	str	r3, [r4, #8]
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	6022      	str	r2, [r4, #0]
 8007096:	701e      	strb	r6, [r3, #0]
 8007098:	6962      	ldr	r2, [r4, #20]
 800709a:	1c43      	adds	r3, r0, #1
 800709c:	429a      	cmp	r2, r3
 800709e:	d004      	beq.n	80070aa <__swbuf_r+0x6e>
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	07db      	lsls	r3, r3, #31
 80070a4:	d5e1      	bpl.n	800706a <__swbuf_r+0x2e>
 80070a6:	2e0a      	cmp	r6, #10
 80070a8:	d1df      	bne.n	800706a <__swbuf_r+0x2e>
 80070aa:	4621      	mov	r1, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	f7ff ff9d 	bl	8006fec <_fflush_r>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d0d9      	beq.n	800706a <__swbuf_r+0x2e>
 80070b6:	e7d6      	b.n	8007066 <__swbuf_r+0x2a>

080070b8 <__swsetup_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4b29      	ldr	r3, [pc, #164]	@ (8007160 <__swsetup_r+0xa8>)
 80070bc:	4605      	mov	r5, r0
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	460c      	mov	r4, r1
 80070c2:	b118      	cbz	r0, 80070cc <__swsetup_r+0x14>
 80070c4:	6a03      	ldr	r3, [r0, #32]
 80070c6:	b90b      	cbnz	r3, 80070cc <__swsetup_r+0x14>
 80070c8:	f7fe fa7a 	bl	80055c0 <__sinit>
 80070cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d0:	0719      	lsls	r1, r3, #28
 80070d2:	d422      	bmi.n	800711a <__swsetup_r+0x62>
 80070d4:	06da      	lsls	r2, r3, #27
 80070d6:	d407      	bmi.n	80070e8 <__swsetup_r+0x30>
 80070d8:	2209      	movs	r2, #9
 80070da:	602a      	str	r2, [r5, #0]
 80070dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070e0:	81a3      	strh	r3, [r4, #12]
 80070e2:	f04f 30ff 	mov.w	r0, #4294967295
 80070e6:	e033      	b.n	8007150 <__swsetup_r+0x98>
 80070e8:	0758      	lsls	r0, r3, #29
 80070ea:	d512      	bpl.n	8007112 <__swsetup_r+0x5a>
 80070ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070ee:	b141      	cbz	r1, 8007102 <__swsetup_r+0x4a>
 80070f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070f4:	4299      	cmp	r1, r3
 80070f6:	d002      	beq.n	80070fe <__swsetup_r+0x46>
 80070f8:	4628      	mov	r0, r5
 80070fa:	f7ff f9e5 	bl	80064c8 <_free_r>
 80070fe:	2300      	movs	r3, #0
 8007100:	6363      	str	r3, [r4, #52]	@ 0x34
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	2300      	movs	r3, #0
 800710c:	6063      	str	r3, [r4, #4]
 800710e:	6923      	ldr	r3, [r4, #16]
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	f043 0308 	orr.w	r3, r3, #8
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	b94b      	cbnz	r3, 8007132 <__swsetup_r+0x7a>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007128:	d003      	beq.n	8007132 <__swsetup_r+0x7a>
 800712a:	4621      	mov	r1, r4
 800712c:	4628      	mov	r0, r5
 800712e:	f000 f89d 	bl	800726c <__smakebuf_r>
 8007132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007136:	f013 0201 	ands.w	r2, r3, #1
 800713a:	d00a      	beq.n	8007152 <__swsetup_r+0x9a>
 800713c:	2200      	movs	r2, #0
 800713e:	60a2      	str	r2, [r4, #8]
 8007140:	6962      	ldr	r2, [r4, #20]
 8007142:	4252      	negs	r2, r2
 8007144:	61a2      	str	r2, [r4, #24]
 8007146:	6922      	ldr	r2, [r4, #16]
 8007148:	b942      	cbnz	r2, 800715c <__swsetup_r+0xa4>
 800714a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800714e:	d1c5      	bne.n	80070dc <__swsetup_r+0x24>
 8007150:	bd38      	pop	{r3, r4, r5, pc}
 8007152:	0799      	lsls	r1, r3, #30
 8007154:	bf58      	it	pl
 8007156:	6962      	ldrpl	r2, [r4, #20]
 8007158:	60a2      	str	r2, [r4, #8]
 800715a:	e7f4      	b.n	8007146 <__swsetup_r+0x8e>
 800715c:	2000      	movs	r0, #0
 800715e:	e7f7      	b.n	8007150 <__swsetup_r+0x98>
 8007160:	20000060 	.word	0x20000060

08007164 <memcpy>:
 8007164:	440a      	add	r2, r1
 8007166:	4291      	cmp	r1, r2
 8007168:	f100 33ff 	add.w	r3, r0, #4294967295
 800716c:	d100      	bne.n	8007170 <memcpy+0xc>
 800716e:	4770      	bx	lr
 8007170:	b510      	push	{r4, lr}
 8007172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800717a:	4291      	cmp	r1, r2
 800717c:	d1f9      	bne.n	8007172 <memcpy+0xe>
 800717e:	bd10      	pop	{r4, pc}

08007180 <__assert_func>:
 8007180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007182:	4614      	mov	r4, r2
 8007184:	461a      	mov	r2, r3
 8007186:	4b09      	ldr	r3, [pc, #36]	@ (80071ac <__assert_func+0x2c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4605      	mov	r5, r0
 800718c:	68d8      	ldr	r0, [r3, #12]
 800718e:	b954      	cbnz	r4, 80071a6 <__assert_func+0x26>
 8007190:	4b07      	ldr	r3, [pc, #28]	@ (80071b0 <__assert_func+0x30>)
 8007192:	461c      	mov	r4, r3
 8007194:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007198:	9100      	str	r1, [sp, #0]
 800719a:	462b      	mov	r3, r5
 800719c:	4905      	ldr	r1, [pc, #20]	@ (80071b4 <__assert_func+0x34>)
 800719e:	f000 f82d 	bl	80071fc <fiprintf>
 80071a2:	f000 f8c1 	bl	8007328 <abort>
 80071a6:	4b04      	ldr	r3, [pc, #16]	@ (80071b8 <__assert_func+0x38>)
 80071a8:	e7f4      	b.n	8007194 <__assert_func+0x14>
 80071aa:	bf00      	nop
 80071ac:	20000060 	.word	0x20000060
 80071b0:	08007a16 	.word	0x08007a16
 80071b4:	080079e8 	.word	0x080079e8
 80071b8:	080079db 	.word	0x080079db

080071bc <__ascii_mbtowc>:
 80071bc:	b082      	sub	sp, #8
 80071be:	b901      	cbnz	r1, 80071c2 <__ascii_mbtowc+0x6>
 80071c0:	a901      	add	r1, sp, #4
 80071c2:	b142      	cbz	r2, 80071d6 <__ascii_mbtowc+0x1a>
 80071c4:	b14b      	cbz	r3, 80071da <__ascii_mbtowc+0x1e>
 80071c6:	7813      	ldrb	r3, [r2, #0]
 80071c8:	600b      	str	r3, [r1, #0]
 80071ca:	7812      	ldrb	r2, [r2, #0]
 80071cc:	1e10      	subs	r0, r2, #0
 80071ce:	bf18      	it	ne
 80071d0:	2001      	movne	r0, #1
 80071d2:	b002      	add	sp, #8
 80071d4:	4770      	bx	lr
 80071d6:	4610      	mov	r0, r2
 80071d8:	e7fb      	b.n	80071d2 <__ascii_mbtowc+0x16>
 80071da:	f06f 0001 	mvn.w	r0, #1
 80071de:	e7f8      	b.n	80071d2 <__ascii_mbtowc+0x16>

080071e0 <__ascii_wctomb>:
 80071e0:	4603      	mov	r3, r0
 80071e2:	4608      	mov	r0, r1
 80071e4:	b141      	cbz	r1, 80071f8 <__ascii_wctomb+0x18>
 80071e6:	2aff      	cmp	r2, #255	@ 0xff
 80071e8:	d904      	bls.n	80071f4 <__ascii_wctomb+0x14>
 80071ea:	228a      	movs	r2, #138	@ 0x8a
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	f04f 30ff 	mov.w	r0, #4294967295
 80071f2:	4770      	bx	lr
 80071f4:	700a      	strb	r2, [r1, #0]
 80071f6:	2001      	movs	r0, #1
 80071f8:	4770      	bx	lr
	...

080071fc <fiprintf>:
 80071fc:	b40e      	push	{r1, r2, r3}
 80071fe:	b503      	push	{r0, r1, lr}
 8007200:	4601      	mov	r1, r0
 8007202:	ab03      	add	r3, sp, #12
 8007204:	4805      	ldr	r0, [pc, #20]	@ (800721c <fiprintf+0x20>)
 8007206:	f853 2b04 	ldr.w	r2, [r3], #4
 800720a:	6800      	ldr	r0, [r0, #0]
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	f7ff fd51 	bl	8006cb4 <_vfiprintf_r>
 8007212:	b002      	add	sp, #8
 8007214:	f85d eb04 	ldr.w	lr, [sp], #4
 8007218:	b003      	add	sp, #12
 800721a:	4770      	bx	lr
 800721c:	20000060 	.word	0x20000060

08007220 <__swhatbuf_r>:
 8007220:	b570      	push	{r4, r5, r6, lr}
 8007222:	460c      	mov	r4, r1
 8007224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007228:	2900      	cmp	r1, #0
 800722a:	b096      	sub	sp, #88	@ 0x58
 800722c:	4615      	mov	r5, r2
 800722e:	461e      	mov	r6, r3
 8007230:	da0d      	bge.n	800724e <__swhatbuf_r+0x2e>
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007238:	f04f 0100 	mov.w	r1, #0
 800723c:	bf14      	ite	ne
 800723e:	2340      	movne	r3, #64	@ 0x40
 8007240:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007244:	2000      	movs	r0, #0
 8007246:	6031      	str	r1, [r6, #0]
 8007248:	602b      	str	r3, [r5, #0]
 800724a:	b016      	add	sp, #88	@ 0x58
 800724c:	bd70      	pop	{r4, r5, r6, pc}
 800724e:	466a      	mov	r2, sp
 8007250:	f000 f848 	bl	80072e4 <_fstat_r>
 8007254:	2800      	cmp	r0, #0
 8007256:	dbec      	blt.n	8007232 <__swhatbuf_r+0x12>
 8007258:	9901      	ldr	r1, [sp, #4]
 800725a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800725e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007262:	4259      	negs	r1, r3
 8007264:	4159      	adcs	r1, r3
 8007266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800726a:	e7eb      	b.n	8007244 <__swhatbuf_r+0x24>

0800726c <__smakebuf_r>:
 800726c:	898b      	ldrh	r3, [r1, #12]
 800726e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007270:	079d      	lsls	r5, r3, #30
 8007272:	4606      	mov	r6, r0
 8007274:	460c      	mov	r4, r1
 8007276:	d507      	bpl.n	8007288 <__smakebuf_r+0x1c>
 8007278:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	2301      	movs	r3, #1
 8007282:	6163      	str	r3, [r4, #20]
 8007284:	b003      	add	sp, #12
 8007286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007288:	ab01      	add	r3, sp, #4
 800728a:	466a      	mov	r2, sp
 800728c:	f7ff ffc8 	bl	8007220 <__swhatbuf_r>
 8007290:	9f00      	ldr	r7, [sp, #0]
 8007292:	4605      	mov	r5, r0
 8007294:	4639      	mov	r1, r7
 8007296:	4630      	mov	r0, r6
 8007298:	f7fd fc22 	bl	8004ae0 <_malloc_r>
 800729c:	b948      	cbnz	r0, 80072b2 <__smakebuf_r+0x46>
 800729e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072a2:	059a      	lsls	r2, r3, #22
 80072a4:	d4ee      	bmi.n	8007284 <__smakebuf_r+0x18>
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	f043 0302 	orr.w	r3, r3, #2
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	e7e2      	b.n	8007278 <__smakebuf_r+0xc>
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	6020      	str	r0, [r4, #0]
 80072b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	9b01      	ldr	r3, [sp, #4]
 80072be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80072c2:	b15b      	cbz	r3, 80072dc <__smakebuf_r+0x70>
 80072c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072c8:	4630      	mov	r0, r6
 80072ca:	f000 f81d 	bl	8007308 <_isatty_r>
 80072ce:	b128      	cbz	r0, 80072dc <__smakebuf_r+0x70>
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	f023 0303 	bic.w	r3, r3, #3
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	81a3      	strh	r3, [r4, #12]
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	431d      	orrs	r5, r3
 80072e0:	81a5      	strh	r5, [r4, #12]
 80072e2:	e7cf      	b.n	8007284 <__smakebuf_r+0x18>

080072e4 <_fstat_r>:
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	4d07      	ldr	r5, [pc, #28]	@ (8007304 <_fstat_r+0x20>)
 80072e8:	2300      	movs	r3, #0
 80072ea:	4604      	mov	r4, r0
 80072ec:	4608      	mov	r0, r1
 80072ee:	4611      	mov	r1, r2
 80072f0:	602b      	str	r3, [r5, #0]
 80072f2:	f7fa fef1 	bl	80020d8 <_fstat>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	d102      	bne.n	8007300 <_fstat_r+0x1c>
 80072fa:	682b      	ldr	r3, [r5, #0]
 80072fc:	b103      	cbz	r3, 8007300 <_fstat_r+0x1c>
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	bd38      	pop	{r3, r4, r5, pc}
 8007302:	bf00      	nop
 8007304:	20000510 	.word	0x20000510

08007308 <_isatty_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4d06      	ldr	r5, [pc, #24]	@ (8007324 <_isatty_r+0x1c>)
 800730c:	2300      	movs	r3, #0
 800730e:	4604      	mov	r4, r0
 8007310:	4608      	mov	r0, r1
 8007312:	602b      	str	r3, [r5, #0]
 8007314:	f7fa fef0 	bl	80020f8 <_isatty>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d102      	bne.n	8007322 <_isatty_r+0x1a>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	b103      	cbz	r3, 8007322 <_isatty_r+0x1a>
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	20000510 	.word	0x20000510

08007328 <abort>:
 8007328:	b508      	push	{r3, lr}
 800732a:	2006      	movs	r0, #6
 800732c:	f000 f82c 	bl	8007388 <raise>
 8007330:	2001      	movs	r0, #1
 8007332:	f7fa fe9d 	bl	8002070 <_exit>

08007336 <_raise_r>:
 8007336:	291f      	cmp	r1, #31
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4605      	mov	r5, r0
 800733c:	460c      	mov	r4, r1
 800733e:	d904      	bls.n	800734a <_raise_r+0x14>
 8007340:	2316      	movs	r3, #22
 8007342:	6003      	str	r3, [r0, #0]
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	bd38      	pop	{r3, r4, r5, pc}
 800734a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800734c:	b112      	cbz	r2, 8007354 <_raise_r+0x1e>
 800734e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007352:	b94b      	cbnz	r3, 8007368 <_raise_r+0x32>
 8007354:	4628      	mov	r0, r5
 8007356:	f000 f831 	bl	80073bc <_getpid_r>
 800735a:	4622      	mov	r2, r4
 800735c:	4601      	mov	r1, r0
 800735e:	4628      	mov	r0, r5
 8007360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007364:	f000 b818 	b.w	8007398 <_kill_r>
 8007368:	2b01      	cmp	r3, #1
 800736a:	d00a      	beq.n	8007382 <_raise_r+0x4c>
 800736c:	1c59      	adds	r1, r3, #1
 800736e:	d103      	bne.n	8007378 <_raise_r+0x42>
 8007370:	2316      	movs	r3, #22
 8007372:	6003      	str	r3, [r0, #0]
 8007374:	2001      	movs	r0, #1
 8007376:	e7e7      	b.n	8007348 <_raise_r+0x12>
 8007378:	2100      	movs	r1, #0
 800737a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800737e:	4620      	mov	r0, r4
 8007380:	4798      	blx	r3
 8007382:	2000      	movs	r0, #0
 8007384:	e7e0      	b.n	8007348 <_raise_r+0x12>
	...

08007388 <raise>:
 8007388:	4b02      	ldr	r3, [pc, #8]	@ (8007394 <raise+0xc>)
 800738a:	4601      	mov	r1, r0
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	f7ff bfd2 	b.w	8007336 <_raise_r>
 8007392:	bf00      	nop
 8007394:	20000060 	.word	0x20000060

08007398 <_kill_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4d07      	ldr	r5, [pc, #28]	@ (80073b8 <_kill_r+0x20>)
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	4611      	mov	r1, r2
 80073a4:	602b      	str	r3, [r5, #0]
 80073a6:	f7fa fe53 	bl	8002050 <_kill>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	d102      	bne.n	80073b4 <_kill_r+0x1c>
 80073ae:	682b      	ldr	r3, [r5, #0]
 80073b0:	b103      	cbz	r3, 80073b4 <_kill_r+0x1c>
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
 80073b6:	bf00      	nop
 80073b8:	20000510 	.word	0x20000510

080073bc <_getpid_r>:
 80073bc:	f7fa be40 	b.w	8002040 <_getpid>

080073c0 <fmod>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	ed2d 8b02 	vpush	{d8}
 80073c6:	ec57 6b10 	vmov	r6, r7, d0
 80073ca:	ec55 4b11 	vmov	r4, r5, d1
 80073ce:	f000 f8a3 	bl	8007518 <__ieee754_fmod>
 80073d2:	4622      	mov	r2, r4
 80073d4:	462b      	mov	r3, r5
 80073d6:	4630      	mov	r0, r6
 80073d8:	4639      	mov	r1, r7
 80073da:	eeb0 8a40 	vmov.f32	s16, s0
 80073de:	eef0 8a60 	vmov.f32	s17, s1
 80073e2:	f7f9 fbab 	bl	8000b3c <__aeabi_dcmpun>
 80073e6:	b990      	cbnz	r0, 800740e <fmod+0x4e>
 80073e8:	2200      	movs	r2, #0
 80073ea:	2300      	movs	r3, #0
 80073ec:	4620      	mov	r0, r4
 80073ee:	4629      	mov	r1, r5
 80073f0:	f7f9 fb72 	bl	8000ad8 <__aeabi_dcmpeq>
 80073f4:	b158      	cbz	r0, 800740e <fmod+0x4e>
 80073f6:	f7fe f9eb 	bl	80057d0 <__errno>
 80073fa:	2321      	movs	r3, #33	@ 0x21
 80073fc:	6003      	str	r3, [r0, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	2300      	movs	r3, #0
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	f7f9 fa29 	bl	800085c <__aeabi_ddiv>
 800740a:	ec41 0b18 	vmov	d8, r0, r1
 800740e:	eeb0 0a48 	vmov.f32	s0, s16
 8007412:	eef0 0a68 	vmov.f32	s1, s17
 8007416:	ecbd 8b02 	vpop	{d8}
 800741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800741c:	0000      	movs	r0, r0
	...

08007420 <ceil>:
 8007420:	ec51 0b10 	vmov	r0, r1, d0
 8007424:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800742c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007430:	2e13      	cmp	r6, #19
 8007432:	460c      	mov	r4, r1
 8007434:	4605      	mov	r5, r0
 8007436:	4680      	mov	r8, r0
 8007438:	dc2e      	bgt.n	8007498 <ceil+0x78>
 800743a:	2e00      	cmp	r6, #0
 800743c:	da11      	bge.n	8007462 <ceil+0x42>
 800743e:	a332      	add	r3, pc, #200	@ (adr r3, 8007508 <ceil+0xe8>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	f7f8 ff2a 	bl	800029c <__adddf3>
 8007448:	2200      	movs	r2, #0
 800744a:	2300      	movs	r3, #0
 800744c:	f7f9 fb6c 	bl	8000b28 <__aeabi_dcmpgt>
 8007450:	b120      	cbz	r0, 800745c <ceil+0x3c>
 8007452:	2c00      	cmp	r4, #0
 8007454:	db4f      	blt.n	80074f6 <ceil+0xd6>
 8007456:	4325      	orrs	r5, r4
 8007458:	d151      	bne.n	80074fe <ceil+0xde>
 800745a:	462c      	mov	r4, r5
 800745c:	4621      	mov	r1, r4
 800745e:	4628      	mov	r0, r5
 8007460:	e023      	b.n	80074aa <ceil+0x8a>
 8007462:	4f2b      	ldr	r7, [pc, #172]	@ (8007510 <ceil+0xf0>)
 8007464:	4137      	asrs	r7, r6
 8007466:	ea01 0307 	and.w	r3, r1, r7
 800746a:	4303      	orrs	r3, r0
 800746c:	d01d      	beq.n	80074aa <ceil+0x8a>
 800746e:	a326      	add	r3, pc, #152	@ (adr r3, 8007508 <ceil+0xe8>)
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f7f8 ff12 	bl	800029c <__adddf3>
 8007478:	2200      	movs	r2, #0
 800747a:	2300      	movs	r3, #0
 800747c:	f7f9 fb54 	bl	8000b28 <__aeabi_dcmpgt>
 8007480:	2800      	cmp	r0, #0
 8007482:	d0eb      	beq.n	800745c <ceil+0x3c>
 8007484:	2c00      	cmp	r4, #0
 8007486:	bfc2      	ittt	gt
 8007488:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 800748c:	4133      	asrgt	r3, r6
 800748e:	18e4      	addgt	r4, r4, r3
 8007490:	ea24 0407 	bic.w	r4, r4, r7
 8007494:	2500      	movs	r5, #0
 8007496:	e7e1      	b.n	800745c <ceil+0x3c>
 8007498:	2e33      	cmp	r6, #51	@ 0x33
 800749a:	dd0a      	ble.n	80074b2 <ceil+0x92>
 800749c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80074a0:	d103      	bne.n	80074aa <ceil+0x8a>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	f7f8 fef9 	bl	800029c <__adddf3>
 80074aa:	ec41 0b10 	vmov	d0, r0, r1
 80074ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b2:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80074b6:	f04f 37ff 	mov.w	r7, #4294967295
 80074ba:	40df      	lsrs	r7, r3
 80074bc:	4238      	tst	r0, r7
 80074be:	d0f4      	beq.n	80074aa <ceil+0x8a>
 80074c0:	a311      	add	r3, pc, #68	@ (adr r3, 8007508 <ceil+0xe8>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f8 fee9 	bl	800029c <__adddf3>
 80074ca:	2200      	movs	r2, #0
 80074cc:	2300      	movs	r3, #0
 80074ce:	f7f9 fb2b 	bl	8000b28 <__aeabi_dcmpgt>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d0c2      	beq.n	800745c <ceil+0x3c>
 80074d6:	2c00      	cmp	r4, #0
 80074d8:	dd0a      	ble.n	80074f0 <ceil+0xd0>
 80074da:	2e14      	cmp	r6, #20
 80074dc:	d101      	bne.n	80074e2 <ceil+0xc2>
 80074de:	3401      	adds	r4, #1
 80074e0:	e006      	b.n	80074f0 <ceil+0xd0>
 80074e2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80074e6:	2301      	movs	r3, #1
 80074e8:	40b3      	lsls	r3, r6
 80074ea:	441d      	add	r5, r3
 80074ec:	45a8      	cmp	r8, r5
 80074ee:	d8f6      	bhi.n	80074de <ceil+0xbe>
 80074f0:	ea25 0507 	bic.w	r5, r5, r7
 80074f4:	e7b2      	b.n	800745c <ceil+0x3c>
 80074f6:	2500      	movs	r5, #0
 80074f8:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80074fc:	e7ae      	b.n	800745c <ceil+0x3c>
 80074fe:	4c05      	ldr	r4, [pc, #20]	@ (8007514 <ceil+0xf4>)
 8007500:	2500      	movs	r5, #0
 8007502:	e7ab      	b.n	800745c <ceil+0x3c>
 8007504:	f3af 8000 	nop.w
 8007508:	8800759c 	.word	0x8800759c
 800750c:	7e37e43c 	.word	0x7e37e43c
 8007510:	000fffff 	.word	0x000fffff
 8007514:	3ff00000 	.word	0x3ff00000

08007518 <__ieee754_fmod>:
 8007518:	ec53 2b11 	vmov	r2, r3, d1
 800751c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8007520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007524:	ea52 040c 	orrs.w	r4, r2, ip
 8007528:	ec51 0b10 	vmov	r0, r1, d0
 800752c:	461e      	mov	r6, r3
 800752e:	4617      	mov	r7, r2
 8007530:	4696      	mov	lr, r2
 8007532:	d00c      	beq.n	800754e <__ieee754_fmod+0x36>
 8007534:	4c77      	ldr	r4, [pc, #476]	@ (8007714 <__ieee754_fmod+0x1fc>)
 8007536:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800753a:	45a0      	cmp	r8, r4
 800753c:	4689      	mov	r9, r1
 800753e:	d806      	bhi.n	800754e <__ieee754_fmod+0x36>
 8007540:	4254      	negs	r4, r2
 8007542:	4d75      	ldr	r5, [pc, #468]	@ (8007718 <__ieee754_fmod+0x200>)
 8007544:	4314      	orrs	r4, r2
 8007546:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800754a:	42ac      	cmp	r4, r5
 800754c:	d909      	bls.n	8007562 <__ieee754_fmod+0x4a>
 800754e:	f7f9 f85b 	bl	8000608 <__aeabi_dmul>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	f7f9 f981 	bl	800085c <__aeabi_ddiv>
 800755a:	ec41 0b10 	vmov	d0, r0, r1
 800755e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007562:	45e0      	cmp	r8, ip
 8007564:	4682      	mov	sl, r0
 8007566:	4604      	mov	r4, r0
 8007568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800756c:	dc09      	bgt.n	8007582 <__ieee754_fmod+0x6a>
 800756e:	dbf4      	blt.n	800755a <__ieee754_fmod+0x42>
 8007570:	4282      	cmp	r2, r0
 8007572:	d8f2      	bhi.n	800755a <__ieee754_fmod+0x42>
 8007574:	d105      	bne.n	8007582 <__ieee754_fmod+0x6a>
 8007576:	4b69      	ldr	r3, [pc, #420]	@ (800771c <__ieee754_fmod+0x204>)
 8007578:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800757c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007580:	e7eb      	b.n	800755a <__ieee754_fmod+0x42>
 8007582:	4a65      	ldr	r2, [pc, #404]	@ (8007718 <__ieee754_fmod+0x200>)
 8007584:	ea19 0f02 	tst.w	r9, r2
 8007588:	d148      	bne.n	800761c <__ieee754_fmod+0x104>
 800758a:	f1b8 0f00 	cmp.w	r8, #0
 800758e:	d13d      	bne.n	800760c <__ieee754_fmod+0xf4>
 8007590:	4963      	ldr	r1, [pc, #396]	@ (8007720 <__ieee754_fmod+0x208>)
 8007592:	4653      	mov	r3, sl
 8007594:	2b00      	cmp	r3, #0
 8007596:	dc36      	bgt.n	8007606 <__ieee754_fmod+0xee>
 8007598:	4216      	tst	r6, r2
 800759a:	d14f      	bne.n	800763c <__ieee754_fmod+0x124>
 800759c:	f1bc 0f00 	cmp.w	ip, #0
 80075a0:	d144      	bne.n	800762c <__ieee754_fmod+0x114>
 80075a2:	4a5f      	ldr	r2, [pc, #380]	@ (8007720 <__ieee754_fmod+0x208>)
 80075a4:	463b      	mov	r3, r7
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	dc3d      	bgt.n	8007626 <__ieee754_fmod+0x10e>
 80075aa:	485e      	ldr	r0, [pc, #376]	@ (8007724 <__ieee754_fmod+0x20c>)
 80075ac:	4281      	cmp	r1, r0
 80075ae:	db4a      	blt.n	8007646 <__ieee754_fmod+0x12e>
 80075b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075b8:	485a      	ldr	r0, [pc, #360]	@ (8007724 <__ieee754_fmod+0x20c>)
 80075ba:	4282      	cmp	r2, r0
 80075bc:	db57      	blt.n	800766e <__ieee754_fmod+0x156>
 80075be:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80075c2:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80075c6:	1a89      	subs	r1, r1, r2
 80075c8:	1b98      	subs	r0, r3, r6
 80075ca:	eba4 070e 	sub.w	r7, r4, lr
 80075ce:	2900      	cmp	r1, #0
 80075d0:	d162      	bne.n	8007698 <__ieee754_fmod+0x180>
 80075d2:	4574      	cmp	r4, lr
 80075d4:	bf38      	it	cc
 80075d6:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80075da:	2800      	cmp	r0, #0
 80075dc:	bfa4      	itt	ge
 80075de:	463c      	movge	r4, r7
 80075e0:	4603      	movge	r3, r0
 80075e2:	ea53 0104 	orrs.w	r1, r3, r4
 80075e6:	d0c6      	beq.n	8007576 <__ieee754_fmod+0x5e>
 80075e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075ec:	db69      	blt.n	80076c2 <__ieee754_fmod+0x1aa>
 80075ee:	494d      	ldr	r1, [pc, #308]	@ (8007724 <__ieee754_fmod+0x20c>)
 80075f0:	428a      	cmp	r2, r1
 80075f2:	db6c      	blt.n	80076ce <__ieee754_fmod+0x1b6>
 80075f4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80075f8:	432b      	orrs	r3, r5
 80075fa:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 80075fe:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007602:	4620      	mov	r0, r4
 8007604:	e7a9      	b.n	800755a <__ieee754_fmod+0x42>
 8007606:	3901      	subs	r1, #1
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	e7c3      	b.n	8007594 <__ieee754_fmod+0x7c>
 800760c:	4945      	ldr	r1, [pc, #276]	@ (8007724 <__ieee754_fmod+0x20c>)
 800760e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8007612:	2b00      	cmp	r3, #0
 8007614:	ddc0      	ble.n	8007598 <__ieee754_fmod+0x80>
 8007616:	3901      	subs	r1, #1
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	e7fa      	b.n	8007612 <__ieee754_fmod+0xfa>
 800761c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8007620:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007624:	e7b8      	b.n	8007598 <__ieee754_fmod+0x80>
 8007626:	3a01      	subs	r2, #1
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	e7bc      	b.n	80075a6 <__ieee754_fmod+0x8e>
 800762c:	4a3d      	ldr	r2, [pc, #244]	@ (8007724 <__ieee754_fmod+0x20c>)
 800762e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8007632:	2b00      	cmp	r3, #0
 8007634:	ddb9      	ble.n	80075aa <__ieee754_fmod+0x92>
 8007636:	3a01      	subs	r2, #1
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	e7fa      	b.n	8007632 <__ieee754_fmod+0x11a>
 800763c:	ea4f 522c 	mov.w	r2, ip, asr #20
 8007640:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007644:	e7b1      	b.n	80075aa <__ieee754_fmod+0x92>
 8007646:	1a40      	subs	r0, r0, r1
 8007648:	281f      	cmp	r0, #31
 800764a:	dc0a      	bgt.n	8007662 <__ieee754_fmod+0x14a>
 800764c:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8007650:	fa08 f800 	lsl.w	r8, r8, r0
 8007654:	fa2a f303 	lsr.w	r3, sl, r3
 8007658:	ea43 0308 	orr.w	r3, r3, r8
 800765c:	fa0a f400 	lsl.w	r4, sl, r0
 8007660:	e7aa      	b.n	80075b8 <__ieee754_fmod+0xa0>
 8007662:	4b31      	ldr	r3, [pc, #196]	@ (8007728 <__ieee754_fmod+0x210>)
 8007664:	1a5b      	subs	r3, r3, r1
 8007666:	fa0a f303 	lsl.w	r3, sl, r3
 800766a:	2400      	movs	r4, #0
 800766c:	e7a4      	b.n	80075b8 <__ieee754_fmod+0xa0>
 800766e:	1a80      	subs	r0, r0, r2
 8007670:	281f      	cmp	r0, #31
 8007672:	dc0a      	bgt.n	800768a <__ieee754_fmod+0x172>
 8007674:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8007678:	fa0c fc00 	lsl.w	ip, ip, r0
 800767c:	fa27 f606 	lsr.w	r6, r7, r6
 8007680:	ea46 060c 	orr.w	r6, r6, ip
 8007684:	fa07 fe00 	lsl.w	lr, r7, r0
 8007688:	e79d      	b.n	80075c6 <__ieee754_fmod+0xae>
 800768a:	4e27      	ldr	r6, [pc, #156]	@ (8007728 <__ieee754_fmod+0x210>)
 800768c:	1ab6      	subs	r6, r6, r2
 800768e:	fa07 f606 	lsl.w	r6, r7, r6
 8007692:	f04f 0e00 	mov.w	lr, #0
 8007696:	e796      	b.n	80075c6 <__ieee754_fmod+0xae>
 8007698:	4574      	cmp	r4, lr
 800769a:	bf38      	it	cc
 800769c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80076a0:	2800      	cmp	r0, #0
 80076a2:	da05      	bge.n	80076b0 <__ieee754_fmod+0x198>
 80076a4:	0fe0      	lsrs	r0, r4, #31
 80076a6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80076aa:	0064      	lsls	r4, r4, #1
 80076ac:	3901      	subs	r1, #1
 80076ae:	e78b      	b.n	80075c8 <__ieee754_fmod+0xb0>
 80076b0:	ea50 0307 	orrs.w	r3, r0, r7
 80076b4:	f43f af5f 	beq.w	8007576 <__ieee754_fmod+0x5e>
 80076b8:	0ffb      	lsrs	r3, r7, #31
 80076ba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80076be:	007c      	lsls	r4, r7, #1
 80076c0:	e7f4      	b.n	80076ac <__ieee754_fmod+0x194>
 80076c2:	0fe1      	lsrs	r1, r4, #31
 80076c4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80076c8:	0064      	lsls	r4, r4, #1
 80076ca:	3a01      	subs	r2, #1
 80076cc:	e78c      	b.n	80075e8 <__ieee754_fmod+0xd0>
 80076ce:	1a89      	subs	r1, r1, r2
 80076d0:	2914      	cmp	r1, #20
 80076d2:	dc0a      	bgt.n	80076ea <__ieee754_fmod+0x1d2>
 80076d4:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80076d8:	fa03 f202 	lsl.w	r2, r3, r2
 80076dc:	40cc      	lsrs	r4, r1
 80076de:	4322      	orrs	r2, r4
 80076e0:	410b      	asrs	r3, r1
 80076e2:	ea43 0105 	orr.w	r1, r3, r5
 80076e6:	4610      	mov	r0, r2
 80076e8:	e737      	b.n	800755a <__ieee754_fmod+0x42>
 80076ea:	291f      	cmp	r1, #31
 80076ec:	dc07      	bgt.n	80076fe <__ieee754_fmod+0x1e6>
 80076ee:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80076f2:	40cc      	lsrs	r4, r1
 80076f4:	fa03 f202 	lsl.w	r2, r3, r2
 80076f8:	4322      	orrs	r2, r4
 80076fa:	462b      	mov	r3, r5
 80076fc:	e7f1      	b.n	80076e2 <__ieee754_fmod+0x1ca>
 80076fe:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8007702:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8007706:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800770a:	32e2      	adds	r2, #226	@ 0xe2
 800770c:	fa43 f202 	asr.w	r2, r3, r2
 8007710:	e7f3      	b.n	80076fa <__ieee754_fmod+0x1e2>
 8007712:	bf00      	nop
 8007714:	7fefffff 	.word	0x7fefffff
 8007718:	7ff00000 	.word	0x7ff00000
 800771c:	08007b18 	.word	0x08007b18
 8007720:	fffffbed 	.word	0xfffffbed
 8007724:	fffffc02 	.word	0xfffffc02
 8007728:	fffffbe2 	.word	0xfffffbe2

0800772c <_init>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr

08007738 <_fini>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	bf00      	nop
 800773c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773e:	bc08      	pop	{r3}
 8007740:	469e      	mov	lr, r3
 8007742:	4770      	bx	lr
